
# 1 "intelHex.c"

# 4 "C:/Program Files (x86)/Microchip/xc8/v1.21/include\string.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;


extern int errno;

# 22
extern void * memcpy(void *, const void *, size_t);
extern void * memmove(void *, const void *, size_t);
extern void * memset(void *, int, size_t);

# 35
extern char * strcat(char *, const char *);
extern char * strcpy(char *, const char *);
extern char * strncat(char *, const char *, size_t);
extern char * strncpy(char *, const char *, size_t);
extern char * strdup(const char *);
extern char * strtok(char *, const char *);


extern int memcmp(const void *, const void *, size_t);
extern int strcmp(const char *, const char *);
extern int stricmp(const char *, const char *);
extern int strncmp(const char *, const char *, size_t);
extern int strnicmp(const char *, const char *, size_t);
extern void * memchr(const void *, int, size_t);
extern size_t strcspn(const char *, const char *);
extern char * strpbrk(const char *, const char *);
extern size_t strspn(const char *, const char *);
extern char * strstr(const char *, const char *);
extern char * stristr(const char *, const char *);
extern char * strerror(int);
extern size_t strlen(const char *);
extern char * strchr(const char *, int);
extern char * strichr(const char *, int);
extern char * strrchr(const char *, int);
extern char * strrichr(const char *, int);

# 15 "intelHex.h"
extern unsigned char IntelHex_Data[64];
extern unsigned char IntelHex_ByteCount, IntelHex_RecordType;
extern unsigned int IntelHex_StartAddr;

unsigned char HexToByte(char upperNibble, char lowerNibble);
int ParseIntelHex(char *line);

# 4 "intelHex.c"
unsigned char IntelHex_Data[64];
unsigned char IntelHex_ByteCount, IntelHex_RecordType;
unsigned int IntelHex_StartAddr;

unsigned char HexToByte(char upperNibble, char lowerNibble)
{
unsigned char returnVal;

if (upperNibble >= 'A')
{
returnVal = (upperNibble - 'A' + 10);
}
else
{
returnVal = (upperNibble - '0');
}

returnVal = returnVal << 4;

if (lowerNibble >= 'A')
{
returnVal += (lowerNibble - 'A' + 10);
}
else
{
returnVal += (lowerNibble - '0');
}

return returnVal;
}

int ParseIntelHex(char *line)
{
unsigned char lineLength, n;

lineLength = strlen(line);

if (lineLength < 11)
{
return 1;
}

if (line[0] != ':')
{
return 2;
}

IntelHex_ByteCount = HexToByte(line[1], line[2]);
IntelHex_StartAddr = (((unsigned int)HexToByte(line[3], line[4])) << 8) | HexToByte(line[5], line[6]);
IntelHex_RecordType = HexToByte(line[7], line[8]);

if (IntelHex_RecordType == 0)
{
if (lineLength != ((IntelHex_ByteCount * 2) + 11))
{
return 3;
}

for (n = 0; n < IntelHex_ByteCount; n++)
{
IntelHex_Data[n] = HexToByte(line[9 + (n * 2)], line[10 + (n * 2)]);
}
}
else if (IntelHex_RecordType == 1)
{
if (IntelHex_ByteCount != 0)
{
return 4;
}
}
else
{
return 5;
}

unsigned char checksum = 0;
for (n = 1; n < (lineLength - 2); n += 2)
{
checksum += HexToByte(line[n], line[n + 1]);
}

checksum = (checksum ^ 0xFF) + 1;

if (checksum != HexToByte(line[lineLength - 2], line[lineLength - 1]))
{
return 6;
}

return 0;
}
