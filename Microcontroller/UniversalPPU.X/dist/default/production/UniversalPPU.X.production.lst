

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Mon Aug 11 17:54:17 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    68  0000                     _ANSELA	set	3896
    69  0000                     _ANSELB	set	3897
    70  0000                     _ANSELC	set	3898
    71  0000                     _ANSELD	set	3899
    72  0000                     _ANSELE	set	3900
    73  0000                     _BAUDCON1	set	4024
    74  0000                     _EEADR	set	4009
    75  0000                     _EEADRH	set	4010
    76  0000                     _EECON1bits	set	4006
    77  0000                     _EECON2	set	4007
    78  0000                     _EEDATA	set	4008
    79  0000                     _INTCONbits	set	4082
    80  0000                     _LATA	set	3977
    81  0000                     _LATB	set	3978
    82  0000                     _LATC	set	3979
    83  0000                     _LATD	set	3980
    84  0000                     _LATE	set	3981
    85  0000                     _OSCCON	set	4051
    86  0000                     _OSCTUNE	set	3995
    87  0000                     _PIR1	set	3998
    88  0000                     _PIR3	set	4004
    89  0000                     _PORTA	set	3968
    90  0000                     _PORTC	set	3970
    91  0000                     _PORTD	set	3971
    92  0000                     _RCREG1	set	4014
    93  0000                     _RCSTA1	set	4011
    94  0000                     _SPBRG1	set	4015
    95  0000                     _SPBRGH1	set	4016
    96  0000                     _SSP1BUF	set	4041
    97  0000                     _SSP1CON1	set	4038
    98  0000                     _SSP1STAT	set	4039
    99  0000                     _SSP2BUF	set	3951
   100  0000                     _SSP2CON1	set	3948
   101  0000                     _SSP2STAT	set	3949
   102  0000                     _TABLAT	set	4085
   103  0000                     _TBLPTRH	set	4087
   104  0000                     _TBLPTRL	set	4086
   105  0000                     _TBLPTRU	set	4088
   106  0000                     _TRISA	set	3986
   107  0000                     _TRISB	set	3987
   108  0000                     _TRISC	set	3988
   109  0000                     _TRISD	set	3989
   110  0000                     _TRISE	set	3990
   111  0000                     _TXREG1	set	4013
   112  0000                     _TXSTA1	set	4012
   113                           
   114                           	psect	mediumconst
   115  00FEC2                     __pmediumconst:
   116                           	opt stack 0
   117  00FEC2                     __stringdata:
   118                           	opt stack 0
   119  00FEC2                     STR_28:
   120  00FEC2  75                 	db	117	;'u'
   121  00FEC3  6E                 	db	110	;'n'
   122  00FEC4  73                 	db	115	;'s'
   123  00FEC5  65                 	db	101	;'e'
   124  00FEC6  74                 	db	116	;'t'
   125  00FEC7  5F                 	db	95	;'_'
   126  00FEC8  61                 	db	97	;'a'
   127  00FEC9  75                 	db	117	;'u'
   128  00FECA  74                 	db	116	;'t'
   129  00FECB  6F                 	db	111	;'o'
   130  00FECC  5F                 	db	95	;'_'
   131  00FECD  63                 	db	99	;'c'
   132  00FECE  68                 	db	104	;'h'
   133  00FECF  61                 	db	97	;'a'
   134  00FED0  6E                 	db	110	;'n'
   135  00FED1  67                 	db	103	;'g'
   136  00FED2  65                 	db	101	;'e'
   137  00FED3  5F                 	db	95	;'_'
   138  00FED4  70                 	db	112	;'p'
   139  00FED5  61                 	db	97	;'a'
   140  00FED6  6C                 	db	108	;'l'
   141  00FED7  65                 	db	101	;'e'
   142  00FED8  74                 	db	116	;'t'
   143  00FED9  74                 	db	116	;'t'
   144  00FEDA  65                 	db	101	;'e'
   145  00FEDB  00                 	db	0
   146  00FEDC                     STR_24:
   147  00FEDC  75                 	db	117	;'u'
   148  00FEDD  6E                 	db	110	;'n'
   149  00FEDE  73                 	db	115	;'s'
   150  00FEDF  65                 	db	101	;'e'
   151  00FEE0  74                 	db	116	;'t'
   152  00FEE1  5F                 	db	95	;'_'
   153  00FEE2  61                 	db	97	;'a'
   154  00FEE3  75                 	db	117	;'u'
   155  00FEE4  74                 	db	116	;'t'
   156  00FEE5  6F                 	db	111	;'o'
   157  00FEE6  6C                 	db	108	;'l'
   158  00FEE7  6F                 	db	111	;'o'
   159  00FEE8  61                 	db	97	;'a'
   160  00FEE9  64                 	db	100	;'d'
   161  00FEEA  5F                 	db	95	;'_'
   162  00FEEB  66                 	db	102	;'f'
   163  00FEEC  70                 	db	112	;'p'
   164  00FEED  67                 	db	103	;'g'
   165  00FEEE  61                 	db	97	;'a'
   166  00FEEF  00                 	db	0
   167  00FEF0                     STR_7:
   168  00FEF0  62                 	db	98	;'b'
   169  00FEF1  6F                 	db	111	;'o'
   170  00FEF2  6F                 	db	111	;'o'
   171  00FEF3  74                 	db	116	;'t'
   172  00FEF4  6C                 	db	108	;'l'
   173  00FEF5  6F                 	db	111	;'o'
   174  00FEF6  61                 	db	97	;'a'
   175  00FEF7  64                 	db	100	;'d'
   176  00FEF8  65                 	db	101	;'e'
   177  00FEF9  72                 	db	114	;'r'
   178  00FEFA  5F                 	db	95	;'_'
   179  00FEFB  6D                 	db	109	;'m'
   180  00FEFC  6F                 	db	111	;'o'
   181  00FEFD  64                 	db	100	;'d'
   182  00FEFE  65                 	db	101	;'e'
   183  00FEFF  00                 	db	0
   184  00FF00                     STR_42:
   185  00FF00  77                 	db	119	;'w'
   186  00FF01  72                 	db	114	;'r'
   187  00FF02  69                 	db	105	;'i'
   188  00FF03  74                 	db	116	;'t'
   189  00FF04  65                 	db	101	;'e'
   190  00FF05  5F                 	db	95	;'_'
   191  00FF06  66                 	db	102	;'f'
   192  00FF07  70                 	db	112	;'p'
   193  00FF08  67                 	db	103	;'g'
   194  00FF09  61                 	db	97	;'a'
   195  00FF0A  5F                 	db	95	;'_'
   196  00FF0B  73                 	db	115	;'s'
   197  00FF0C  69                 	db	105	;'i'
   198  00FF0D  7A                 	db	122	;'z'
   199  00FF0E  65                 	db	101	;'e'
   200  00FF0F  00                 	db	0
   201  00FF10                     STR_10:
   202  00FF10  6C                 	db	108	;'l'
   203  00FF11  6F                 	db	111	;'o'
   204  00FF12  61                 	db	97	;'a'
   205  00FF13  64                 	db	100	;'d'
   206  00FF14  5F                 	db	95	;'_'
   207  00FF15  73                 	db	115	;'s'
   208  00FF16  70                 	db	112	;'p'
   209  00FF17  69                 	db	105	;'i'
   210  00FF18  5F                 	db	95	;'_'
   211  00FF19  62                 	db	98	;'b'
   212  00FF1A  75                 	db	117	;'u'
   213  00FF1B  66                 	db	102	;'f'
   214  00FF1C  66                 	db	102	;'f'
   215  00FF1D  65                 	db	101	;'e'
   216  00FF1E  72                 	db	114	;'r'
   217  00FF1F  00                 	db	0
   218  00FF20                     STR_31:
   219  00FF20  67                 	db	103	;'g'
   220  00FF21  65                 	db	101	;'e'
   221  00FF22  74                 	db	116	;'t'
   222  00FF23  5F                 	db	95	;'_'
   223  00FF24  73                 	db	115	;'s'
   224  00FF25  70                 	db	112	;'p'
   225  00FF26  69                 	db	105	;'i'
   226  00FF27  5F                 	db	95	;'_'
   227  00FF28  73                 	db	115	;'s'
   228  00FF29  74                 	db	116	;'t'
   229  00FF2A  61                 	db	97	;'a'
   230  00FF2B  74                 	db	116	;'t'
   231  00FF2C  75                 	db	117	;'u'
   232  00FF2D  73                 	db	115	;'s'
   233  00FF2E  00                 	db	0
   234  00FF2F                     STR_30:
   235  00FF2F  67                 	db	103	;'g'
   236  00FF30  65                 	db	101	;'e'
   237  00FF31  74                 	db	116	;'t'
   238  00FF32  5F                 	db	95	;'_'
   239  00FF33  73                 	db	115	;'s'
   240  00FF34  70                 	db	112	;'p'
   241  00FF35  69                 	db	105	;'i'
   242  00FF36  5F                 	db	95	;'_'
   243  00FF37  64                 	db	100	;'d'
   244  00FF38  65                 	db	101	;'e'
   245  00FF39  76                 	db	118	;'v'
   246  00FF3A  69                 	db	105	;'i'
   247  00FF3B  64                 	db	100	;'d'
   248  00FF3C  00                 	db	0
   249  00FF3D                     STR_41:
   250  00FF3D  67                 	db	103	;'g'
   251  00FF3E  65                 	db	101	;'e'
   252  00FF3F  74                 	db	116	;'t'
   253  00FF40  5F                 	db	95	;'_'
   254  00FF41  66                 	db	102	;'f'
   255  00FF42  70                 	db	112	;'p'
   256  00FF43  67                 	db	103	;'g'
   257  00FF44  61                 	db	97	;'a'
   258  00FF45  5F                 	db	95	;'_'
   259  00FF46  73                 	db	115	;'s'
   260  00FF47  69                 	db	105	;'i'
   261  00FF48  7A                 	db	122	;'z'
   262  00FF49  65                 	db	101	;'e'
   263  00FF4A  00                 	db	0
   264  00FF4B                     STR_9:
   265  00FF4B  74                 	db	116	;'t'
   266  00FF4C  6F                 	db	111	;'o'
   267  00FF4D  5F                 	db	95	;'_'
   268  00FF4E  62                 	db	98	;'b'
   269  00FF4F  6F                 	db	111	;'o'
   270  00FF50  6F                 	db	111	;'o'
   271  00FF51  74                 	db	116	;'t'
   272  00FF52  6C                 	db	108	;'l'
   273  00FF53  6F                 	db	111	;'o'
   274  00FF54  61                 	db	97	;'a'
   275  00FF55  64                 	db	100	;'d'
   276  00FF56  65                 	db	101	;'e'
   277  00FF57  72                 	db	114	;'r'
   278  00FF58  00                 	db	0
   279  00FF59                     STR_8:
   280  00FF59  61                 	db	97	;'a'
   281  00FF5A  70                 	db	112	;'p'
   282  00FF5B  70                 	db	112	;'p'
   283  00FF5C  6C                 	db	108	;'l'
   284  00FF5D  69                 	db	105	;'i'
   285  00FF5E  63                 	db	99	;'c'
   286  00FF5F  61                 	db	97	;'a'
   287  00FF60  74                 	db	116	;'t'
   288  00FF61  69                 	db	105	;'i'
   289  00FF62  6F                 	db	111	;'o'
   290  00FF63  6E                 	db	110	;'n'
   291  00FF64  3B                 	db	59	;';'
   292  00FF65  00                 	db	0
   293  00FF66                     STR_36:
   294  00FF66  73                 	db	115	;'s'
   295  00FF67  65                 	db	101	;'e'
   296  00FF68  63                 	db	99	;'c'
   297  00FF69  74                 	db	116	;'t'
   298  00FF6A  6F                 	db	111	;'o'
   299  00FF6B  72                 	db	114	;'r'
   300  00FF6C  5F                 	db	95	;'_'
   301  00FF6D  65                 	db	101	;'e'
   302  00FF6E  72                 	db	114	;'r'
   303  00FF6F  61                 	db	97	;'a'
   304  00FF70  73                 	db	115	;'s'
   305  00FF71  65                 	db	101	;'e'
   306  00FF72  00                 	db	0
   307  00FF73                     STR_45:
   308  00FF73  6C                 	db	108	;'l'
   309  00FF74  6F                 	db	111	;'o'
   310  00FF75  61                 	db	97	;'a'
   311  00FF76  64                 	db	100	;'d'
   312  00FF77  5F                 	db	95	;'_'
   313  00FF78  70                 	db	112	;'p'
   314  00FF79  61                 	db	97	;'a'
   315  00FF7A  6C                 	db	108	;'l'
   316  00FF7B  65                 	db	101	;'e'
   317  00FF7C  74                 	db	116	;'t'
   318  00FF7D  74                 	db	116	;'t'
   319  00FF7E  65                 	db	101	;'e'
   320  00FF7F  00                 	db	0
   321  00FF80                     STR_39:
   322  00FF80  73                 	db	115	;'s'
   323  00FF81  70                 	db	112	;'p'
   324  00FF82  69                 	db	105	;'i'
   325  00FF83  5F                 	db	95	;'_'
   326  00FF84  75                 	db	117	;'u'
   327  00FF85  6E                 	db	110	;'n'
   328  00FF86  73                 	db	115	;'s'
   329  00FF87  65                 	db	101	;'e'
   330  00FF88  74                 	db	116	;'t'
   331  00FF89  5F                 	db	95	;'_'
   332  00FF8A  62                 	db	98	;'b'
   333  00FF8B  70                 	db	112	;'p'
   334  00FF8C  00                 	db	0
   335  00FF8D                     STR_48:
   336  00FF8D  67                 	db	103	;'g'
   337  00FF8E  65                 	db	101	;'e'
   338  00FF8F  74                 	db	116	;'t'
   339  00FF90  5F                 	db	95	;'_'
   340  00FF91  6A                 	db	106	;'j'
   341  00FF92  75                 	db	117	;'u'
   342  00FF93  6D                 	db	109	;'m'
   343  00FF94  70                 	db	112	;'p'
   344  00FF95  65                 	db	101	;'e'
   345  00FF96  72                 	db	114	;'r'
   346  00FF97  73                 	db	115	;'s'
   347  00FF98  00                 	db	0
   348  00FF99                     STR_20:
   349  00FF99  69                 	db	105	;'i'
   350  00FF9A  6E                 	db	110	;'n'
   351  00FF9B  69                 	db	105	;'i'
   352  00FF9C  74                 	db	116	;'t'
   353  00FF9D  5F                 	db	95	;'_'
   354  00FF9E  66                 	db	102	;'f'
   355  00FF9F  70                 	db	112	;'p'
   356  00FFA0  67                 	db	103	;'g'
   357  00FFA1  61                 	db	97	;'a'
   358  00FFA2  00                 	db	0
   359  00FFA3                     STR_18:
   360  00FFA3  65                 	db	101	;'e'
   361  00FFA4  72                 	db	114	;'r'
   362  00FFA5  61                 	db	97	;'a'
   363  00FFA6  73                 	db	115	;'s'
   364  00FFA7  65                 	db	101	;'e'
   365  00FFA8  5F                 	db	95	;'_'
   366  00FFA9  73                 	db	115	;'s'
   367  00FFAA  70                 	db	112	;'p'
   368  00FFAB  69                 	db	105	;'i'
   369  00FFAC  00                 	db	0
   370  00FFAD                     STR_12:
   371  00FFAD  77                 	db	119	;'w'
   372  00FFAE  72                 	db	114	;'r'
   373  00FFAF  69                 	db	105	;'i'
   374  00FFB0  74                 	db	116	;'t'
   375  00FFB1  65                 	db	101	;'e'
   376  00FFB2  5F                 	db	95	;'_'
   377  00FFB3  73                 	db	115	;'s'
   378  00FFB4  70                 	db	112	;'p'
   379  00FFB5  69                 	db	105	;'i'
   380  00FFB6  00                 	db	0
   381  00FFB7                     STR_34:
   382  00FFB7  73                 	db	115	;'s'
   383  00FFB8  70                 	db	112	;'p'
   384  00FFB9  69                 	db	105	;'i'
   385  00FFBA  5F                 	db	95	;'_'
   386  00FFBB  77                 	db	119	;'w'
   387  00FFBC  72                 	db	114	;'r'
   388  00FFBD  64                 	db	100	;'d'
   389  00FFBE  69                 	db	105	;'i'
   390  00FFBF  00                 	db	0
   391  00FFC0                     STR_15:
   392  00FFC0  72                 	db	114	;'r'
   393  00FFC1  65                 	db	101	;'e'
   394  00FFC2  61                 	db	97	;'a'
   395  00FFC3  64                 	db	100	;'d'
   396  00FFC4  5F                 	db	95	;'_'
   397  00FFC5  73                 	db	115	;'s'
   398  00FFC6  70                 	db	112	;'p'
   399  00FFC7  69                 	db	105	;'i'
   400  00FFC8  00                 	db	0
   401  00FFC9                     STR_32:
   402  00FFC9  73                 	db	115	;'s'
   403  00FFCA  70                 	db	112	;'p'
   404  00FFCB  69                 	db	105	;'i'
   405  00FFCC  5F                 	db	95	;'_'
   406  00FFCD  77                 	db	119	;'w'
   407  00FFCE  72                 	db	114	;'r'
   408  00FFCF  65                 	db	101	;'e'
   409  00FFD0  6E                 	db	110	;'n'
   410  00FFD1  00                 	db	0
   411  00FFD2                     STR_46:
   412  00FFD2  77                 	db	119	;'w'
   413  00FFD3  68                 	db	104	;'h'
   414  00FFD4  69                 	db	105	;'i'
   415  00FFD5  63                 	db	99	;'c'
   416  00FFD6  68                 	db	104	;'h'
   417  00FFD7  3B                 	db	59	;';'
   418  00FFD8  00                 	db	0
   419  00FFD9                     STR_43:
   420  00FFD9  73                 	db	115	;'s'
   421  00FFDA  69                 	db	105	;'i'
   422  00FFDB  7A                 	db	122	;'z'
   423  00FFDC  65                 	db	101	;'e'
   424  00FFDD  3B                 	db	59	;';'
   425  00FFDE  00                 	db	0
   426  00FFDF                     STR_13:
   427  00FFDF  61                 	db	97	;'a'
   428  00FFE0  64                 	db	100	;'d'
   429  00FFE1  64                 	db	100	;'d'
   430  00FFE2  72                 	db	114	;'r'
   431  00FFE3  3B                 	db	59	;';'
   432  00FFE4  00                 	db	0
   433  00FFE5                     STR_5:
   434  00FFE5  68                 	db	104	;'h'
   435  00FFE6  65                 	db	101	;'e'
   436  00FFE7  6C                 	db	108	;'l'
   437  00FFE8  6C                 	db	108	;'l'
   438  00FFE9  6F                 	db	111	;'o'
   439  00FFEA  00                 	db	0
   440  00FFEB                     STR_6:
   441  00FFEB  68                 	db	104	;'h'
   442  00FFEC  69                 	db	105	;'i'
   443  00FFED  3B                 	db	59	;';'
   444  00FFEE  00                 	db	0
   445  00FFEF                     STR_2:
   446  00FFEF  6F                 	db	111	;'o'
   447  00FFF0  6B                 	db	107	;'k'
   448  00FFF1  3B                 	db	59	;';'
   449  00FFF2  00                 	db	0
   450  00FFF3                     STR_1:
   451  00FFF3  65                 	db	101	;'e'
   452  00FFF4  6E                 	db	110	;'n'
   453  00FFF5  64                 	db	100	;'d'
   454  00FFF6  00                 	db	0
   455  00FFF7                     STR_4:
   456  00FFF7  65                 	db	101	;'e'
   457  00FFF8  72                 	db	114	;'r'
   458  00FFF9  72                 	db	114	;'r'
   459  00FFFA  00                 	db	0
   460  00FFFB                     STR_49:
   461  00FFFB  3F                 	db	63	;'?'
   462  00FFFC  3B                 	db	59	;';'
   463  00FFFD  00                 	db	0
   464  00FFFE                     __end_of__stringdata:
   465                           	opt stack 0
   466                           
   467                           ; #config settings
   468  00FFFE  00                 	db	0	; dummy byte at the end
   469  0000                     
   470                           	psect	cinit
   471  00ED1A                     __pcinit:
   472                           	opt stack 0
   473  00ED1A                     start_initialization:
   474                           	opt stack 0
   475  00ED1A                     __initialization:
   476                           	opt stack 0
   477                           
   478                           ; Clear objects allocated to BIGRAM (257 bytes)
   479  00ED1A  EE02  F000         	lfsr	0,__pbssBIGRAM
   480  00ED1E  EE11 F001          	lfsr	1,257
   481  00ED22                     clear_0:
   482  00ED22  6AEE               	clrf	postinc0,c
   483  00ED24  50E5               	movf	postdec1,w,c
   484  00ED26  50E1               	movf	fsr1l,w,c
   485  00ED28  E1FC               	bnz	clear_0
   486  00ED2A  50E2               	movf	fsr1h,w,c
   487  00ED2C  E1FA               	bnz	clear_0
   488                           
   489                           ; Clear objects allocated to BANK1 (256 bytes)
   490  00ED2E  EE01  F000         	lfsr	0,__pbssBANK1
   491  00ED32  EE11 F000          	lfsr	1,256
   492  00ED36                     clear_1:
   493  00ED36  6AEE               	clrf	postinc0,c
   494  00ED38  50E5               	movf	postdec1,w,c
   495  00ED3A  50E1               	movf	fsr1l,w,c
   496  00ED3C  E1FC               	bnz	clear_1
   497  00ED3E  50E2               	movf	fsr1h,w,c
   498  00ED40  E1FA               	bnz	clear_1
   499                           
   500                           ; Clear objects allocated to BANK0 (64 bytes)
   501  00ED42  EE00  F060         	lfsr	0,__pbssBANK0
   502  00ED46  0E40               	movlw	64
   503  00ED48                     clear_2:
   504  00ED48  6AEE               	clrf	postinc0,c
   505  00ED4A  06E8               	decf	wreg,f,c
   506  00ED4C  E1FD               	bnz	clear_2
   507                           
   508                           ; Clear objects allocated to COMRAM (6 bytes)
   509  00ED4E  6A2B               	clrf	(__pbssCOMRAM+5)& (0+255),c
   510  00ED50  6A2A               	clrf	(__pbssCOMRAM+4)& (0+255),c
   511  00ED52  6A29               	clrf	(__pbssCOMRAM+3)& (0+255),c
   512  00ED54  6A28               	clrf	(__pbssCOMRAM+2)& (0+255),c
   513  00ED56  6A27               	clrf	(__pbssCOMRAM+1)& (0+255),c
   514  00ED58  6A26               	clrf	__pbssCOMRAM& (0+255),c
   515  00ED5A                     end_of_initialization:
   516                           	opt stack 0
   517  00ED5A                     __end_of__initialization:
   518                           	opt stack 0
   519  00ED5A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   520  00ED5C  6EF8               	movwf	tblptru,c
   521  00ED5E  0100               	movlb	0
   522  00ED60  EFA7  F07A         	goto	_main	;jump to C main() function
   523                           tblptru	equ	0xFF8
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           postdec1	equ	0xFE5
   527                           fsr1h	equ	0xFE2
   528                           fsr1l	equ	0xFE1
   529                           
   530                           	psect	bssCOMRAM
   531  000026                     __pbssCOMRAM:
   532                           	opt stack 0
   533  000026                     _IntelHex_StartAddr:
   534                           	opt stack 0
   535  000026                     	ds	2
   536  000028                     _inputBufferPos:
   537                           	opt stack 0
   538  000028                     	ds	2
   539  00002A                     _IntelHex_ByteCount:
   540                           	opt stack 0
   541  00002A                     	ds	1
   542  00002B                     _IntelHex_RecordType:
   543                           	opt stack 0
   544  00002B                     	ds	1
   545                           tblptru	equ	0xFF8
   546                           postinc0	equ	0xFEE
   547                           wreg	equ	0xFE8
   548                           postdec1	equ	0xFE5
   549                           fsr1h	equ	0xFE2
   550                           fsr1l	equ	0xFE1
   551                           
   552                           	psect	bssBANK0
   553  000060                     __pbssBANK0:
   554                           	opt stack 0
   555  000060                     _IntelHex_Data:
   556                           	opt stack 0
   557  000060                     	ds	64
   558                           tblptru	equ	0xFF8
   559                           postinc0	equ	0xFEE
   560                           wreg	equ	0xFE8
   561                           postdec1	equ	0xFE5
   562                           fsr1h	equ	0xFE2
   563                           fsr1l	equ	0xFE1
   564                           
   565                           	psect	bssBANK1
   566  000100                     __pbssBANK1:
   567                           	opt stack 0
   568  000100                     _dataBuffer:
   569                           	opt stack 0
   570  000100                     	ds	256
   571                           tblptru	equ	0xFF8
   572                           postinc0	equ	0xFEE
   573                           wreg	equ	0xFE8
   574                           postdec1	equ	0xFE5
   575                           fsr1h	equ	0xFE2
   576                           fsr1l	equ	0xFE1
   577                           
   578                           	psect	bssBIGRAM
   579  000200                     __pbssBIGRAM:
   580                           	opt stack 0
   581  000200                     _inputBuffer:
   582                           	opt stack 0
   583  000200                     	ds	257
   584                           tblptru	equ	0xFF8
   585                           postinc0	equ	0xFEE
   586                           wreg	equ	0xFE8
   587                           postdec1	equ	0xFE5
   588                           fsr1h	equ	0xFE2
   589                           fsr1l	equ	0xFE1
   590                           
   591                           	psect	cstackCOMRAM
   592  000001                     __pcstackCOMRAM:
   593                           	opt stack 0
   594  000001                     ?_FPGARegs_WriteAddress:
   595                           	opt stack 0
   596  000001                     ?_FPGARegs_WriteData:
   597                           	opt stack 0
   598  000001                     ?_Delay10KTCYx:
   599                           	opt stack 0
   600  000001                     ?_USB_SendChar:
   601                           	opt stack 0
   602  000001                     ?_Write_b_eep:
   603                           	opt stack 0
   604  000001                     ?_FPGA_DoWrite:
   605                           	opt stack 0
   606  000001                     ?_SPIMemory_DoWrite:
   607                           	opt stack 0
   608  000001                     ?_HexToByte:
   609                           	opt stack 0
   610  000001                     ?_Read_b_eep:
   611                           	opt stack 0
   612  000001                     ?_strcmp:
   613                           	opt stack 0
   614  000001                     ?_strlen:
   615                           	opt stack 0
   616  000001                     ?___wmul:
   617                           	opt stack 0
   618  000001                     FPGA_DoWrite@d:
   619                           	opt stack 0
   620  000001                     SPIMemory_DoRead@tmp:
   621                           	opt stack 0
   622  000001                     SPIMemory_DoWrite@d:
   623                           	opt stack 0
   624  000001                     FPGARegs_WriteAddress@addr:
   625                           	opt stack 0
   626  000001                     FPGARegs_WriteData@data:
   627                           	opt stack 0
   628  000001                     FPGARegs_ReadData@ret:
   629                           	opt stack 0
   630  000001                     USB_SendChar@theChar:
   631                           	opt stack 0
   632  000001                     HexToByte@upperNibble:
   633                           	opt stack 0
   634  000001                     Delay10KTCYx@unit:
   635                           	opt stack 0
   636  000001                     Read_b_eep@badd:
   637                           	opt stack 0
   638  000001                     Write_b_eep@badd:
   639                           	opt stack 0
   640  000001                     strcmp@s1:
   641                           	opt stack 0
   642  000001                     strlen@s:
   643                           	opt stack 0
   644  000001                     ___wmul@multiplier:
   645                           	opt stack 0
   646                           
   647                           ; 2 bytes @ 0x0
   648  000001                     	ds	1
   649  000002                     ??_Delay10KTCYx:
   650  000002                     ?_USB_SendString:
   651                           	opt stack 0
   652  000002                     ?_SerialTerm_GetLine:
   653                           	opt stack 0
   654  000002                     FPGA_DoWrite@tmp:
   655                           	opt stack 0
   656  000002                     SPIMemory_DoWrite@tmp:
   657                           	opt stack 0
   658  000002                     SerialTerm_GetLine@noEcho:
   659                           	opt stack 0
   660  000002                     HexToByte@lowerNibble:
   661                           	opt stack 0
   662  000002                     USB_SendString@theString:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x1
   666  000002                     	ds	1
   667  000003                     ??_GetAutoChangePalette:
   668  000003                     ?_SPIMemory_ReadData:
   669                           	opt stack 0
   670  000003                     ??_SPIMemory_WriteEnable:
   671  000003                     ?_SPIMemory_WriteStatus:
   672                           	opt stack 0
   673  000003                     ??_GetAutoloadFPGA:
   674  000003                     ??_SerialTerm_GetLine:
   675  000003                     ?_SPIMemory_PageProgram:
   676                           	opt stack 0
   677  000003                     ??_SPIMemory_BulkErase:
   678  000003                     ??_SPIMemory_ReadId:
   679  000003                     ??_SPIMemory_WriteDisable:
   680  000003                     ?_SPIMemory_SectorErase:
   681                           	opt stack 0
   682  000003                     ??_strlen:
   683  000003                     ??_FPGA_EndConfig:
   684  000003                     ?_GetFpgaImageSize:
   685                           	opt stack 0
   686  000003                     SPIMemory_WriteStatus@stat:
   687                           	opt stack 0
   688  000003                     HexToByte@returnVal:
   689                           	opt stack 0
   690  000003                     Write_b_eep@bdat:
   691                           	opt stack 0
   692  000003                     strcmp@s2:
   693                           	opt stack 0
   694  000003                     ___wmul@multiplicand:
   695                           	opt stack 0
   696  000003                     SPIMemory_ReadData@startAddr:
   697                           	opt stack 0
   698  000003                     SPIMemory_PageProgram@startAddr:
   699                           	opt stack 0
   700  000003                     SPIMemory_SectorErase@startAddr:
   701                           	opt stack 0
   702                           
   703                           ; 3 bytes @ 0x2
   704  000003                     	ds	1
   705  000004                     ??_SPIMemory_WriteStatus:
   706  000004                     ??_Write_b_eep:
   707  000004                     SPIMemory_ReadId@memType:
   708                           	opt stack 0
   709  000004                     FPGA_EndConfig@retryCount:
   710                           	opt stack 0
   711  000004                     SerialTerm_GetLine@retVal:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x3
   715  000004                     	ds	1
   716  000005                     ??_strcmp:
   717  000005                     SPIMemory_ReadId@memCap:
   718                           	opt stack 0
   719  000005                     Write_b_eep@GIE_BIT_VAL:
   720                           	opt stack 0
   721  000005                     strlen@cp:
   722                           	opt stack 0
   723  000005                     ___wmul@product:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x4
   727  000005                     	ds	1
   728  000006                     ??_SPIMemory_ReadData:
   729  000006                     ??_GetFpgaImageSize:
   730  000006                     ?_WriteAutoloadProgram:
   731                           	opt stack 0
   732  000006                     ??_SPIMemory_PageProgram:
   733  000006                     ?_WriteAutoloadFPGA:
   734                           	opt stack 0
   735  000006                     ?_WriteAutoChangePalette:
   736                           	opt stack 0
   737  000006                     ??_SPIMemory_SectorErase:
   738  000006                     ?_WriteFpgaImageSize:
   739                           	opt stack 0
   740  000006                     SPIMemory_ReadId@mfgId:
   741                           	opt stack 0
   742  000006                     WriteAutoloadProgram@newVal:
   743                           	opt stack 0
   744  000006                     WriteAutoloadFPGA@newVal:
   745                           	opt stack 0
   746  000006                     WriteAutoChangePalette@newVal:
   747                           	opt stack 0
   748  000006                     strcmp@r:
   749                           	opt stack 0
   750  000006                     SerialTerm_GetLine@n:
   751                           	opt stack 0
   752  000006                     WriteFpgaImageSize@val:
   753                           	opt stack 0
   754                           
   755                           ; 3 bytes @ 0x5
   756  000006                     	ds	1
   757  000007                     ?_USB_SendHex:
   758                           	opt stack 0
   759  000007                     ?_ParseIntelHex:
   760                           	opt stack 0
   761  000007                     USB_SendHex@theChar:
   762                           	opt stack 0
   763  000007                     WriteAutoloadProgram@oldVal:
   764                           	opt stack 0
   765  000007                     WriteAutoloadFPGA@oldVal:
   766                           	opt stack 0
   767  000007                     WriteAutoChangePalette@oldVal:
   768                           	opt stack 0
   769  000007                     ParseIntelHex@line:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x6
   773  000007                     	ds	1
   774  000008                     USB_SendHex@upperNibble:
   775                           	opt stack 0
   776  000008                     SerialTerm_GetLine@inputTmp:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x7
   780  000008                     	ds	1
   781  000009                     ??_ParseIntelHex:
   782  000009                     ??_WriteFpgaImageSize:
   783  000009                     USB_SendHex@lowerNibble:
   784                           	opt stack 0
   785  000009                     SPIMemory_ReadData@currCount:
   786                           	opt stack 0
   787  000009                     SPIMemory_PageProgram@currCount:
   788                           	opt stack 0
   789  000009                     GetFpgaImageSize@retVal:
   790                           	opt stack 0
   791                           
   792                           ; 3 bytes @ 0x8
   793  000009                     	ds	1
   794  00000A                     ??_SPIMemory_ReadStatus:
   795                           
   796                           ; 0 bytes @ 0x9
   797  00000A                     	ds	1
   798  00000B                     ?_LoadPalette:
   799                           	opt stack 0
   800  00000B                     LoadPalette@jmp:
   801                           	opt stack 0
   802  00000B                     SPIMemory_ReadStatus@stat:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0xA
   806  00000B                     	ds	1
   807  00000C                     ??_SPIMemory_WaitWIP:
   808  00000C                     ??_LoadPalette:
   809  00000C                     ?_LoadFPGA:
   810                           	opt stack 0
   811  00000C                     LoadFPGA@endAddr:
   812                           	opt stack 0
   813                           
   814                           ; 3 bytes @ 0xB
   815  00000C                     	ds	2
   816  00000E                     ParseIntelHex@checksum:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0xD
   820  00000E                     	ds	1
   821  00000F                     ??_LoadFPGA:
   822  00000F                     ParseIntelHex@lineLength:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0xE
   826  00000F                     	ds	1
   827  000010                     ParseIntelHex@n:
   828                           	opt stack 0
   829  000010                     LoadPalette@n:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0xF
   833  000010                     	ds	2
   834  000012                     LoadPalette@m:
   835                           	opt stack 0
   836  000012                     LoadFPGA@currAddr:
   837                           	opt stack 0
   838                           
   839                           ; 3 bytes @ 0x11
   840  000012                     	ds	2
   841  000014                     LoadPalette@i:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x13
   845  000014                     	ds	1
   846  000015                     LoadFPGA@n:
   847                           	opt stack 0
   848  000015                     LoadPalette@spiAddr:
   849                           	opt stack 0
   850                           
   851                           ; 3 bytes @ 0x14
   852  000015                     	ds	2
   853  000017                     LoadFPGA@m:
   854                           	opt stack 0
   855                           
   856                           ; 2 bytes @ 0x16
   857  000017                     	ds	2
   858  000019                     ??_main:
   859                           
   860                           ; 0 bytes @ 0x18
   861  000019                     	ds	3
   862  00001C                     main@oldJumpers:
   863                           	opt stack 0
   864                           
   865                           ; 1 bytes @ 0x1B
   866  00001C                     	ds	1
   867  00001D                     main@retCode:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x1C
   871  00001D                     	ds	1
   872  00001E                     main@getWriteData:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x1D
   876  00001E                     	ds	1
   877  00001F                     main@newJumpers:
   878                           	opt stack 0
   879                           
   880                           ; 1 bytes @ 0x1E
   881  00001F                     	ds	1
   882  000020                     main@n:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x1F
   886  000020                     	ds	2
   887  000022                     main@inLength:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x21
   891  000022                     	ds	1
   892  000023                     main@spiAddr:
   893                           	opt stack 0
   894                           
   895                           ; 3 bytes @ 0x22
   896  000023                     	ds	3
   897                           tblptru	equ	0xFF8
   898                           postinc0	equ	0xFEE
   899                           wreg	equ	0xFE8
   900                           postdec1	equ	0xFE5
   901                           fsr1h	equ	0xFE2
   902                           fsr1l	equ	0xFE1
   903                           
   904 ;;
   905 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   906 ;;
   907 ;; *************** function _main *****************
   908 ;; Defined at:
   909 ;;		line 124 in file "main.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;  retCode         1   28[COMRAM] unsigned char 
   914 ;;  spiAddr         3   34[COMRAM] unsigned um
   915 ;;  n               2   31[COMRAM] unsigned int 
   916 ;;  inLength        1   33[COMRAM] unsigned char 
   917 ;;  newJumpers      1   30[COMRAM] unsigned char 
   918 ;;  getWriteData    1   29[COMRAM] unsigned char 
   919 ;;  oldJumpers      1   27[COMRAM] unsigned char 
   920 ;;  stat            1    0        unsigned char 
   921 ;; Return value:  Size  Location     Type
   922 ;;		None               void
   923 ;; Registers used:
   924 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   925 ;; Tracked objects:
   926 ;;		On entry : 0/0
   927 ;;		On exit  : 0/0
   928 ;;		Unchanged: 0/0
   929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   931 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;Total ram usage:       13 bytes
   935 ;; Hardware stack levels required when called:    3
   936 ;; This function calls:
   937 ;;		_FPGA_Init
   938 ;;		_LoadPalette
   939 ;;		_SPIMemory_ReadData
   940 ;;		_FPGARegs_WriteAddress
   941 ;;		_LoadFPGA
   942 ;;		_PeripheralInit
   943 ;;		_SerialTerm_Init
   944 ;;		_SPIMemory_Init
   945 ;;		_SPIMemory_WriteEnable
   946 ;;		_SPIMemory_WriteStatus
   947 ;;		_FPGARegs_Init
   948 ;;		_Delay10KTCYx
   949 ;;		_GetAutoloadFPGA
   950 ;;		_GetFpgaImageSize
   951 ;;		_FPGARegs_ReadData
   952 ;;		_SerialTerm_GetLine
   953 ;;		_strcmp
   954 ;;		_USB_SendString
   955 ;;		_ParseIntelHex
   956 ;;		_USB_SendChar
   957 ;;		_USB_FlushBuffer
   958 ;;		_WriteAutoloadProgram
   959 ;;		_HexToByte
   960 ;;		_SPIMemory_PageProgram
   961 ;;		_SPIMemory_WaitWIP
   962 ;;		_USB_SendHex
   963 ;;		_SPIMemory_BulkErase
   964 ;;		_WriteAutoloadFPGA
   965 ;;		_WriteAutoChangePalette
   966 ;;		_SPIMemory_ReadId
   967 ;;		_SPIMemory_ReadStatus
   968 ;;		_SPIMemory_WriteDisable
   969 ;;		_SPIMemory_SectorErase
   970 ;;		_WriteFpgaImageSize
   971 ;; This function is called by:
   972 ;;		Startup code after reset
   973 ;; This function uses a non-reentrant model
   974 ;;
   975                           
   976                           	psect	text0
   977  00F54E                     __ptext0:
   978                           	opt stack 0
   979  00F54E                     _main:
   980                           	opt stack 28
   981                           
   982                           ;main.c: 125: unsigned char inLength;
   983                           ;main.c: 126: unsigned char getWriteData = 0;
   984                           
   985                           ;incstack = 0
   986                           ;incstack = 0
   987  00F54E  6E19               	movwf	??_main& (0+255),c
   988  00F550  0E00               	movlw	0
   989  00F552  6E1E               	movwf	main@getWriteData,c
   990  00F554  5019               	movf	??_main& (0+255),w,c
   991                           
   992                           ;main.c: 127: unsigned int n;
   993                           ;main.c: 128: unsigned char oldJumpers, newJumpers;
   994                           ;main.c: 129: unsigned short long spiAddr;
   995                           ;main.c: 130: unsigned char stat;
   996                           ;main.c: 132: PeripheralInit();
   997  00F556  EC02  F077         	call	_PeripheralInit	;wreg free
   998                           
   999                           ;main.c: 133: SerialTerm_Init();
  1000  00F55A  EC11  F074         	call	_SerialTerm_Init	;wreg free
  1001                           
  1002                           ;main.c: 135: SPIMemory_Init();
  1003  00F55E  EC5C  F074         	call	_SPIMemory_Init	;wreg free
  1004                           
  1005                           ;main.c: 136: SPIMemory_WriteEnable();
  1006  00F562  ECAA  F074         	call	_SPIMemory_WriteEnable	;wreg free
  1007                           
  1008                           ;main.c: 137: SPIMemory_WriteStatus(0x00);
  1009  00F566  6E19               	movwf	??_main& (0+255),c
  1010  00F568  0E00               	movlw	0
  1011  00F56A  6E03               	movwf	?_SPIMemory_WriteStatus,c
  1012  00F56C  5019               	movf	??_main& (0+255),w,c
  1013  00F56E  ECF9  F074         	call	_SPIMemory_WriteStatus	;wreg free
  1014                           
  1015                           ;main.c: 139: FPGA_Init();
  1016  00F572  EC2F  F074         	call	_FPGA_Init	;wreg free
  1017                           
  1018                           ;main.c: 140: FPGARegs_Init();
  1019  00F576  EC16  F074         	call	_FPGARegs_Init	;wreg free
  1020                           
  1021                           ;main.c: 142: Delay10KTCYx(0);
  1022  00F57A  6E19               	movwf	??_main& (0+255),c
  1023  00F57C  0E00               	movlw	0
  1024  00F57E  6E01               	movwf	?_Delay10KTCYx,c
  1025  00F580  5019               	movf	??_main& (0+255),w,c
  1026  00F582  EC39  F074         	call	_Delay10KTCYx	;wreg free
  1027                           
  1028                           ;main.c: 144: if (GetAutoloadFPGA() != 0)
  1029  00F586  EC81  F074         	call	_GetAutoloadFPGA	;wreg free
  1030  00F58A  0900               	iorlw	0
  1031  00F58C  B4D8               	btfsc	status,2,c
  1032  00F58E  D00A               	goto	l3039
  1033                           
  1034                           ;main.c: 145: {
  1035                           ;main.c: 146: LoadFPGA(GetFpgaImageSize());
  1036  00F590  ECB8  F077         	call	_GetFpgaImageSize	;wreg free
  1037  00F594  C005  F00E         	movff	?_GetFpgaImageSize+2,?_LoadFPGA+2
  1038  00F598  C004  F00D         	movff	?_GetFpgaImageSize+1,?_LoadFPGA+1
  1039  00F59C  C003  F00C         	movff	?_GetFpgaImageSize,?_LoadFPGA
  1040  00F5A0  EC00  F078         	call	_LoadFPGA	;wreg free
  1041  00F5A4                     l3039:
  1042                           
  1043                           ;main.c: 147: }
  1044                           ;main.c: 149: LATB = LATB | 0x04;;
  1045  00F5A4  508A               	movf	3978,w,c	;volatile
  1046  00F5A6  0904               	iorlw	4
  1047  00F5A8  6E8A               	movwf	3978,c	;volatile
  1048                           
  1049                           ;main.c: 150: LATB = LATB | 0x08;;
  1050  00F5AA  508A               	movf	3978,w,c	;volatile
  1051  00F5AC  0908               	iorlw	8
  1052  00F5AE  6E8A               	movwf	3978,c	;volatile
  1053  00F5B0                     l3043:
  1054                           
  1055                           ;main.c: 153: {
  1056                           ;main.c: 154: FPGARegs_WriteAddress(0x06);
  1057  00F5B0  6E19               	movwf	??_main& (0+255),c
  1058  00F5B2  0E06               	movlw	6
  1059  00F5B4  6E01               	movwf	?_FPGARegs_WriteAddress,c
  1060  00F5B6  5019               	movf	??_main& (0+255),w,c
  1061  00F5B8  ECD7  F074         	call	_FPGARegs_WriteAddress	;wreg free
  1062                           
  1063                           ;main.c: 155: newJumpers = FPGARegs_ReadData();
  1064  00F5BC  EC22  F075         	call	_FPGARegs_ReadData	;wreg free
  1065  00F5C0  6E1F               	movwf	main@newJumpers,c
  1066                           
  1067                           ;main.c: 157: if (newJumpers != oldJumpers)
  1068  00F5C2  501F               	movf	main@newJumpers,w,c
  1069  00F5C4  181C               	xorwf	main@oldJumpers,w,c
  1070  00F5C6  B4D8               	btfsc	status,2,c
  1071  00F5C8  D006               	goto	l3053
  1072                           
  1073                           ;main.c: 158: {
  1074                           ;main.c: 159: LoadPalette(newJumpers);
  1075  00F5CA  C01F  F00B         	movff	main@newJumpers,?_LoadPalette
  1076  00F5CE  ECB6  F078         	call	_LoadPalette	;wreg free
  1077                           
  1078                           ;main.c: 160: oldJumpers = newJumpers;
  1079  00F5D2  C01F  F01C         	movff	main@newJumpers,main@oldJumpers
  1080  00F5D6                     l3053:
  1081                           
  1082                           ;main.c: 161: }
  1083                           ;main.c: 163: inLength = SerialTerm_GetLine(getWriteData);
  1084  00F5D6  C01E  F002         	movff	main@getWriteData,?_SerialTerm_GetLine
  1085  00F5DA  EC59  F078         	call	_SerialTerm_GetLine	;wreg free
  1086  00F5DE  6E22               	movwf	main@inLength,c
  1087                           
  1088                           ;main.c: 165: if (inLength > 0)
  1089  00F5E0  5022               	movf	main@inLength,w,c
  1090  00F5E2  B4D8               	btfsc	status,2,c
  1091  00F5E4  D7E5               	goto	l3043
  1092                           
  1093                           ;main.c: 166: {
  1094                           ;main.c: 167: if (getWriteData != 0)
  1095  00F5E6  501E               	movf	main@getWriteData,w,c
  1096  00F5E8  B4D8               	btfsc	status,2,c
  1097  00F5EA  D066               	goto	l3085
  1098                           
  1099                           ;main.c: 168: {
  1100                           ;main.c: 169: if (strcmp(inputBuffer, "end") == 0)
  1101  00F5EC  0E02               	movlw	high _inputBuffer
  1102  00F5EE  6E02               	movwf	?_strcmp+1,c
  1103  00F5F0  0E00               	movlw	low _inputBuffer
  1104  00F5F2  6E01               	movwf	?_strcmp,c
  1105  00F5F4  0EFF               	movlw	high STR_1
  1106  00F5F6  6E04               	movwf	?_strcmp+3,c
  1107  00F5F8  0EF3               	movlw	low STR_1
  1108  00F5FA  6E03               	movwf	?_strcmp+2,c
  1109  00F5FC  EC6A  F076         	call	_strcmp	;wreg free
  1110  00F600  5002               	movf	?_strcmp+1,w,c
  1111  00F602  1001               	iorwf	?_strcmp,w,c
  1112  00F604  A4D8               	btfss	status,2,c
  1113  00F606  D00B               	goto	l3065
  1114                           
  1115                           ;main.c: 170: {
  1116                           ;main.c: 171: getWriteData = 0;
  1117  00F608  6E19               	movwf	??_main& (0+255),c
  1118  00F60A  0E00               	movlw	0
  1119  00F60C  6E1E               	movwf	main@getWriteData,c
  1120  00F60E  5019               	movf	??_main& (0+255),w,c
  1121                           
  1122                           ;main.c: 172: USB_SendString("ok;");
  1123  00F610  0EFF               	movlw	high STR_2
  1124  00F612  6E03               	movwf	?_USB_SendString+1,c
  1125  00F614  0EEF               	movlw	low STR_2
  1126  00F616  6E02               	movwf	?_USB_SendString,c
  1127  00F618  EC0C  F075         	call	_USB_SendString	;wreg free
  1128                           
  1129                           ;main.c: 173: }
  1130  00F61C  D7C9               	goto	l3043
  1131  00F61E                     l3065:
  1132                           
  1133                           ;main.c: 174: else
  1134                           ;main.c: 175: {
  1135                           ;main.c: 176: unsigned char retCode = ParseIntelHex(inputBuffer);
  1136  00F61E  0E02               	movlw	high _inputBuffer
  1137  00F620  6E08               	movwf	?_ParseIntelHex+1,c
  1138  00F622  0E00               	movlw	low _inputBuffer
  1139  00F624  6E07               	movwf	?_ParseIntelHex,c
  1140  00F626  EC80  F079         	call	_ParseIntelHex	;wreg free
  1141  00F62A  5007               	movf	?_ParseIntelHex,w,c
  1142  00F62C  6E1D               	movwf	main@retCode,c
  1143                           
  1144                           ;main.c: 178: if (retCode == 0)
  1145  00F62E  661D               	tstfsz	main@retCode,c
  1146  00F630  D031               	goto	l3079
  1147                           
  1148                           ;main.c: 179: {
  1149                           ;main.c: 180: for (n = 0; n < IntelHex_ByteCount; n ++)
  1150  00F632  0E00               	movlw	0
  1151  00F634  6E21               	movwf	main@n+1,c
  1152  00F636  0E00               	movlw	0
  1153  00F638  6E20               	movwf	main@n,c
  1154  00F63A  D01C               	goto	l3075
  1155  00F63C                     l3071:
  1156                           
  1157                           ;main.c: 181: {
  1158                           ;main.c: 182: dataBuffer[n + IntelHex_StartAddr] = IntelHex_Data[n];
  1159  00F63C  0100               	movlb	0	; () banked
  1160  00F63E  0E60               	movlw	low _IntelHex_Data
  1161  00F640  2420               	addwf	main@n,w,c
  1162  00F642  6ED9               	movwf	fsr2l,c
  1163  00F644  0100               	movlb	0	; () banked
  1164  00F646  0E00               	movlw	high _IntelHex_Data
  1165  00F648  2021               	addwfc	main@n+1,w,c
  1166  00F64A  6EDA               	movwf	fsr2h,c
  1167  00F64C  C020  F019         	movff	main@n,??_main
  1168  00F650  C021  F01A         	movff	main@n+1,??_main+1
  1169  00F654  5026               	movf	_IntelHex_StartAddr,w,c
  1170  00F656  2619               	addwf	??_main,f,c
  1171  00F658  5027               	movf	_IntelHex_StartAddr+1,w,c
  1172  00F65A  221A               	addwfc	??_main+1,f,c
  1173  00F65C  0101               	movlb	1	; () banked
  1174  00F65E  0E00               	movlw	low _dataBuffer	;volatile
  1175  00F660  2419               	addwf	??_main,w,c
  1176  00F662  6EE1               	movwf	fsr1l,c
  1177  00F664  0101               	movlb	1	; () banked
  1178  00F666  0E01               	movlw	high _dataBuffer	;volatile
  1179  00F668  201A               	addwfc	??_main+1,w,c
  1180  00F66A  6EE2               	movwf	fsr1h,c
  1181  00F66C  CFDF FFE7          	movff	indf2,indf1
  1182                           
  1183                           ; BSR set to: 1
  1184  00F670  4A20               	infsnz	main@n,f,c
  1185  00F672  2A21               	incf	main@n+1,f,c
  1186  00F674                     l3075:
  1187  00F674  502A               	movf	_IntelHex_ByteCount,w,c
  1188  00F676  6E19               	movwf	??_main& (0+255),c
  1189  00F678  6A1A               	clrf	(??_main+1)& (0+255),c
  1190  00F67A  5019               	movf	??_main,w,c
  1191  00F67C  5C20               	subwf	main@n,w,c
  1192  00F67E  501A               	movf	??_main+1,w,c
  1193  00F680  5821               	subwfb	main@n+1,w,c
  1194  00F682  A0D8               	btfss	status,0,c
  1195  00F684  D7DB               	goto	l3071
  1196                           
  1197                           ;main.c: 183: }
  1198                           ;main.c: 184: USB_SendString("ok;");
  1199  00F686  0EFF               	movlw	high STR_2
  1200  00F688  6E03               	movwf	?_USB_SendString+1,c
  1201  00F68A  0EEF               	movlw	low STR_2
  1202  00F68C  6E02               	movwf	?_USB_SendString,c
  1203  00F68E  EC0C  F075         	call	_USB_SendString	;wreg free
  1204                           
  1205                           ;main.c: 185: }
  1206  00F692  D78E               	goto	l3043
  1207  00F694                     l3079:
  1208                           
  1209                           ;main.c: 186: else
  1210                           ;main.c: 187: {
  1211                           ;main.c: 188: USB_SendString("err");
  1212  00F694  0EFF               	movlw	high STR_4
  1213  00F696  6E03               	movwf	?_USB_SendString+1,c
  1214  00F698  0EF7               	movlw	low STR_4
  1215  00F69A  6E02               	movwf	?_USB_SendString,c
  1216  00F69C  EC0C  F075         	call	_USB_SendString	;wreg free
  1217                           
  1218                           ;main.c: 189: USB_SendChar(retCode + '0');
  1219  00F6A0  501D               	movf	main@retCode,w,c
  1220  00F6A2  0F30               	addlw	48
  1221  00F6A4  6E01               	movwf	?_USB_SendChar,c
  1222  00F6A6  EC20  F074         	call	_USB_SendChar	;wreg free
  1223                           
  1224                           ;main.c: 190: USB_SendChar(';');
  1225  00F6AA  6E19               	movwf	??_main& (0+255),c
  1226  00F6AC  0E3B               	movlw	59
  1227  00F6AE  6E01               	movwf	?_USB_SendChar,c
  1228  00F6B0  5019               	movf	??_main& (0+255),w,c
  1229  00F6B2  EC20  F074         	call	_USB_SendChar	;wreg free
  1230  00F6B6  D77C               	goto	l3043
  1231  00F6B8                     l3085:
  1232                           
  1233                           ;main.c: 194: else if (strcmp(inputBuffer, "hello") == 0)
  1234  00F6B8  0E02               	movlw	high _inputBuffer
  1235  00F6BA  6E02               	movwf	?_strcmp+1,c
  1236  00F6BC  0E00               	movlw	low _inputBuffer
  1237  00F6BE  6E01               	movwf	?_strcmp,c
  1238  00F6C0  0EFF               	movlw	high STR_5
  1239  00F6C2  6E04               	movwf	?_strcmp+3,c
  1240  00F6C4  0EE5               	movlw	low STR_5
  1241  00F6C6  6E03               	movwf	?_strcmp+2,c
  1242  00F6C8  EC6A  F076         	call	_strcmp	;wreg free
  1243  00F6CC  5002               	movf	?_strcmp+1,w,c
  1244  00F6CE  1001               	iorwf	?_strcmp,w,c
  1245  00F6D0  A4D8               	btfss	status,2,c
  1246  00F6D2  D007               	goto	l3089
  1247                           
  1248                           ;main.c: 195: {
  1249                           ;main.c: 196: USB_SendString("hi;");
  1250  00F6D4  0EFF               	movlw	high STR_6
  1251  00F6D6  6E03               	movwf	?_USB_SendString+1,c
  1252  00F6D8  0EEB               	movlw	low STR_6
  1253  00F6DA  6E02               	movwf	?_USB_SendString,c
  1254  00F6DC  EC0C  F075         	call	_USB_SendString	;wreg free
  1255                           
  1256                           ;main.c: 197: }
  1257  00F6E0  D767               	goto	l3043
  1258  00F6E2                     l3089:
  1259                           
  1260                           ;main.c: 198: else if (strcmp(inputBuffer, "bootloader_mode") == 0)
  1261  00F6E2  0E02               	movlw	high _inputBuffer
  1262  00F6E4  6E02               	movwf	?_strcmp+1,c
  1263  00F6E6  0E00               	movlw	low _inputBuffer
  1264  00F6E8  6E01               	movwf	?_strcmp,c
  1265  00F6EA  0EFE               	movlw	high STR_7
  1266  00F6EC  6E04               	movwf	?_strcmp+3,c
  1267  00F6EE  0EF0               	movlw	low STR_7
  1268  00F6F0  6E03               	movwf	?_strcmp+2,c
  1269  00F6F2  EC6A  F076         	call	_strcmp	;wreg free
  1270  00F6F6  5002               	movf	?_strcmp+1,w,c
  1271  00F6F8  1001               	iorwf	?_strcmp,w,c
  1272  00F6FA  A4D8               	btfss	status,2,c
  1273  00F6FC  D007               	goto	l3093
  1274                           
  1275                           ;main.c: 199: {
  1276                           ;main.c: 200: USB_SendString("application;");
  1277  00F6FE  0EFF               	movlw	high STR_8
  1278  00F700  6E03               	movwf	?_USB_SendString+1,c
  1279  00F702  0E59               	movlw	low STR_8
  1280  00F704  6E02               	movwf	?_USB_SendString,c
  1281  00F706  EC0C  F075         	call	_USB_SendString	;wreg free
  1282                           
  1283                           ;main.c: 201: }
  1284  00F70A  D752               	goto	l3043
  1285  00F70C                     l3093:
  1286                           
  1287                           ;main.c: 202: else if (strcmp(inputBuffer, "to_bootloader") == 0)
  1288  00F70C  0E02               	movlw	high _inputBuffer
  1289  00F70E  6E02               	movwf	?_strcmp+1,c
  1290  00F710  0E00               	movlw	low _inputBuffer
  1291  00F712  6E01               	movwf	?_strcmp,c
  1292  00F714  0EFF               	movlw	high STR_9
  1293  00F716  6E04               	movwf	?_strcmp+3,c
  1294  00F718  0E4B               	movlw	low STR_9
  1295  00F71A  6E03               	movwf	?_strcmp+2,c
  1296  00F71C  EC6A  F076         	call	_strcmp	;wreg free
  1297  00F720  5002               	movf	?_strcmp+1,w,c
  1298  00F722  1001               	iorwf	?_strcmp,w,c
  1299  00F724  A4D8               	btfss	status,2,c
  1300  00F726  D00A               	goto	l3099
  1301                           
  1302                           ;main.c: 203: {
  1303                           ;main.c: 204: USB_FlushBuffer();
  1304  00F728  EC1B  F074         	call	_USB_FlushBuffer	;wreg free
  1305                           
  1306                           ;main.c: 205: WriteAutoloadProgram(0);
  1307  00F72C  6E19               	movwf	??_main& (0+255),c
  1308  00F72E  0E00               	movlw	0
  1309  00F730  6E06               	movwf	?_WriteAutoloadProgram,c
  1310  00F732  5019               	movf	??_main& (0+255),w,c
  1311  00F734  EC50  F075         	call	_WriteAutoloadProgram	;wreg free
  1312  00F738  00FF               	reset		;# 
  1313                           
  1314                           ;main.c: 207: }
  1315  00F73A  D73A               	goto	l3043
  1316  00F73C                     l3099:
  1317                           
  1318                           ;main.c: 208: else if (strcmp(inputBuffer, "load_spi_buffer") == 0)
  1319  00F73C  0E02               	movlw	high _inputBuffer
  1320  00F73E  6E02               	movwf	?_strcmp+1,c
  1321  00F740  0E00               	movlw	low _inputBuffer
  1322  00F742  6E01               	movwf	?_strcmp,c
  1323  00F744  0EFF               	movlw	high STR_10
  1324  00F746  6E04               	movwf	?_strcmp+3,c
  1325  00F748  0E10               	movlw	low STR_10
  1326  00F74A  6E03               	movwf	?_strcmp+2,c
  1327  00F74C  EC6A  F076         	call	_strcmp	;wreg free
  1328  00F750  5002               	movf	?_strcmp+1,w,c
  1329  00F752  1001               	iorwf	?_strcmp,w,c
  1330  00F754  A4D8               	btfss	status,2,c
  1331  00F756  D00B               	goto	l3105
  1332                           
  1333                           ;main.c: 209: {
  1334                           ;main.c: 210: getWriteData = 1;
  1335  00F758  6E19               	movwf	??_main& (0+255),c
  1336  00F75A  0E01               	movlw	1
  1337  00F75C  6E1E               	movwf	main@getWriteData,c
  1338  00F75E  5019               	movf	??_main& (0+255),w,c
  1339                           
  1340                           ;main.c: 211: USB_SendString("ok;");
  1341  00F760  0EFF               	movlw	high STR_2
  1342  00F762  6E03               	movwf	?_USB_SendString+1,c
  1343  00F764  0EEF               	movlw	low STR_2
  1344  00F766  6E02               	movwf	?_USB_SendString,c
  1345  00F768  EC0C  F075         	call	_USB_SendString	;wreg free
  1346                           
  1347                           ;main.c: 212: }
  1348  00F76C  D721               	goto	l3043
  1349  00F76E                     l3105:
  1350                           
  1351                           ;main.c: 213: else if (strcmp(inputBuffer, "write_spi") == 0)
  1352  00F76E  0E02               	movlw	high _inputBuffer
  1353  00F770  6E02               	movwf	?_strcmp+1,c
  1354  00F772  0E00               	movlw	low _inputBuffer
  1355  00F774  6E01               	movwf	?_strcmp,c
  1356  00F776  0EFF               	movlw	high STR_12
  1357  00F778  6E04               	movwf	?_strcmp+3,c
  1358  00F77A  0EAD               	movlw	low STR_12
  1359  00F77C  6E03               	movwf	?_strcmp+2,c
  1360  00F77E  EC6A  F076         	call	_strcmp	;wreg free
  1361  00F782  5002               	movf	?_strcmp+1,w,c
  1362  00F784  1001               	iorwf	?_strcmp,w,c
  1363  00F786  A4D8               	btfss	status,2,c
  1364  00F788  D062               	goto	l3133
  1365                           
  1366                           ;main.c: 214: {
  1367                           ;main.c: 215: USB_SendString("addr;");
  1368  00F78A  0EFF               	movlw	high STR_13
  1369  00F78C  6E03               	movwf	?_USB_SendString+1,c
  1370  00F78E  0EDF               	movlw	low STR_13
  1371  00F790  6E02               	movwf	?_USB_SendString,c
  1372  00F792  EC0C  F075         	call	_USB_SendString	;wreg free
  1373                           
  1374                           ;main.c: 216: inLength = 0;
  1375  00F796  6E19               	movwf	??_main& (0+255),c
  1376  00F798  0E00               	movlw	0
  1377  00F79A  6E22               	movwf	main@inLength,c
  1378  00F79C  5019               	movf	??_main& (0+255),w,c
  1379                           
  1380                           ;main.c: 217: while (inLength == 0)
  1381  00F79E  D007               	goto	l3113
  1382  00F7A0                     l3111:
  1383                           
  1384                           ;main.c: 218: {
  1385                           ;main.c: 219: inLength = SerialTerm_GetLine(1);
  1386  00F7A0  6E19               	movwf	??_main& (0+255),c
  1387  00F7A2  0E01               	movlw	1
  1388  00F7A4  6E02               	movwf	?_SerialTerm_GetLine,c
  1389  00F7A6  5019               	movf	??_main& (0+255),w,c
  1390  00F7A8  EC59  F078         	call	_SerialTerm_GetLine	;wreg free
  1391  00F7AC  6E22               	movwf	main@inLength,c
  1392  00F7AE                     l3113:
  1393  00F7AE  5022               	movf	main@inLength,w,c
  1394  00F7B0  B4D8               	btfsc	status,2,c
  1395  00F7B2  D7F6               	goto	l3111
  1396                           
  1397                           ;main.c: 220: }
  1398                           ;main.c: 221: spiAddr = 0x000000;
  1399  00F7B4  0E00               	movlw	0
  1400  00F7B6  6E23               	movwf	main@spiAddr,c
  1401  00F7B8  0E00               	movlw	0
  1402  00F7BA  6E24               	movwf	main@spiAddr+1,c
  1403  00F7BC  0E00               	movlw	0
  1404  00F7BE  6E25               	movwf	main@spiAddr+2,c
  1405                           
  1406                           ;main.c: 222: spiAddr |= HexToByte(inputBuffer[0], inputBuffer[1]);
  1407  00F7C0  C200  F001         	movff	_inputBuffer,?_HexToByte
  1408  00F7C4  C201  F002         	movff	_inputBuffer+1,?_HexToByte+1
  1409  00F7C8  EC39  F075         	call	_HexToByte	;wreg free
  1410  00F7CC  6E19               	movwf	??_main& (0+255),c
  1411  00F7CE  6A1A               	clrf	(??_main+1)& (0+255),c
  1412  00F7D0  6A1B               	clrf	(??_main+2)& (0+255),c
  1413  00F7D2  5019               	movf	??_main,w,c
  1414  00F7D4  1223               	iorwf	main@spiAddr,f,c
  1415  00F7D6  501A               	movf	??_main+1,w,c
  1416  00F7D8  1224               	iorwf	main@spiAddr+1,f,c
  1417  00F7DA  501B               	movf	??_main+2,w,c
  1418  00F7DC  1225               	iorwf	main@spiAddr+2,f,c
  1419                           
  1420                           ;main.c: 223: spiAddr = spiAddr << 8;
  1421  00F7DE  C023  F01A         	movff	main@spiAddr,??_main+1
  1422  00F7E2  C024  F01B         	movff	main@spiAddr+1,??_main+2
  1423  00F7E6  6A19               	clrf	??_main& (0+255),c
  1424  00F7E8  C01B  F025         	movff	??_main+2,main@spiAddr+2
  1425  00F7EC  C01A  F024         	movff	??_main+1,main@spiAddr+1
  1426  00F7F0  C019  F023         	movff	??_main,main@spiAddr
  1427                           
  1428                           ;main.c: 224: spiAddr |= HexToByte(inputBuffer[2], inputBuffer[3]);
  1429  00F7F4  C202  F001         	movff	_inputBuffer+2,?_HexToByte
  1430  00F7F8  C203  F002         	movff	_inputBuffer+3,?_HexToByte+1
  1431  00F7FC  EC39  F075         	call	_HexToByte	;wreg free
  1432  00F800  6E19               	movwf	??_main& (0+255),c
  1433  00F802  6A1A               	clrf	(??_main+1)& (0+255),c
  1434  00F804  6A1B               	clrf	(??_main+2)& (0+255),c
  1435  00F806  5019               	movf	??_main,w,c
  1436  00F808  1223               	iorwf	main@spiAddr,f,c
  1437  00F80A  501A               	movf	??_main+1,w,c
  1438  00F80C  1224               	iorwf	main@spiAddr+1,f,c
  1439  00F80E  501B               	movf	??_main+2,w,c
  1440  00F810  1225               	iorwf	main@spiAddr+2,f,c
  1441                           
  1442                           ;main.c: 225: spiAddr = spiAddr << 8;
  1443  00F812  C023  F01A         	movff	main@spiAddr,??_main+1
  1444  00F816  C024  F01B         	movff	main@spiAddr+1,??_main+2
  1445  00F81A  6A19               	clrf	??_main& (0+255),c
  1446  00F81C  C01B  F025         	movff	??_main+2,main@spiAddr+2
  1447  00F820  C01A  F024         	movff	??_main+1,main@spiAddr+1
  1448  00F824  C019  F023         	movff	??_main,main@spiAddr
  1449                           
  1450                           ;main.c: 226: SPIMemory_WriteEnable();
  1451  00F828  ECAA  F074         	call	_SPIMemory_WriteEnable	;wreg free
  1452                           
  1453                           ;main.c: 227: SPIMemory_PageProgram(spiAddr);
  1454  00F82C  C023  F003         	movff	main@spiAddr,?_SPIMemory_PageProgram
  1455  00F830  C024  F004         	movff	main@spiAddr+1,?_SPIMemory_PageProgram+1
  1456  00F834  C025  F005         	movff	main@spiAddr+2,?_SPIMemory_PageProgram+2
  1457  00F838  EC3A  F077         	call	_SPIMemory_PageProgram	;wreg free
  1458                           
  1459                           ;main.c: 228: SPIMemory_WaitWIP();
  1460  00F83C  EC27  F074         	call	_SPIMemory_WaitWIP	;wreg free
  1461                           
  1462                           ;main.c: 229: USB_SendString("ok;");
  1463  00F840  0EFF               	movlw	high STR_2
  1464  00F842  6E03               	movwf	?_USB_SendString+1,c
  1465  00F844  0EEF               	movlw	low STR_2
  1466  00F846  6E02               	movwf	?_USB_SendString,c
  1467  00F848  EC0C  F075         	call	_USB_SendString	;wreg free
  1468                           
  1469                           ;main.c: 230: }
  1470  00F84C  D6B1               	goto	l3043
  1471  00F84E                     l3133:
  1472                           
  1473                           ;main.c: 231: else if (strcmp(inputBuffer, "read_spi") == 0)
  1474  00F84E  0E02               	movlw	high _inputBuffer
  1475  00F850  6E02               	movwf	?_strcmp+1,c
  1476  00F852  0E00               	movlw	low _inputBuffer
  1477  00F854  6E01               	movwf	?_strcmp,c
  1478  00F856  0EFF               	movlw	high STR_15
  1479  00F858  6E04               	movwf	?_strcmp+3,c
  1480  00F85A  0EC0               	movlw	low STR_15
  1481  00F85C  6E03               	movwf	?_strcmp+2,c
  1482  00F85E  EC6A  F076         	call	_strcmp	;wreg free
  1483  00F862  5002               	movf	?_strcmp+1,w,c
  1484  00F864  1001               	iorwf	?_strcmp,w,c
  1485  00F866  A4D8               	btfss	status,2,c
  1486  00F868  D077               	goto	l3169
  1487                           
  1488                           ;main.c: 232: {
  1489                           ;main.c: 233: USB_SendString("addr;");
  1490  00F86A  0EFF               	movlw	high STR_13
  1491  00F86C  6E03               	movwf	?_USB_SendString+1,c
  1492  00F86E  0EDF               	movlw	low STR_13
  1493  00F870  6E02               	movwf	?_USB_SendString,c
  1494  00F872  EC0C  F075         	call	_USB_SendString	;wreg free
  1495                           
  1496                           ;main.c: 234: inLength = 0;
  1497  00F876  6E19               	movwf	??_main& (0+255),c
  1498  00F878  0E00               	movlw	0
  1499  00F87A  6E22               	movwf	main@inLength,c
  1500  00F87C  5019               	movf	??_main& (0+255),w,c
  1501                           
  1502                           ;main.c: 235: while (inLength == 0)
  1503  00F87E  D007               	goto	l3141
  1504  00F880                     l3139:
  1505                           
  1506                           ;main.c: 236: {
  1507                           ;main.c: 237: inLength = SerialTerm_GetLine(1);
  1508  00F880  6E19               	movwf	??_main& (0+255),c
  1509  00F882  0E01               	movlw	1
  1510  00F884  6E02               	movwf	?_SerialTerm_GetLine,c
  1511  00F886  5019               	movf	??_main& (0+255),w,c
  1512  00F888  EC59  F078         	call	_SerialTerm_GetLine	;wreg free
  1513  00F88C  6E22               	movwf	main@inLength,c
  1514  00F88E                     l3141:
  1515  00F88E  5022               	movf	main@inLength,w,c
  1516  00F890  B4D8               	btfsc	status,2,c
  1517  00F892  D7F6               	goto	l3139
  1518                           
  1519                           ;main.c: 238: }
  1520                           ;main.c: 239: spiAddr = 0x000000;
  1521  00F894  0E00               	movlw	0
  1522  00F896  6E23               	movwf	main@spiAddr,c
  1523  00F898  0E00               	movlw	0
  1524  00F89A  6E24               	movwf	main@spiAddr+1,c
  1525  00F89C  0E00               	movlw	0
  1526  00F89E  6E25               	movwf	main@spiAddr+2,c
  1527                           
  1528                           ;main.c: 240: spiAddr |= HexToByte(inputBuffer[0], inputBuffer[1]);
  1529  00F8A0  C200  F001         	movff	_inputBuffer,?_HexToByte
  1530  00F8A4  C201  F002         	movff	_inputBuffer+1,?_HexToByte+1
  1531  00F8A8  EC39  F075         	call	_HexToByte	;wreg free
  1532  00F8AC  6E19               	movwf	??_main& (0+255),c
  1533  00F8AE  6A1A               	clrf	(??_main+1)& (0+255),c
  1534  00F8B0  6A1B               	clrf	(??_main+2)& (0+255),c
  1535  00F8B2  5019               	movf	??_main,w,c
  1536  00F8B4  1223               	iorwf	main@spiAddr,f,c
  1537  00F8B6  501A               	movf	??_main+1,w,c
  1538  00F8B8  1224               	iorwf	main@spiAddr+1,f,c
  1539  00F8BA  501B               	movf	??_main+2,w,c
  1540  00F8BC  1225               	iorwf	main@spiAddr+2,f,c
  1541                           
  1542                           ;main.c: 241: spiAddr = spiAddr << 8;
  1543  00F8BE  C023  F01A         	movff	main@spiAddr,??_main+1
  1544  00F8C2  C024  F01B         	movff	main@spiAddr+1,??_main+2
  1545  00F8C6  6A19               	clrf	??_main& (0+255),c
  1546  00F8C8  C01B  F025         	movff	??_main+2,main@spiAddr+2
  1547  00F8CC  C01A  F024         	movff	??_main+1,main@spiAddr+1
  1548  00F8D0  C019  F023         	movff	??_main,main@spiAddr
  1549                           
  1550                           ;main.c: 242: spiAddr |= HexToByte(inputBuffer[2], inputBuffer[3]);
  1551  00F8D4  C202  F001         	movff	_inputBuffer+2,?_HexToByte
  1552  00F8D8  C203  F002         	movff	_inputBuffer+3,?_HexToByte+1
  1553  00F8DC  EC39  F075         	call	_HexToByte	;wreg free
  1554  00F8E0  6E19               	movwf	??_main& (0+255),c
  1555  00F8E2  6A1A               	clrf	(??_main+1)& (0+255),c
  1556  00F8E4  6A1B               	clrf	(??_main+2)& (0+255),c
  1557  00F8E6  5019               	movf	??_main,w,c
  1558  00F8E8  1223               	iorwf	main@spiAddr,f,c
  1559  00F8EA  501A               	movf	??_main+1,w,c
  1560  00F8EC  1224               	iorwf	main@spiAddr+1,f,c
  1561  00F8EE  501B               	movf	??_main+2,w,c
  1562  00F8F0  1225               	iorwf	main@spiAddr+2,f,c
  1563                           
  1564                           ;main.c: 243: spiAddr = spiAddr << 8;
  1565  00F8F2  C023  F01A         	movff	main@spiAddr,??_main+1
  1566  00F8F6  C024  F01B         	movff	main@spiAddr+1,??_main+2
  1567  00F8FA  6A19               	clrf	??_main& (0+255),c
  1568  00F8FC  C01B  F025         	movff	??_main+2,main@spiAddr+2
  1569  00F900  C01A  F024         	movff	??_main+1,main@spiAddr+1
  1570  00F904  C019  F023         	movff	??_main,main@spiAddr
  1571                           
  1572                           ;main.c: 244: SPIMemory_ReadData(spiAddr);
  1573  00F908  C023  F003         	movff	main@spiAddr,?_SPIMemory_ReadData
  1574  00F90C  C024  F004         	movff	main@spiAddr+1,?_SPIMemory_ReadData+1
  1575  00F910  C025  F005         	movff	main@spiAddr+2,?_SPIMemory_ReadData+2
  1576  00F914  EC78  F077         	call	_SPIMemory_ReadData	;wreg free
  1577                           
  1578                           ;main.c: 245: for (n = 0; n < 256; n++)
  1579  00F918  0E00               	movlw	0
  1580  00F91A  6E21               	movwf	main@n+1,c
  1581  00F91C  0E00               	movlw	0
  1582  00F91E  6E20               	movwf	main@n,c
  1583  00F920  0E00               	movlw	0
  1584  00F922  5C20               	subwf	main@n,w,c
  1585  00F924  0E01               	movlw	1
  1586  00F926  5821               	subwfb	main@n+1,w,c
  1587  00F928  B0D8               	btfsc	status,0,c
  1588  00F92A  D00F               	goto	l3167
  1589                           
  1590                           ;main.c: 246: {
  1591                           ;main.c: 247: USB_SendHex(dataBuffer[n]);
  1592  00F92C  0101               	movlb	1	; () banked
  1593  00F92E  0E00               	movlw	low _dataBuffer	;volatile
  1594  00F930  2420               	addwf	main@n,w,c
  1595  00F932  6ED9               	movwf	fsr2l,c
  1596  00F934  0101               	movlb	1	; () banked
  1597  00F936  0E01               	movlw	high _dataBuffer	;volatile
  1598  00F938  2021               	addwfc	main@n+1,w,c
  1599  00F93A  6EDA               	movwf	fsr2h,c
  1600  00F93C  50DF               	movf	indf2,w,c
  1601  00F93E  6E07               	movwf	?_USB_SendHex,c
  1602  00F940  EC0E  F076         	call	_USB_SendHex	;wreg free
  1603  00F944  4A20               	infsnz	main@n,f,c
  1604  00F946  2A21               	incf	main@n+1,f,c
  1605  00F948  D7EB               	goto	L1
  1606  00F94A                     l3167:
  1607                           
  1608                           ;main.c: 248: }
  1609                           ;main.c: 249: USB_SendString("ok;");
  1610  00F94A  0EFF               	movlw	high STR_2
  1611  00F94C  6E03               	movwf	?_USB_SendString+1,c
  1612  00F94E  0EEF               	movlw	low STR_2
  1613  00F950  6E02               	movwf	?_USB_SendString,c
  1614  00F952  EC0C  F075         	call	_USB_SendString	;wreg free
  1615                           
  1616                           ;main.c: 250: }
  1617  00F956  D62C               	goto	l3043
  1618  00F958                     l3169:
  1619                           
  1620                           ;main.c: 251: else if (strcmp(inputBuffer, "erase_spi") == 0)
  1621  00F958  0E02               	movlw	high _inputBuffer
  1622  00F95A  6E02               	movwf	?_strcmp+1,c
  1623  00F95C  0E00               	movlw	low _inputBuffer
  1624  00F95E  6E01               	movwf	?_strcmp,c
  1625  00F960  0EFF               	movlw	high STR_18
  1626  00F962  6E04               	movwf	?_strcmp+3,c
  1627  00F964  0EA3               	movlw	low STR_18
  1628  00F966  6E03               	movwf	?_strcmp+2,c
  1629  00F968  EC6A  F076         	call	_strcmp	;wreg free
  1630  00F96C  5002               	movf	?_strcmp+1,w,c
  1631  00F96E  1001               	iorwf	?_strcmp,w,c
  1632  00F970  A4D8               	btfss	status,2,c
  1633  00F972  D00D               	goto	l3175
  1634                           
  1635                           ;main.c: 252: {
  1636                           ;main.c: 253: SPIMemory_WriteEnable();
  1637  00F974  ECAA  F074         	call	_SPIMemory_WriteEnable	;wreg free
  1638                           
  1639                           ;main.c: 254: SPIMemory_BulkErase();
  1640  00F978  ECB9  F074         	call	_SPIMemory_BulkErase	;wreg free
  1641                           
  1642                           ;main.c: 255: SPIMemory_WaitWIP();
  1643  00F97C  EC27  F074         	call	_SPIMemory_WaitWIP	;wreg free
  1644                           
  1645                           ;main.c: 256: USB_SendString("ok;");
  1646  00F980  0EFF               	movlw	high STR_2
  1647  00F982  6E03               	movwf	?_USB_SendString+1,c
  1648  00F984  0EEF               	movlw	low STR_2
  1649  00F986  6E02               	movwf	?_USB_SendString,c
  1650  00F988  EC0C  F075         	call	_USB_SendString	;wreg free
  1651                           
  1652                           ;main.c: 257: }
  1653  00F98C  D611               	goto	l3043
  1654  00F98E                     l3175:
  1655                           
  1656                           ;main.c: 258: else if (strcmp(inputBuffer, "init_fpga") == 0)
  1657  00F98E  0E02               	movlw	high _inputBuffer
  1658  00F990  6E02               	movwf	?_strcmp+1,c
  1659  00F992  0E00               	movlw	low _inputBuffer
  1660  00F994  6E01               	movwf	?_strcmp,c
  1661  00F996  0EFF               	movlw	high STR_20
  1662  00F998  6E04               	movwf	?_strcmp+3,c
  1663  00F99A  0E99               	movlw	low STR_20
  1664  00F99C  6E03               	movwf	?_strcmp+2,c
  1665  00F99E  EC6A  F076         	call	_strcmp	;wreg free
  1666  00F9A2  5002               	movf	?_strcmp+1,w,c
  1667  00F9A4  1001               	iorwf	?_strcmp,w,c
  1668  00F9A6  A4D8               	btfss	status,2,c
  1669  00F9A8  D011               	goto	l3181
  1670                           
  1671                           ;main.c: 259: {
  1672                           ;main.c: 260: LoadFPGA(GetFpgaImageSize());
  1673  00F9AA  ECB8  F077         	call	_GetFpgaImageSize	;wreg free
  1674  00F9AE  C005  F00E         	movff	?_GetFpgaImageSize+2,?_LoadFPGA+2
  1675  00F9B2  C004  F00D         	movff	?_GetFpgaImageSize+1,?_LoadFPGA+1
  1676  00F9B6  C003  F00C         	movff	?_GetFpgaImageSize,?_LoadFPGA
  1677  00F9BA  EC00  F078         	call	_LoadFPGA	;wreg free
  1678                           
  1679                           ;main.c: 261: USB_SendString("ok;");
  1680  00F9BE  0EFF               	movlw	high STR_2
  1681  00F9C0  6E03               	movwf	?_USB_SendString+1,c
  1682  00F9C2  0EEF               	movlw	low STR_2
  1683  00F9C4  6E02               	movwf	?_USB_SendString,c
  1684  00F9C6  EC0C  F075         	call	_USB_SendString	;wreg free
  1685                           
  1686                           ;main.c: 262: }
  1687  00F9CA  D5F2               	goto	l3043
  1688  00F9CC                     l3181:
  1689                           
  1690                           ;main.c: 263: else if (strcmp(inputBuffer, "set_autoload_fpga") == 0)
  1691  00F9CC  0E02               	movlw	high _inputBuffer
  1692  00F9CE  6E02               	movwf	?_strcmp+1,c
  1693  00F9D0  0E00               	movlw	low _inputBuffer
  1694  00F9D2  6E01               	movwf	?_strcmp,c
  1695  00F9D4  0EFE               	movlw	high (STR_24+2)
  1696  00F9D6  6E04               	movwf	?_strcmp+3,c
  1697  00F9D8  0EDE               	movlw	low (STR_24+2)
  1698  00F9DA  6E03               	movwf	?_strcmp+2,c
  1699  00F9DC  EC6A  F076         	call	_strcmp	;wreg free
  1700  00F9E0  5002               	movf	?_strcmp+1,w,c
  1701  00F9E2  1001               	iorwf	?_strcmp,w,c
  1702  00F9E4  A4D8               	btfss	status,2,c
  1703  00F9E6  D00D               	goto	l3187
  1704                           
  1705                           ;main.c: 264: {
  1706                           ;main.c: 265: WriteAutoloadFPGA(1);
  1707  00F9E8  6E19               	movwf	??_main& (0+255),c
  1708  00F9EA  0E01               	movlw	1
  1709  00F9EC  6E06               	movwf	?_WriteAutoloadFPGA,c
  1710  00F9EE  5019               	movf	??_main& (0+255),w,c
  1711  00F9F0  EC6A  F075         	call	_WriteAutoloadFPGA	;wreg free
  1712                           
  1713                           ;main.c: 266: USB_SendString("ok;");
  1714  00F9F4  0EFF               	movlw	high STR_2
  1715  00F9F6  6E03               	movwf	?_USB_SendString+1,c
  1716  00F9F8  0EEF               	movlw	low STR_2
  1717  00F9FA  6E02               	movwf	?_USB_SendString,c
  1718  00F9FC  EC0C  F075         	call	_USB_SendString	;wreg free
  1719                           
  1720                           ;main.c: 267: }
  1721  00FA00  D5D7               	goto	l3043
  1722  00FA02                     l3187:
  1723                           
  1724                           ;main.c: 268: else if (strcmp(inputBuffer, "unset_autoload_fpga") == 0)
  1725  00FA02  0E02               	movlw	high _inputBuffer
  1726  00FA04  6E02               	movwf	?_strcmp+1,c
  1727  00FA06  0E00               	movlw	low _inputBuffer
  1728  00FA08  6E01               	movwf	?_strcmp,c
  1729  00FA0A  0EFE               	movlw	high STR_24
  1730  00FA0C  6E04               	movwf	?_strcmp+3,c
  1731  00FA0E  0EDC               	movlw	low STR_24
  1732  00FA10  6E03               	movwf	?_strcmp+2,c
  1733  00FA12  EC6A  F076         	call	_strcmp	;wreg free
  1734  00FA16  5002               	movf	?_strcmp+1,w,c
  1735  00FA18  1001               	iorwf	?_strcmp,w,c
  1736  00FA1A  A4D8               	btfss	status,2,c
  1737  00FA1C  D00D               	goto	l3193
  1738                           
  1739                           ;main.c: 269: {
  1740                           ;main.c: 270: WriteAutoloadFPGA(0);
  1741  00FA1E  6E19               	movwf	??_main& (0+255),c
  1742  00FA20  0E00               	movlw	0
  1743  00FA22  6E06               	movwf	?_WriteAutoloadFPGA,c
  1744  00FA24  5019               	movf	??_main& (0+255),w,c
  1745  00FA26  EC6A  F075         	call	_WriteAutoloadFPGA	;wreg free
  1746                           
  1747                           ;main.c: 271: USB_SendString("ok;");
  1748  00FA2A  0EFF               	movlw	high STR_2
  1749  00FA2C  6E03               	movwf	?_USB_SendString+1,c
  1750  00FA2E  0EEF               	movlw	low STR_2
  1751  00FA30  6E02               	movwf	?_USB_SendString,c
  1752  00FA32  EC0C  F075         	call	_USB_SendString	;wreg free
  1753                           
  1754                           ;main.c: 272: }
  1755  00FA36  D5BC               	goto	l3043
  1756  00FA38                     l3193:
  1757                           
  1758                           ;main.c: 273: else if (strcmp(inputBuffer, "set_auto_change_palette") == 0)
  1759  00FA38  0E02               	movlw	high _inputBuffer
  1760  00FA3A  6E02               	movwf	?_strcmp+1,c
  1761  00FA3C  0E00               	movlw	low _inputBuffer
  1762  00FA3E  6E01               	movwf	?_strcmp,c
  1763  00FA40  0EFE               	movlw	high (STR_28+2)
  1764  00FA42  6E04               	movwf	?_strcmp+3,c
  1765  00FA44  0EC4               	movlw	low (STR_28+2)
  1766  00FA46  6E03               	movwf	?_strcmp+2,c
  1767  00FA48  EC6A  F076         	call	_strcmp	;wreg free
  1768  00FA4C  5002               	movf	?_strcmp+1,w,c
  1769  00FA4E  1001               	iorwf	?_strcmp,w,c
  1770  00FA50  A4D8               	btfss	status,2,c
  1771  00FA52  D011               	goto	l3201
  1772                           
  1773                           ;main.c: 274: {
  1774                           ;main.c: 275: WriteAutoChangePalette(1);
  1775  00FA54  6E19               	movwf	??_main& (0+255),c
  1776  00FA56  0E01               	movlw	1
  1777  00FA58  6E06               	movwf	?_WriteAutoChangePalette,c
  1778  00FA5A  5019               	movf	??_main& (0+255),w,c
  1779  00FA5C  EC84  F075         	call	_WriteAutoChangePalette	;wreg free
  1780                           
  1781                           ;main.c: 276: LoadPalette(newJumpers);
  1782  00FA60  C01F  F00B         	movff	main@newJumpers,?_LoadPalette
  1783  00FA64  ECB6  F078         	call	_LoadPalette	;wreg free
  1784                           
  1785                           ;main.c: 277: USB_SendString("ok;");
  1786  00FA68  0EFF               	movlw	high STR_2
  1787  00FA6A  6E03               	movwf	?_USB_SendString+1,c
  1788  00FA6C  0EEF               	movlw	low STR_2
  1789  00FA6E  6E02               	movwf	?_USB_SendString,c
  1790  00FA70  EC0C  F075         	call	_USB_SendString	;wreg free
  1791                           
  1792                           ;main.c: 278: }
  1793  00FA74  D59D               	goto	l3043
  1794  00FA76                     l3201:
  1795                           
  1796                           ;main.c: 279: else if (strcmp(inputBuffer, "unset_auto_change_palette") == 0)
  1797  00FA76  0E02               	movlw	high _inputBuffer
  1798  00FA78  6E02               	movwf	?_strcmp+1,c
  1799  00FA7A  0E00               	movlw	low _inputBuffer
  1800  00FA7C  6E01               	movwf	?_strcmp,c
  1801  00FA7E  0EFE               	movlw	high STR_28
  1802  00FA80  6E04               	movwf	?_strcmp+3,c
  1803  00FA82  0EC2               	movlw	low STR_28
  1804  00FA84  6E03               	movwf	?_strcmp+2,c
  1805  00FA86  EC6A  F076         	call	_strcmp	;wreg free
  1806  00FA8A  5002               	movf	?_strcmp+1,w,c
  1807  00FA8C  1001               	iorwf	?_strcmp,w,c
  1808  00FA8E  A4D8               	btfss	status,2,c
  1809  00FA90  D00D               	goto	l3207
  1810                           
  1811                           ;main.c: 280: {
  1812                           ;main.c: 281: WriteAutoChangePalette(0);
  1813  00FA92  6E19               	movwf	??_main& (0+255),c
  1814  00FA94  0E00               	movlw	0
  1815  00FA96  6E06               	movwf	?_WriteAutoChangePalette,c
  1816  00FA98  5019               	movf	??_main& (0+255),w,c
  1817  00FA9A  EC84  F075         	call	_WriteAutoChangePalette	;wreg free
  1818                           
  1819                           ;main.c: 282: USB_SendString("ok;");
  1820  00FA9E  0EFF               	movlw	high STR_2
  1821  00FAA0  6E03               	movwf	?_USB_SendString+1,c
  1822  00FAA2  0EEF               	movlw	low STR_2
  1823  00FAA4  6E02               	movwf	?_USB_SendString,c
  1824  00FAA6  EC0C  F075         	call	_USB_SendString	;wreg free
  1825                           
  1826                           ;main.c: 283: }
  1827  00FAAA  D582               	goto	l3043
  1828  00FAAC                     l3207:
  1829                           
  1830                           ;main.c: 284: else if (strcmp(inputBuffer, "get_spi_devid") == 0)
  1831  00FAAC  0E02               	movlw	high _inputBuffer
  1832  00FAAE  6E02               	movwf	?_strcmp+1,c
  1833  00FAB0  0E00               	movlw	low _inputBuffer
  1834  00FAB2  6E01               	movwf	?_strcmp,c
  1835  00FAB4  0EFF               	movlw	high STR_30
  1836  00FAB6  6E04               	movwf	?_strcmp+3,c
  1837  00FAB8  0E2F               	movlw	low STR_30
  1838  00FABA  6E03               	movwf	?_strcmp+2,c
  1839  00FABC  EC6A  F076         	call	_strcmp	;wreg free
  1840  00FAC0  5002               	movf	?_strcmp+1,w,c
  1841  00FAC2  1001               	iorwf	?_strcmp,w,c
  1842  00FAC4  A4D8               	btfss	status,2,c
  1843  00FAC6  D00C               	goto	l3213
  1844                           
  1845                           ;main.c: 285: {
  1846                           ;main.c: 286: USB_SendHex(SPIMemory_ReadId());
  1847  00FAC8  ECB9  F075         	call	_SPIMemory_ReadId	;wreg free
  1848  00FACC  6E07               	movwf	?_USB_SendHex,c
  1849  00FACE  EC0E  F076         	call	_USB_SendHex	;wreg free
  1850                           
  1851                           ;main.c: 287: USB_SendChar(';');
  1852  00FAD2  6E19               	movwf	??_main& (0+255),c
  1853  00FAD4  0E3B               	movlw	59
  1854  00FAD6  6E01               	movwf	?_USB_SendChar,c
  1855  00FAD8  5019               	movf	??_main& (0+255),w,c
  1856  00FADA  EC20  F074         	call	_USB_SendChar	;wreg free
  1857                           
  1858                           ;main.c: 288: }
  1859  00FADE  D568               	goto	l3043
  1860  00FAE0                     l3213:
  1861                           
  1862                           ;main.c: 289: else if (strcmp(inputBuffer, "get_spi_status") == 0)
  1863  00FAE0  0E02               	movlw	high _inputBuffer
  1864  00FAE2  6E02               	movwf	?_strcmp+1,c
  1865  00FAE4  0E00               	movlw	low _inputBuffer
  1866  00FAE6  6E01               	movwf	?_strcmp,c
  1867  00FAE8  0EFF               	movlw	high STR_31
  1868  00FAEA  6E04               	movwf	?_strcmp+3,c
  1869  00FAEC  0E20               	movlw	low STR_31
  1870  00FAEE  6E03               	movwf	?_strcmp+2,c
  1871  00FAF0  EC6A  F076         	call	_strcmp	;wreg free
  1872  00FAF4  5002               	movf	?_strcmp+1,w,c
  1873  00FAF6  1001               	iorwf	?_strcmp,w,c
  1874  00FAF8  A4D8               	btfss	status,2,c
  1875  00FAFA  D00C               	goto	l3219
  1876                           
  1877                           ;main.c: 290: {
  1878                           ;main.c: 291: USB_SendHex(SPIMemory_ReadStatus());
  1879  00FAFC  EC9E  F075         	call	_SPIMemory_ReadStatus	;wreg free
  1880  00FB00  6E07               	movwf	?_USB_SendHex,c
  1881  00FB02  EC0E  F076         	call	_USB_SendHex	;wreg free
  1882                           
  1883                           ;main.c: 292: USB_SendChar(';');
  1884  00FB06  6E19               	movwf	??_main& (0+255),c
  1885  00FB08  0E3B               	movlw	59
  1886  00FB0A  6E01               	movwf	?_USB_SendChar,c
  1887  00FB0C  5019               	movf	??_main& (0+255),w,c
  1888  00FB0E  EC20  F074         	call	_USB_SendChar	;wreg free
  1889                           
  1890                           ;main.c: 293: }
  1891  00FB12  D54E               	goto	l3043
  1892  00FB14                     l3219:
  1893                           
  1894                           ;main.c: 294: else if (strcmp(inputBuffer, "spi_wren") == 0)
  1895  00FB14  0E02               	movlw	high _inputBuffer
  1896  00FB16  6E02               	movwf	?_strcmp+1,c
  1897  00FB18  0E00               	movlw	low _inputBuffer
  1898  00FB1A  6E01               	movwf	?_strcmp,c
  1899  00FB1C  0EFF               	movlw	high STR_32
  1900  00FB1E  6E04               	movwf	?_strcmp+3,c
  1901  00FB20  0EC9               	movlw	low STR_32
  1902  00FB22  6E03               	movwf	?_strcmp+2,c
  1903  00FB24  EC6A  F076         	call	_strcmp	;wreg free
  1904  00FB28  5002               	movf	?_strcmp+1,w,c
  1905  00FB2A  1001               	iorwf	?_strcmp,w,c
  1906  00FB2C  A4D8               	btfss	status,2,c
  1907  00FB2E  D009               	goto	l3225
  1908                           
  1909                           ;main.c: 295: {
  1910                           ;main.c: 296: SPIMemory_WriteEnable();
  1911  00FB30  ECAA  F074         	call	_SPIMemory_WriteEnable	;wreg free
  1912                           
  1913                           ;main.c: 297: USB_SendString("ok;");
  1914  00FB34  0EFF               	movlw	high STR_2
  1915  00FB36  6E03               	movwf	?_USB_SendString+1,c
  1916  00FB38  0EEF               	movlw	low STR_2
  1917  00FB3A  6E02               	movwf	?_USB_SendString,c
  1918  00FB3C  EC0C  F075         	call	_USB_SendString	;wreg free
  1919                           
  1920                           ;main.c: 298: }
  1921  00FB40  D537               	goto	l3043
  1922  00FB42                     l3225:
  1923                           
  1924                           ;main.c: 299: else if (strcmp(inputBuffer, "spi_wrdi") == 0)
  1925  00FB42  0E02               	movlw	high _inputBuffer
  1926  00FB44  6E02               	movwf	?_strcmp+1,c
  1927  00FB46  0E00               	movlw	low _inputBuffer
  1928  00FB48  6E01               	movwf	?_strcmp,c
  1929  00FB4A  0EFF               	movlw	high STR_34
  1930  00FB4C  6E04               	movwf	?_strcmp+3,c
  1931  00FB4E  0EB7               	movlw	low STR_34
  1932  00FB50  6E03               	movwf	?_strcmp+2,c
  1933  00FB52  EC6A  F076         	call	_strcmp	;wreg free
  1934  00FB56  5002               	movf	?_strcmp+1,w,c
  1935  00FB58  1001               	iorwf	?_strcmp,w,c
  1936  00FB5A  A4D8               	btfss	status,2,c
  1937  00FB5C  D009               	goto	l3231
  1938                           
  1939                           ;main.c: 300: {
  1940                           ;main.c: 301: SPIMemory_WriteDisable();
  1941  00FB5E  ECC8  F074         	call	_SPIMemory_WriteDisable	;wreg free
  1942                           
  1943                           ;main.c: 302: USB_SendString("ok;");
  1944  00FB62  0EFF               	movlw	high STR_2
  1945  00FB64  6E03               	movwf	?_USB_SendString+1,c
  1946  00FB66  0EEF               	movlw	low STR_2
  1947  00FB68  6E02               	movwf	?_USB_SendString,c
  1948  00FB6A  EC0C  F075         	call	_USB_SendString	;wreg free
  1949                           
  1950                           ;main.c: 303: }
  1951  00FB6E  D520               	goto	l3043
  1952  00FB70                     l3231:
  1953                           
  1954                           ;main.c: 304: else if (strcmp(inputBuffer, "sector_erase") == 0)
  1955  00FB70  0E02               	movlw	high _inputBuffer
  1956  00FB72  6E02               	movwf	?_strcmp+1,c
  1957  00FB74  0E00               	movlw	low _inputBuffer
  1958  00FB76  6E01               	movwf	?_strcmp,c
  1959  00FB78  0EFF               	movlw	high STR_36
  1960  00FB7A  6E04               	movwf	?_strcmp+3,c
  1961  00FB7C  0E66               	movlw	low STR_36
  1962  00FB7E  6E03               	movwf	?_strcmp+2,c
  1963  00FB80  EC6A  F076         	call	_strcmp	;wreg free
  1964  00FB84  5002               	movf	?_strcmp+1,w,c
  1965  00FB86  1001               	iorwf	?_strcmp,w,c
  1966  00FB88  A4D8               	btfss	status,2,c
  1967  00FB8A  D071               	goto	l3261
  1968                           
  1969                           ;main.c: 305: {
  1970                           ;main.c: 306: USB_SendString("addr;");
  1971  00FB8C  0EFF               	movlw	high STR_13
  1972  00FB8E  6E03               	movwf	?_USB_SendString+1,c
  1973  00FB90  0EDF               	movlw	low STR_13
  1974  00FB92  6E02               	movwf	?_USB_SendString,c
  1975  00FB94  EC0C  F075         	call	_USB_SendString	;wreg free
  1976                           
  1977                           ;main.c: 307: inLength = 0;
  1978  00FB98  6E19               	movwf	??_main& (0+255),c
  1979  00FB9A  0E00               	movlw	0
  1980  00FB9C  6E22               	movwf	main@inLength,c
  1981  00FB9E  5019               	movf	??_main& (0+255),w,c
  1982                           
  1983                           ;main.c: 308: while (inLength == 0)
  1984  00FBA0  D007               	goto	l3239
  1985  00FBA2                     l3237:
  1986                           
  1987                           ;main.c: 309: {
  1988                           ;main.c: 310: inLength = SerialTerm_GetLine(1);
  1989  00FBA2  6E19               	movwf	??_main& (0+255),c
  1990  00FBA4  0E01               	movlw	1
  1991  00FBA6  6E02               	movwf	?_SerialTerm_GetLine,c
  1992  00FBA8  5019               	movf	??_main& (0+255),w,c
  1993  00FBAA  EC59  F078         	call	_SerialTerm_GetLine	;wreg free
  1994  00FBAE  6E22               	movwf	main@inLength,c
  1995  00FBB0                     l3239:
  1996  00FBB0  5022               	movf	main@inLength,w,c
  1997  00FBB2  B4D8               	btfsc	status,2,c
  1998  00FBB4  D7F6               	goto	l3237
  1999                           
  2000                           ;main.c: 311: }
  2001                           ;main.c: 312: spiAddr = 0x000000;
  2002  00FBB6  0E00               	movlw	0
  2003  00FBB8  6E23               	movwf	main@spiAddr,c
  2004  00FBBA  0E00               	movlw	0
  2005  00FBBC  6E24               	movwf	main@spiAddr+1,c
  2006  00FBBE  0E00               	movlw	0
  2007  00FBC0  6E25               	movwf	main@spiAddr+2,c
  2008                           
  2009                           ;main.c: 313: spiAddr |= HexToByte(inputBuffer[0], inputBuffer[1]);
  2010  00FBC2  C200  F001         	movff	_inputBuffer,?_HexToByte
  2011  00FBC6  C201  F002         	movff	_inputBuffer+1,?_HexToByte+1
  2012  00FBCA  EC39  F075         	call	_HexToByte	;wreg free
  2013  00FBCE  6E19               	movwf	??_main& (0+255),c
  2014  00FBD0  6A1A               	clrf	(??_main+1)& (0+255),c
  2015  00FBD2  6A1B               	clrf	(??_main+2)& (0+255),c
  2016  00FBD4  5019               	movf	??_main,w,c
  2017  00FBD6  1223               	iorwf	main@spiAddr,f,c
  2018  00FBD8  501A               	movf	??_main+1,w,c
  2019  00FBDA  1224               	iorwf	main@spiAddr+1,f,c
  2020  00FBDC  501B               	movf	??_main+2,w,c
  2021  00FBDE  1225               	iorwf	main@spiAddr+2,f,c
  2022                           
  2023                           ;main.c: 314: spiAddr = spiAddr << 8;
  2024  00FBE0  C023  F01A         	movff	main@spiAddr,??_main+1
  2025  00FBE4  C024  F01B         	movff	main@spiAddr+1,??_main+2
  2026  00FBE8  6A19               	clrf	??_main& (0+255),c
  2027  00FBEA  C01B  F025         	movff	??_main+2,main@spiAddr+2
  2028  00FBEE  C01A  F024         	movff	??_main+1,main@spiAddr+1
  2029  00FBF2  C019  F023         	movff	??_main,main@spiAddr
  2030                           
  2031                           ;main.c: 315: spiAddr |= HexToByte(inputBuffer[2], inputBuffer[3]);
  2032  00FBF6  C202  F001         	movff	_inputBuffer+2,?_HexToByte
  2033  00FBFA  C203  F002         	movff	_inputBuffer+3,?_HexToByte+1
  2034  00FBFE  EC39  F075         	call	_HexToByte	;wreg free
  2035  00FC02  6E19               	movwf	??_main& (0+255),c
  2036  00FC04  6A1A               	clrf	(??_main+1)& (0+255),c
  2037  00FC06  6A1B               	clrf	(??_main+2)& (0+255),c
  2038  00FC08  5019               	movf	??_main,w,c
  2039  00FC0A  1223               	iorwf	main@spiAddr,f,c
  2040  00FC0C  501A               	movf	??_main+1,w,c
  2041  00FC0E  1224               	iorwf	main@spiAddr+1,f,c
  2042  00FC10  501B               	movf	??_main+2,w,c
  2043  00FC12  1225               	iorwf	main@spiAddr+2,f,c
  2044                           
  2045                           ;main.c: 316: spiAddr = spiAddr << 8;
  2046  00FC14  C023  F01A         	movff	main@spiAddr,??_main+1
  2047  00FC18  C024  F01B         	movff	main@spiAddr+1,??_main+2
  2048  00FC1C  6A19               	clrf	??_main& (0+255),c
  2049  00FC1E  C01B  F025         	movff	??_main+2,main@spiAddr+2
  2050  00FC22  C01A  F024         	movff	??_main+1,main@spiAddr+1
  2051  00FC26  C019  F023         	movff	??_main,main@spiAddr
  2052                           
  2053                           ;main.c: 317: spiAddr |= HexToByte(inputBuffer[4], inputBuffer[5]);
  2054  00FC2A  C204  F001         	movff	_inputBuffer+4,?_HexToByte
  2055  00FC2E  C205  F002         	movff	_inputBuffer+5,?_HexToByte+1
  2056  00FC32  EC39  F075         	call	_HexToByte	;wreg free
  2057  00FC36  6E19               	movwf	??_main& (0+255),c
  2058  00FC38  6A1A               	clrf	(??_main+1)& (0+255),c
  2059  00FC3A  6A1B               	clrf	(??_main+2)& (0+255),c
  2060  00FC3C  5019               	movf	??_main,w,c
  2061  00FC3E  1223               	iorwf	main@spiAddr,f,c
  2062  00FC40  501A               	movf	??_main+1,w,c
  2063  00FC42  1224               	iorwf	main@spiAddr+1,f,c
  2064  00FC44  501B               	movf	??_main+2,w,c
  2065  00FC46  1225               	iorwf	main@spiAddr+2,f,c
  2066                           
  2067                           ;main.c: 318: SPIMemory_WriteEnable();
  2068  00FC48  ECAA  F074         	call	_SPIMemory_WriteEnable	;wreg free
  2069                           
  2070                           ;main.c: 319: SPIMemory_SectorErase(spiAddr);
  2071  00FC4C  C023  F003         	movff	main@spiAddr,?_SPIMemory_SectorErase
  2072  00FC50  C024  F004         	movff	main@spiAddr+1,?_SPIMemory_SectorErase+1
  2073  00FC54  C025  F005         	movff	main@spiAddr+2,?_SPIMemory_SectorErase+2
  2074  00FC58  ECB2  F076         	call	_SPIMemory_SectorErase	;wreg free
  2075                           
  2076                           ;main.c: 320: SPIMemory_WaitWIP();
  2077  00FC5C  EC27  F074         	call	_SPIMemory_WaitWIP	;wreg free
  2078                           
  2079                           ;main.c: 321: USB_SendString("ok;");
  2080  00FC60  0EFF               	movlw	high STR_2
  2081  00FC62  6E03               	movwf	?_USB_SendString+1,c
  2082  00FC64  0EEF               	movlw	low STR_2
  2083  00FC66  6E02               	movwf	?_USB_SendString,c
  2084  00FC68  EC0C  F075         	call	_USB_SendString	;wreg free
  2085                           
  2086                           ;main.c: 322: }
  2087  00FC6C  D4A1               	goto	l3043
  2088  00FC6E                     l3261:
  2089                           
  2090                           ;main.c: 323: else if (strcmp(inputBuffer, "spi_unset_bp") == 0)
  2091  00FC6E  0E02               	movlw	high _inputBuffer
  2092  00FC70  6E02               	movwf	?_strcmp+1,c
  2093  00FC72  0E00               	movlw	low _inputBuffer
  2094  00FC74  6E01               	movwf	?_strcmp,c
  2095  00FC76  0EFF               	movlw	high STR_39
  2096  00FC78  6E04               	movwf	?_strcmp+3,c
  2097  00FC7A  0E80               	movlw	low STR_39
  2098  00FC7C  6E03               	movwf	?_strcmp+2,c
  2099  00FC7E  EC6A  F076         	call	_strcmp	;wreg free
  2100  00FC82  5002               	movf	?_strcmp+1,w,c
  2101  00FC84  1001               	iorwf	?_strcmp,w,c
  2102  00FC86  A4D8               	btfss	status,2,c
  2103  00FC88  D00F               	goto	l3267
  2104                           
  2105                           ;main.c: 324: {
  2106                           ;main.c: 325: SPIMemory_WriteEnable();
  2107  00FC8A  ECAA  F074         	call	_SPIMemory_WriteEnable	;wreg free
  2108                           
  2109                           ;main.c: 326: SPIMemory_WriteStatus(0x00);
  2110  00FC8E  6E19               	movwf	??_main& (0+255),c
  2111  00FC90  0E00               	movlw	0
  2112  00FC92  6E03               	movwf	?_SPIMemory_WriteStatus,c
  2113  00FC94  5019               	movf	??_main& (0+255),w,c
  2114  00FC96  ECF9  F074         	call	_SPIMemory_WriteStatus	;wreg free
  2115                           
  2116                           ;main.c: 327: USB_SendString("ok;");
  2117  00FC9A  0EFF               	movlw	high STR_2
  2118  00FC9C  6E03               	movwf	?_USB_SendString+1,c
  2119  00FC9E  0EEF               	movlw	low STR_2
  2120  00FCA0  6E02               	movwf	?_USB_SendString,c
  2121  00FCA2  EC0C  F075         	call	_USB_SendString	;wreg free
  2122                           
  2123                           ;main.c: 328: }
  2124  00FCA6  D484               	goto	l3043
  2125  00FCA8                     l3267:
  2126                           
  2127                           ;main.c: 329: else if (strcmp(inputBuffer, "get_fpga_size") == 0)
  2128  00FCA8  0E02               	movlw	high _inputBuffer
  2129  00FCAA  6E02               	movwf	?_strcmp+1,c
  2130  00FCAC  0E00               	movlw	low _inputBuffer
  2131  00FCAE  6E01               	movwf	?_strcmp,c
  2132  00FCB0  0EFF               	movlw	high STR_41
  2133  00FCB2  6E04               	movwf	?_strcmp+3,c
  2134  00FCB4  0E3D               	movlw	low STR_41
  2135  00FCB6  6E03               	movwf	?_strcmp+2,c
  2136  00FCB8  EC6A  F076         	call	_strcmp	;wreg free
  2137  00FCBC  5002               	movf	?_strcmp+1,w,c
  2138  00FCBE  1001               	iorwf	?_strcmp,w,c
  2139  00FCC0  A4D8               	btfss	status,2,c
  2140  00FCC2  D026               	goto	l3273
  2141                           
  2142                           ;main.c: 330: {
  2143                           ;main.c: 331: spiAddr = GetFpgaImageSize();
  2144  00FCC4  ECB8  F077         	call	_GetFpgaImageSize	;wreg free
  2145  00FCC8  C005  F025         	movff	?_GetFpgaImageSize+2,main@spiAddr+2
  2146  00FCCC  C004  F024         	movff	?_GetFpgaImageSize+1,main@spiAddr+1
  2147  00FCD0  C003  F023         	movff	?_GetFpgaImageSize,main@spiAddr
  2148                           
  2149                           ;main.c: 332: USB_SendHex((unsigned char)((spiAddr >> 16) & 0xFF));
  2150  00FCD4  C025  F007         	movff	main@spiAddr+2,?_USB_SendHex
  2151  00FCD8  EC0E  F076         	call	_USB_SendHex	;wreg free
  2152                           
  2153                           ;main.c: 333: USB_SendHex((unsigned char)((spiAddr >> 8) & 0xFF));
  2154  00FCDC  C023  F019         	movff	main@spiAddr,??_main
  2155  00FCE0  C024  F01A         	movff	main@spiAddr+1,??_main+1
  2156  00FCE4  C025  F01B         	movff	main@spiAddr+2,??_main+2
  2157  00FCE8  C01A  F019         	movff	??_main+1,??_main
  2158  00FCEC  C01B  F01A         	movff	??_main+2,??_main+1
  2159  00FCF0  6A1B               	clrf	??_main+2,c
  2160  00FCF2  5019               	movf	??_main,w,c
  2161  00FCF4  6E07               	movwf	?_USB_SendHex,c
  2162  00FCF6  EC0E  F076         	call	_USB_SendHex	;wreg free
  2163                           
  2164                           ;main.c: 334: USB_SendHex((unsigned char)(spiAddr & 0xFF));
  2165  00FCFA  C023  F007         	movff	main@spiAddr,?_USB_SendHex
  2166  00FCFE  EC0E  F076         	call	_USB_SendHex	;wreg free
  2167                           
  2168                           ;main.c: 335: USB_SendChar(';');
  2169  00FD02  6E19               	movwf	??_main& (0+255),c
  2170  00FD04  0E3B               	movlw	59
  2171  00FD06  6E01               	movwf	?_USB_SendChar,c
  2172  00FD08  5019               	movf	??_main& (0+255),w,c
  2173  00FD0A  EC20  F074         	call	_USB_SendChar	;wreg free
  2174                           
  2175                           ;main.c: 336: }
  2176  00FD0E  D450               	goto	l3043
  2177  00FD10                     l3273:
  2178                           
  2179                           ;main.c: 337: else if (strcmp(inputBuffer, "write_fpga_size") == 0)
  2180  00FD10  0E02               	movlw	high _inputBuffer
  2181  00FD12  6E02               	movwf	?_strcmp+1,c
  2182  00FD14  0E00               	movlw	low _inputBuffer
  2183  00FD16  6E01               	movwf	?_strcmp,c
  2184  00FD18  0EFF               	movlw	high STR_42
  2185  00FD1A  6E04               	movwf	?_strcmp+3,c
  2186  00FD1C  0E00               	movlw	low STR_42
  2187  00FD1E  6E03               	movwf	?_strcmp+2,c
  2188  00FD20  EC6A  F076         	call	_strcmp	;wreg free
  2189  00FD24  5002               	movf	?_strcmp+1,w,c
  2190  00FD26  1001               	iorwf	?_strcmp,w,c
  2191  00FD28  A4D8               	btfss	status,2,c
  2192  00FD2A  D06E               	goto	l3299
  2193                           
  2194                           ;main.c: 338: {
  2195                           ;main.c: 339: USB_SendString("size;");
  2196  00FD2C  0EFF               	movlw	high STR_43
  2197  00FD2E  6E03               	movwf	?_USB_SendString+1,c
  2198  00FD30  0ED9               	movlw	low STR_43
  2199  00FD32  6E02               	movwf	?_USB_SendString,c
  2200  00FD34  EC0C  F075         	call	_USB_SendString	;wreg free
  2201                           
  2202                           ;main.c: 340: inLength = 0;
  2203  00FD38  6E19               	movwf	??_main& (0+255),c
  2204  00FD3A  0E00               	movlw	0
  2205  00FD3C  6E22               	movwf	main@inLength,c
  2206  00FD3E  5019               	movf	??_main& (0+255),w,c
  2207                           
  2208                           ;main.c: 341: while (inLength == 0)
  2209  00FD40  D007               	goto	l3281
  2210  00FD42                     l3279:
  2211                           
  2212                           ;main.c: 342: {
  2213                           ;main.c: 343: inLength = SerialTerm_GetLine(1);
  2214  00FD42  6E19               	movwf	??_main& (0+255),c
  2215  00FD44  0E01               	movlw	1
  2216  00FD46  6E02               	movwf	?_SerialTerm_GetLine,c
  2217  00FD48  5019               	movf	??_main& (0+255),w,c
  2218  00FD4A  EC59  F078         	call	_SerialTerm_GetLine	;wreg free
  2219  00FD4E  6E22               	movwf	main@inLength,c
  2220  00FD50                     l3281:
  2221  00FD50  5022               	movf	main@inLength,w,c
  2222  00FD52  B4D8               	btfsc	status,2,c
  2223  00FD54  D7F6               	goto	l3279
  2224                           
  2225                           ;main.c: 344: }
  2226                           ;main.c: 345: spiAddr = 0x000000;
  2227  00FD56  0E00               	movlw	0
  2228  00FD58  6E23               	movwf	main@spiAddr,c
  2229  00FD5A  0E00               	movlw	0
  2230  00FD5C  6E24               	movwf	main@spiAddr+1,c
  2231  00FD5E  0E00               	movlw	0
  2232  00FD60  6E25               	movwf	main@spiAddr+2,c
  2233                           
  2234                           ;main.c: 346: spiAddr |= HexToByte(inputBuffer[0], inputBuffer[1]);
  2235  00FD62  C200  F001         	movff	_inputBuffer,?_HexToByte
  2236  00FD66  C201  F002         	movff	_inputBuffer+1,?_HexToByte+1
  2237  00FD6A  EC39  F075         	call	_HexToByte	;wreg free
  2238  00FD6E  6E19               	movwf	??_main& (0+255),c
  2239  00FD70  6A1A               	clrf	(??_main+1)& (0+255),c
  2240  00FD72  6A1B               	clrf	(??_main+2)& (0+255),c
  2241  00FD74  5019               	movf	??_main,w,c
  2242  00FD76  1223               	iorwf	main@spiAddr,f,c
  2243  00FD78  501A               	movf	??_main+1,w,c
  2244  00FD7A  1224               	iorwf	main@spiAddr+1,f,c
  2245  00FD7C  501B               	movf	??_main+2,w,c
  2246  00FD7E  1225               	iorwf	main@spiAddr+2,f,c
  2247                           
  2248                           ;main.c: 347: spiAddr = spiAddr << 8;
  2249  00FD80  C023  F01A         	movff	main@spiAddr,??_main+1
  2250  00FD84  C024  F01B         	movff	main@spiAddr+1,??_main+2
  2251  00FD88  6A19               	clrf	??_main& (0+255),c
  2252  00FD8A  C01B  F025         	movff	??_main+2,main@spiAddr+2
  2253  00FD8E  C01A  F024         	movff	??_main+1,main@spiAddr+1
  2254  00FD92  C019  F023         	movff	??_main,main@spiAddr
  2255                           
  2256                           ;main.c: 348: spiAddr |= HexToByte(inputBuffer[2], inputBuffer[3]);
  2257  00FD96  C202  F001         	movff	_inputBuffer+2,?_HexToByte
  2258  00FD9A  C203  F002         	movff	_inputBuffer+3,?_HexToByte+1
  2259  00FD9E  EC39  F075         	call	_HexToByte	;wreg free
  2260  00FDA2  6E19               	movwf	??_main& (0+255),c
  2261  00FDA4  6A1A               	clrf	(??_main+1)& (0+255),c
  2262  00FDA6  6A1B               	clrf	(??_main+2)& (0+255),c
  2263  00FDA8  5019               	movf	??_main,w,c
  2264  00FDAA  1223               	iorwf	main@spiAddr,f,c
  2265  00FDAC  501A               	movf	??_main+1,w,c
  2266  00FDAE  1224               	iorwf	main@spiAddr+1,f,c
  2267  00FDB0  501B               	movf	??_main+2,w,c
  2268  00FDB2  1225               	iorwf	main@spiAddr+2,f,c
  2269                           
  2270                           ;main.c: 349: spiAddr = spiAddr << 8;
  2271  00FDB4  C023  F01A         	movff	main@spiAddr,??_main+1
  2272  00FDB8  C024  F01B         	movff	main@spiAddr+1,??_main+2
  2273  00FDBC  6A19               	clrf	??_main& (0+255),c
  2274  00FDBE  C01B  F025         	movff	??_main+2,main@spiAddr+2
  2275  00FDC2  C01A  F024         	movff	??_main+1,main@spiAddr+1
  2276  00FDC6  C019  F023         	movff	??_main,main@spiAddr
  2277                           
  2278                           ;main.c: 350: spiAddr |= HexToByte(inputBuffer[4], inputBuffer[5]);
  2279  00FDCA  C204  F001         	movff	_inputBuffer+4,?_HexToByte
  2280  00FDCE  C205  F002         	movff	_inputBuffer+5,?_HexToByte+1
  2281  00FDD2  EC39  F075         	call	_HexToByte	;wreg free
  2282  00FDD6  6E19               	movwf	??_main& (0+255),c
  2283  00FDD8  6A1A               	clrf	(??_main+1)& (0+255),c
  2284  00FDDA  6A1B               	clrf	(??_main+2)& (0+255),c
  2285  00FDDC  5019               	movf	??_main,w,c
  2286  00FDDE  1223               	iorwf	main@spiAddr,f,c
  2287  00FDE0  501A               	movf	??_main+1,w,c
  2288  00FDE2  1224               	iorwf	main@spiAddr+1,f,c
  2289  00FDE4  501B               	movf	??_main+2,w,c
  2290  00FDE6  1225               	iorwf	main@spiAddr+2,f,c
  2291                           
  2292                           ;main.c: 351: WriteFpgaImageSize(spiAddr);
  2293  00FDE8  C023  F006         	movff	main@spiAddr,?_WriteFpgaImageSize
  2294  00FDEC  C024  F007         	movff	main@spiAddr+1,?_WriteFpgaImageSize+1
  2295  00FDF0  C025  F008         	movff	main@spiAddr+2,?_WriteFpgaImageSize+2
  2296  00FDF4  ECD8  F076         	call	_WriteFpgaImageSize	;wreg free
  2297                           
  2298                           ;main.c: 352: USB_SendString("ok;");
  2299  00FDF8  0EFF               	movlw	high STR_2
  2300  00FDFA  6E03               	movwf	?_USB_SendString+1,c
  2301  00FDFC  0EEF               	movlw	low STR_2
  2302  00FDFE  6E02               	movwf	?_USB_SendString,c
  2303  00FE00  EC0C  F075         	call	_USB_SendString	;wreg free
  2304                           
  2305                           ;main.c: 353: }
  2306  00FE04  EFD8  F07A         	goto	l3043
  2307  00FE08                     l3299:
  2308                           
  2309                           ;main.c: 354: else if (strcmp(inputBuffer, "load_palette") == 0)
  2310  00FE08  0E02               	movlw	high _inputBuffer
  2311  00FE0A  6E02               	movwf	?_strcmp+1,c
  2312  00FE0C  0E00               	movlw	low _inputBuffer
  2313  00FE0E  6E01               	movwf	?_strcmp,c
  2314  00FE10  0EFF               	movlw	high STR_45
  2315  00FE12  6E04               	movwf	?_strcmp+3,c
  2316  00FE14  0E73               	movlw	low STR_45
  2317  00FE16  6E03               	movwf	?_strcmp+2,c
  2318  00FE18  EC6A  F076         	call	_strcmp	;wreg free
  2319  00FE1C  5002               	movf	?_strcmp+1,w,c
  2320  00FE1E  1001               	iorwf	?_strcmp,w,c
  2321  00FE20  A4D8               	btfss	status,2,c
  2322  00FE22  D026               	goto	l3313
  2323                           
  2324                           ;main.c: 355: {
  2325                           ;main.c: 356: USB_SendString("which;");
  2326  00FE24  0EFF               	movlw	high STR_46
  2327  00FE26  6E03               	movwf	?_USB_SendString+1,c
  2328  00FE28  0ED2               	movlw	low STR_46
  2329  00FE2A  6E02               	movwf	?_USB_SendString,c
  2330  00FE2C  EC0C  F075         	call	_USB_SendString	;wreg free
  2331                           
  2332                           ;main.c: 357: inLength = 0;
  2333  00FE30  6E19               	movwf	??_main& (0+255),c
  2334  00FE32  0E00               	movlw	0
  2335  00FE34  6E22               	movwf	main@inLength,c
  2336  00FE36  5019               	movf	??_main& (0+255),w,c
  2337                           
  2338                           ;main.c: 358: while (inLength == 0)
  2339  00FE38  D007               	goto	l3307
  2340  00FE3A                     l3305:
  2341                           
  2342                           ;main.c: 359: {
  2343                           ;main.c: 360: inLength = SerialTerm_GetLine(1);
  2344  00FE3A  6E19               	movwf	??_main& (0+255),c
  2345  00FE3C  0E01               	movlw	1
  2346  00FE3E  6E02               	movwf	?_SerialTerm_GetLine,c
  2347  00FE40  5019               	movf	??_main& (0+255),w,c
  2348  00FE42  EC59  F078         	call	_SerialTerm_GetLine	;wreg free
  2349  00FE46  6E22               	movwf	main@inLength,c
  2350  00FE48                     l3307:
  2351  00FE48  5022               	movf	main@inLength,w,c
  2352  00FE4A  B4D8               	btfsc	status,2,c
  2353  00FE4C  D7F6               	goto	l3305
  2354                           
  2355                           ;main.c: 361: }
  2356                           ;main.c: 362: LoadPalette(inputBuffer[0] - '0');
  2357  00FE4E  0ED0               	movlw	208
  2358  00FE50  6E19               	movwf	??_main& (0+255),c
  2359  00FE52  C200  F01A         	movff	_inputBuffer,??_main+1
  2360  00FE56  5019               	movf	??_main,w,c
  2361  00FE58  241A               	addwf	??_main+1,w,c
  2362  00FE5A  6E0B               	movwf	?_LoadPalette,c
  2363  00FE5C  ECB6  F078         	call	_LoadPalette	;wreg free
  2364                           
  2365                           ;main.c: 363: USB_SendString("ok;");
  2366  00FE60  0EFF               	movlw	high STR_2
  2367  00FE62  6E03               	movwf	?_USB_SendString+1,c
  2368  00FE64  0EEF               	movlw	low STR_2
  2369  00FE66  6E02               	movwf	?_USB_SendString,c
  2370  00FE68  EC0C  F075         	call	_USB_SendString	;wreg free
  2371                           
  2372                           ;main.c: 364: }
  2373  00FE6C  EFD8  F07A         	goto	l3043
  2374  00FE70                     l3313:
  2375                           
  2376                           ;main.c: 365: else if (strcmp(inputBuffer, "get_jumpers") == 0)
  2377  00FE70  0E02               	movlw	high _inputBuffer
  2378  00FE72  6E02               	movwf	?_strcmp+1,c
  2379  00FE74  0E00               	movlw	low _inputBuffer
  2380  00FE76  6E01               	movwf	?_strcmp,c
  2381  00FE78  0EFF               	movlw	high STR_48
  2382  00FE7A  6E04               	movwf	?_strcmp+3,c
  2383  00FE7C  0E8D               	movlw	low STR_48
  2384  00FE7E  6E03               	movwf	?_strcmp+2,c
  2385  00FE80  EC6A  F076         	call	_strcmp	;wreg free
  2386  00FE84  5002               	movf	?_strcmp+1,w,c
  2387  00FE86  1001               	iorwf	?_strcmp,w,c
  2388  00FE88  A4D8               	btfss	status,2,c
  2389  00FE8A  D013               	goto	l3319
  2390                           
  2391                           ;main.c: 366: {
  2392                           ;main.c: 367: FPGARegs_WriteAddress(0x06);
  2393  00FE8C  6E19               	movwf	??_main& (0+255),c
  2394  00FE8E  0E06               	movlw	6
  2395  00FE90  6E01               	movwf	?_FPGARegs_WriteAddress,c
  2396  00FE92  5019               	movf	??_main& (0+255),w,c
  2397  00FE94  ECD7  F074         	call	_FPGARegs_WriteAddress	;wreg free
  2398                           
  2399                           ;main.c: 368: USB_SendHex(FPGARegs_ReadData());
  2400  00FE98  EC22  F075         	call	_FPGARegs_ReadData	;wreg free
  2401  00FE9C  6E07               	movwf	?_USB_SendHex,c
  2402  00FE9E  EC0E  F076         	call	_USB_SendHex	;wreg free
  2403                           
  2404                           ;main.c: 369: USB_SendChar(';');
  2405  00FEA2  6E19               	movwf	??_main& (0+255),c
  2406  00FEA4  0E3B               	movlw	59
  2407  00FEA6  6E01               	movwf	?_USB_SendChar,c
  2408  00FEA8  5019               	movf	??_main& (0+255),w,c
  2409  00FEAA  EC20  F074         	call	_USB_SendChar	;wreg free
  2410                           
  2411                           ;main.c: 370: }
  2412  00FEAE  EFD8  F07A         	goto	l3043
  2413  00FEB2                     l3319:
  2414                           
  2415                           ;main.c: 371: else
  2416                           ;main.c: 372: {
  2417                           ;main.c: 373: USB_SendString("?;");
  2418  00FEB2  0EFF               	movlw	high STR_49
  2419  00FEB4  6E03               	movwf	?_USB_SendString+1,c
  2420  00FEB6  0EFB               	movlw	low STR_49
  2421  00FEB8  6E02               	movwf	?_USB_SendString,c
  2422  00FEBA  EC0C  F075         	call	_USB_SendString	;wreg free
  2423  00FEBE  EFD8  F07A         	goto	l3043
  2424  00FEC2                     __end_of_main:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           postinc0	equ	0xFEE
  2428                           wreg	equ	0xFE8
  2429                           indf1	equ	0xFE7
  2430                           postdec1	equ	0xFE5
  2431                           fsr1h	equ	0xFE2
  2432                           fsr1l	equ	0xFE1
  2433                           indf2	equ	0xFDF
  2434                           fsr2h	equ	0xFDA
  2435                           fsr2l	equ	0xFD9
  2436                           status	equ	0xFD8
  2437                           
  2438 ;; *************** function _WriteFpgaImageSize *****************
  2439 ;; Defined at:
  2440 ;;		line 202 in file "programInfo.c"
  2441 ;; Parameters:    Size  Location     Type
  2442 ;;  val             3    5[COMRAM] unsigned um
  2443 ;; Auto vars:     Size  Location     Type
  2444 ;;		None
  2445 ;; Return value:  Size  Location     Type
  2446 ;;		None               void
  2447 ;; Registers used:
  2448 ;;		wreg, status,2, status,0, cstack
  2449 ;; Tracked objects:
  2450 ;;		On entry : 0/0
  2451 ;;		On exit  : 0/0
  2452 ;;		Unchanged: 0/0
  2453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2454 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2456 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;Total ram usage:        6 bytes
  2459 ;; Hardware stack levels used:    1
  2460 ;; Hardware stack levels required when called:    1
  2461 ;; This function calls:
  2462 ;;		_Write_b_eep
  2463 ;;		_Busy_eep
  2464 ;; This function is called by:
  2465 ;;		_main
  2466 ;; This function uses a non-reentrant model
  2467 ;;
  2468                           
  2469                           	psect	text1
  2470  00EDB0                     __ptext1:
  2471                           	opt stack 0
  2472  00EDB0                     _WriteFpgaImageSize:
  2473                           	opt stack 29
  2474                           
  2475                           ;programInfo.c: 203: Write_b_eep(10, (unsigned char)(val & 0xFF));
  2476                           
  2477                           ;incstack = 0
  2478                           ;incstack = 0
  2479  00EDB0  0E00               	movlw	0
  2480  00EDB2  6E02               	movwf	?_Write_b_eep+1,c
  2481  00EDB4  0E0A               	movlw	10
  2482  00EDB6  6E01               	movwf	?_Write_b_eep,c
  2483  00EDB8  C006  F003         	movff	WriteFpgaImageSize@val,?_Write_b_eep+2
  2484  00EDBC  EC49  F076         	call	_Write_b_eep	;wreg free
  2485                           
  2486                           ;programInfo.c: 204: Busy_eep();
  2487  00EDC0  ECF0  F073         	call	_Busy_eep	;wreg free
  2488                           
  2489                           ;programInfo.c: 205: Write_b_eep(9, (unsigned char)((val >> 8) & 0xFF));
  2490  00EDC4  0E00               	movlw	0
  2491  00EDC6  6E02               	movwf	?_Write_b_eep+1,c
  2492  00EDC8  0E09               	movlw	9
  2493  00EDCA  6E01               	movwf	?_Write_b_eep,c
  2494  00EDCC  C006  F009         	movff	WriteFpgaImageSize@val,??_WriteFpgaImageSize
  2495  00EDD0  C007  F00A         	movff	WriteFpgaImageSize@val+1,??_WriteFpgaImageSize+1
  2496  00EDD4  C008  F00B         	movff	WriteFpgaImageSize@val+2,??_WriteFpgaImageSize+2
  2497  00EDD8  C00A  F009         	movff	??_WriteFpgaImageSize+1,??_WriteFpgaImageSize
  2498  00EDDC  C00B  F00A         	movff	??_WriteFpgaImageSize+2,??_WriteFpgaImageSize+1
  2499  00EDE0  6A0B               	clrf	??_WriteFpgaImageSize+2,c
  2500  00EDE2  5009               	movf	??_WriteFpgaImageSize,w,c
  2501  00EDE4  6E03               	movwf	?_Write_b_eep+2,c
  2502  00EDE6  EC49  F076         	call	_Write_b_eep	;wreg free
  2503                           
  2504                           ;programInfo.c: 206: Busy_eep();
  2505  00EDEA  ECF0  F073         	call	_Busy_eep	;wreg free
  2506                           
  2507                           ;programInfo.c: 207: Write_b_eep(8, (unsigned char)((val >> 16) & 0xFF));
  2508  00EDEE  0E00               	movlw	0
  2509  00EDF0  6E02               	movwf	?_Write_b_eep+1,c
  2510  00EDF2  0E08               	movlw	8
  2511  00EDF4  6E01               	movwf	?_Write_b_eep,c
  2512  00EDF6  C008  F003         	movff	WriteFpgaImageSize@val+2,?_Write_b_eep+2
  2513  00EDFA  EC49  F076         	call	_Write_b_eep	;wreg free
  2514                           
  2515                           ;programInfo.c: 208: Busy_eep();
  2516  00EDFE  ECF0  F073         	call	_Busy_eep	;wreg free
  2517  00EE02  0012               	return	
  2518  00EE04                     __end_of_WriteFpgaImageSize:
  2519                           	opt stack 0
  2520                           tblptru	equ	0xFF8
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           indf1	equ	0xFE7
  2524                           postdec1	equ	0xFE5
  2525                           fsr1h	equ	0xFE2
  2526                           fsr1l	equ	0xFE1
  2527                           indf2	equ	0xFDF
  2528                           fsr2h	equ	0xFDA
  2529                           fsr2l	equ	0xFD9
  2530                           status	equ	0xFD8
  2531                           
  2532 ;; *************** function _SPIMemory_SectorErase *****************
  2533 ;; Defined at:
  2534 ;;		line 247 in file "spiMemory.c"
  2535 ;; Parameters:    Size  Location     Type
  2536 ;;  startAddr       3    2[COMRAM] unsigned um
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;		None
  2539 ;; Return value:  Size  Location     Type
  2540 ;;		None               void
  2541 ;; Registers used:
  2542 ;;		wreg, status,2, status,0, cstack
  2543 ;; Tracked objects:
  2544 ;;		On entry : 0/0
  2545 ;;		On exit  : 0/0
  2546 ;;		Unchanged: 0/0
  2547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2548 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2550 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2551 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;Total ram usage:        6 bytes
  2553 ;; Hardware stack levels used:    1
  2554 ;; Hardware stack levels required when called:    1
  2555 ;; This function calls:
  2556 ;;		_SPIMemory_SetCS
  2557 ;;		_SPIMemory_UnsetCS
  2558 ;;		_SPIMemory_DoWrite
  2559 ;; This function is called by:
  2560 ;;		_main
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text2
  2565  00ED64                     __ptext2:
  2566                           	opt stack 0
  2567  00ED64                     _SPIMemory_SectorErase:
  2568                           	opt stack 29
  2569                           
  2570                           ;spiMemory.c: 248: SPIMemory_UnsetCS();
  2571                           
  2572                           ;incstack = 0
  2573                           ;incstack = 0
  2574  00ED64  EC03  F074         	call	_SPIMemory_UnsetCS	;wreg free
  2575                           
  2576                           ;spiMemory.c: 249: SPIMemory_DoWrite(0xD8);
  2577  00ED68  6E06               	movwf	??_SPIMemory_SectorErase& (0+255),c
  2578  00ED6A  0ED8               	movlw	216
  2579  00ED6C  6E01               	movwf	?_SPIMemory_DoWrite,c
  2580  00ED6E  5006               	movf	??_SPIMemory_SectorErase& (0+255),w,c
  2581  00ED70  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  2582                           
  2583                           ;spiMemory.c: 250: SPIMemory_DoWrite((startAddr >> 16) & 0xFF);
  2584  00ED74  C005  F001         	movff	SPIMemory_SectorErase@startAddr+2,?_SPIMemory_DoWrite
  2585  00ED78  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  2586                           
  2587                           ;spiMemory.c: 251: SPIMemory_DoWrite((startAddr >> 8) & 0xFF);
  2588  00ED7C  C003  F006         	movff	SPIMemory_SectorErase@startAddr,??_SPIMemory_SectorErase
  2589  00ED80  C004  F007         	movff	SPIMemory_SectorErase@startAddr+1,??_SPIMemory_SectorErase+1
  2590  00ED84  C005  F008         	movff	SPIMemory_SectorErase@startAddr+2,??_SPIMemory_SectorErase+2
  2591  00ED88  C007  F006         	movff	??_SPIMemory_SectorErase+1,??_SPIMemory_SectorErase
  2592  00ED8C  C008  F007         	movff	??_SPIMemory_SectorErase+2,??_SPIMemory_SectorErase+1
  2593  00ED90  6A08               	clrf	??_SPIMemory_SectorErase+2,c
  2594  00ED92  5006               	movf	??_SPIMemory_SectorErase,w,c
  2595  00ED94  6E01               	movwf	?_SPIMemory_DoWrite,c
  2596  00ED96  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  2597                           
  2598                           ;spiMemory.c: 252: SPIMemory_DoWrite(startAddr & 0xFF);
  2599  00ED9A  C003  F001         	movff	SPIMemory_SectorErase@startAddr,?_SPIMemory_DoWrite
  2600  00ED9E  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  2601                           
  2602                           ;spiMemory.c: 254: while ((PIR1 & 0x08) == 0) asm("nop");
  2603  00EDA2  D001               	goto	l350
  2604  00EDA4                     l351:
  2605  00EDA4  F000               	nop		;# 
  2606  00EDA6                     l350:
  2607  00EDA6  A69E               	btfss	3998,3,c	;volatile
  2608  00EDA8  D7FD               	goto	l351
  2609                           
  2610                           ;spiMemory.c: 256: SPIMemory_SetCS();
  2611  00EDAA  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  2612  00EDAE  0012               	return	
  2613  00EDB0                     __end_of_SPIMemory_SectorErase:
  2614                           	opt stack 0
  2615                           tblptru	equ	0xFF8
  2616                           postinc0	equ	0xFEE
  2617                           wreg	equ	0xFE8
  2618                           indf1	equ	0xFE7
  2619                           postdec1	equ	0xFE5
  2620                           fsr1h	equ	0xFE2
  2621                           fsr1l	equ	0xFE1
  2622                           indf2	equ	0xFDF
  2623                           fsr2h	equ	0xFDA
  2624                           fsr2l	equ	0xFD9
  2625                           status	equ	0xFD8
  2626                           
  2627 ;; *************** function _SPIMemory_WriteDisable *****************
  2628 ;; Defined at:
  2629 ;;		line 150 in file "spiMemory.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;		None
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;		None
  2634 ;; Return value:  Size  Location     Type
  2635 ;;		None               void
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2646 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;Total ram usage:        1 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    1
  2650 ;; This function calls:
  2651 ;;		_SPIMemory_SetCS
  2652 ;;		_SPIMemory_UnsetCS
  2653 ;;		_SPIMemory_DoWrite
  2654 ;; This function is called by:
  2655 ;;		_main
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           	psect	text3
  2660  00E990                     __ptext3:
  2661                           	opt stack 0
  2662  00E990                     _SPIMemory_WriteDisable:
  2663                           	opt stack 29
  2664                           
  2665                           ;spiMemory.c: 151: SPIMemory_UnsetCS();
  2666                           
  2667                           ;incstack = 0
  2668                           ;incstack = 0
  2669  00E990  EC03  F074         	call	_SPIMemory_UnsetCS	;wreg free
  2670                           
  2671                           ;spiMemory.c: 152: SPIMemory_DoWrite(0x04);
  2672  00E994  6E03               	movwf	??_SPIMemory_WriteDisable& (0+255),c
  2673  00E996  0E04               	movlw	4
  2674  00E998  6E01               	movwf	?_SPIMemory_DoWrite,c
  2675  00E99A  5003               	movf	??_SPIMemory_WriteDisable& (0+255),w,c
  2676  00E99C  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  2677                           
  2678                           ;spiMemory.c: 154: while ((PIR1 & 0x08) == 0) asm("nop");
  2679  00E9A0  D001               	goto	l319
  2680  00E9A2                     l320:
  2681  00E9A2  F000               	nop		;# 
  2682  00E9A4                     l319:
  2683  00E9A4  A69E               	btfss	3998,3,c	;volatile
  2684  00E9A6  D7FD               	goto	l320
  2685                           
  2686                           ;spiMemory.c: 156: SPIMemory_SetCS();
  2687  00E9A8  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  2688  00E9AC  0012               	return	
  2689  00E9AE                     __end_of_SPIMemory_WriteDisable:
  2690                           	opt stack 0
  2691                           tblptru	equ	0xFF8
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           indf1	equ	0xFE7
  2695                           postdec1	equ	0xFE5
  2696                           fsr1h	equ	0xFE2
  2697                           fsr1l	equ	0xFE1
  2698                           indf2	equ	0xFDF
  2699                           fsr2h	equ	0xFDA
  2700                           fsr2l	equ	0xFD9
  2701                           status	equ	0xFD8
  2702                           
  2703 ;; *************** function _SPIMemory_ReadId *****************
  2704 ;; Defined at:
  2705 ;;		line 160 in file "spiMemory.c"
  2706 ;; Parameters:    Size  Location     Type
  2707 ;;		None
  2708 ;; Auto vars:     Size  Location     Type
  2709 ;;  mfgId           1    5[COMRAM] unsigned char 
  2710 ;;  memCap          1    4[COMRAM] unsigned char 
  2711 ;;  memType         1    3[COMRAM] unsigned char 
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      unsigned char 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, status,0, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;Total ram usage:        4 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    1
  2728 ;; This function calls:
  2729 ;;		_SPIMemory_SetCS
  2730 ;;		_SPIMemory_UnsetCS
  2731 ;;		_SPIMemory_DoRead
  2732 ;;		_SPIMemory_DoWrite
  2733 ;; This function is called by:
  2734 ;;		_main
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text4
  2739  00EB72                     __ptext4:
  2740                           	opt stack 0
  2741  00EB72                     _SPIMemory_ReadId:
  2742                           	opt stack 29
  2743                           
  2744                           ;spiMemory.c: 161: unsigned char mfgId, memType, memCap;
  2745                           ;spiMemory.c: 163: SPIMemory_UnsetCS();
  2746                           
  2747                           ;incstack = 0
  2748                           ;incstack = 0
  2749  00EB72  EC03  F074         	call	_SPIMemory_UnsetCS	;wreg free
  2750                           
  2751                           ;spiMemory.c: 164: SPIMemory_DoWrite(0x9F);
  2752  00EB76  6E03               	movwf	??_SPIMemory_ReadId& (0+255),c
  2753  00EB78  0E9F               	movlw	159
  2754  00EB7A  6E01               	movwf	?_SPIMemory_DoWrite,c
  2755  00EB7C  5003               	movf	??_SPIMemory_ReadId& (0+255),w,c
  2756  00EB7E  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  2757                           
  2758                           ;spiMemory.c: 166: SPIMemory_DoWrite(0x00);
  2759  00EB82  6E03               	movwf	??_SPIMemory_ReadId& (0+255),c
  2760  00EB84  0E00               	movlw	0
  2761  00EB86  6E01               	movwf	?_SPIMemory_DoWrite,c
  2762  00EB88  5003               	movf	??_SPIMemory_ReadId& (0+255),w,c
  2763  00EB8A  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  2764                           
  2765                           ;spiMemory.c: 168: mfgId = SPIMemory_DoRead();
  2766  00EB8E  EC8E  F074         	call	_SPIMemory_DoRead	;wreg free
  2767  00EB92  6E06               	movwf	SPIMemory_ReadId@mfgId,c
  2768                           
  2769                           ;spiMemory.c: 169: memType = SPIMemory_DoRead();
  2770  00EB94  EC8E  F074         	call	_SPIMemory_DoRead	;wreg free
  2771  00EB98  6E04               	movwf	SPIMemory_ReadId@memType,c
  2772                           
  2773                           ;spiMemory.c: 170: memCap = SPIMemory_DoRead();
  2774  00EB9A  EC8E  F074         	call	_SPIMemory_DoRead	;wreg free
  2775  00EB9E  6E05               	movwf	SPIMemory_ReadId@memCap,c
  2776                           
  2777                           ;spiMemory.c: 171: SPIMemory_SetCS();
  2778  00EBA0  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  2779                           
  2780                           ;spiMemory.c: 173: return mfgId;
  2781  00EBA4  5006               	movf	SPIMemory_ReadId@mfgId,w,c
  2782  00EBA6  0012               	return	
  2783  00EBA8                     __end_of_SPIMemory_ReadId:
  2784                           	opt stack 0
  2785                           tblptru	equ	0xFF8
  2786                           postinc0	equ	0xFEE
  2787                           wreg	equ	0xFE8
  2788                           indf1	equ	0xFE7
  2789                           postdec1	equ	0xFE5
  2790                           fsr1h	equ	0xFE2
  2791                           fsr1l	equ	0xFE1
  2792                           indf2	equ	0xFDF
  2793                           fsr2h	equ	0xFDA
  2794                           fsr2l	equ	0xFD9
  2795                           status	equ	0xFD8
  2796                           
  2797 ;; *************** function _WriteAutoChangePalette *****************
  2798 ;; Defined at:
  2799 ;;		line 88 in file "programInfo.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;  newVal          1    5[COMRAM] unsigned char 
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  oldVal          1    6[COMRAM] unsigned char 
  2804 ;; Return value:  Size  Location     Type
  2805 ;;		None               void
  2806 ;; Registers used:
  2807 ;;		wreg, status,2, status,0, cstack
  2808 ;; Tracked objects:
  2809 ;;		On entry : 0/0
  2810 ;;		On exit  : 0/0
  2811 ;;		Unchanged: 0/0
  2812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2813 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2816 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;Total ram usage:        2 bytes
  2818 ;; Hardware stack levels used:    1
  2819 ;; Hardware stack levels required when called:    1
  2820 ;; This function calls:
  2821 ;;		_Read_b_eep
  2822 ;;		_Write_b_eep
  2823 ;;		_Busy_eep
  2824 ;; This function is called by:
  2825 ;;		_main
  2826 ;; This function uses a non-reentrant model
  2827 ;;
  2828                           
  2829                           	psect	text5
  2830  00EB08                     __ptext5:
  2831                           	opt stack 0
  2832  00EB08                     _WriteAutoChangePalette:
  2833                           	opt stack 29
  2834                           
  2835                           ;programInfo.c: 89: unsigned char oldVal;
  2836                           ;programInfo.c: 91: oldVal = Read_b_eep(0);
  2837                           
  2838                           ;incstack = 0
  2839                           ;incstack = 0
  2840  00EB08  0E00               	movlw	0
  2841  00EB0A  6E02               	movwf	?_Read_b_eep+1,c
  2842  00EB0C  0E00               	movlw	0
  2843  00EB0E  6E01               	movwf	?_Read_b_eep,c
  2844  00EB10  EC44  F074         	call	_Read_b_eep	;wreg free
  2845  00EB14  6E07               	movwf	WriteAutoChangePalette@oldVal,c
  2846                           
  2847                           ;programInfo.c: 92: if (newVal == 0)
  2848  00EB16  6606               	tstfsz	WriteAutoChangePalette@newVal,c
  2849  00EB18  D003               	goto	l2853
  2850                           
  2851                           ;programInfo.c: 93: {
  2852                           ;programInfo.c: 94: oldVal = oldVal | 0x08;
  2853  00EB1A  5007               	movf	WriteAutoChangePalette@oldVal,w,c
  2854  00EB1C  0908               	iorlw	8
  2855  00EB1E  D002               	goto	L2
  2856  00EB20                     l2853:
  2857                           
  2858                           ;programInfo.c: 96: else
  2859                           ;programInfo.c: 97: {
  2860                           ;programInfo.c: 98: oldVal = oldVal & 0xF7;
  2861  00EB20  5007               	movf	WriteAutoChangePalette@oldVal,w,c
  2862  00EB22  0BF7               	andlw	247
  2863  00EB24                     L2:
  2864  00EB24  6E07               	movwf	WriteAutoChangePalette@oldVal,c
  2865                           
  2866                           ;programInfo.c: 99: }
  2867                           ;programInfo.c: 101: Write_b_eep(0, oldVal);
  2868  00EB26  0E00               	movlw	0
  2869  00EB28  6E02               	movwf	?_Write_b_eep+1,c
  2870  00EB2A  0E00               	movlw	0
  2871  00EB2C  6E01               	movwf	?_Write_b_eep,c
  2872  00EB2E  C007  F003         	movff	WriteAutoChangePalette@oldVal,?_Write_b_eep+2
  2873  00EB32  EC49  F076         	call	_Write_b_eep	;wreg free
  2874                           
  2875                           ;programInfo.c: 102: Busy_eep();
  2876  00EB36  ECF0  F073         	call	_Busy_eep	;wreg free
  2877  00EB3A  0012               	return	
  2878  00EB3C                     __end_of_WriteAutoChangePalette:
  2879                           	opt stack 0
  2880                           tblptru	equ	0xFF8
  2881                           postinc0	equ	0xFEE
  2882                           wreg	equ	0xFE8
  2883                           indf1	equ	0xFE7
  2884                           postdec1	equ	0xFE5
  2885                           fsr1h	equ	0xFE2
  2886                           fsr1l	equ	0xFE1
  2887                           indf2	equ	0xFDF
  2888                           fsr2h	equ	0xFDA
  2889                           fsr2l	equ	0xFD9
  2890                           status	equ	0xFD8
  2891                           
  2892 ;; *************** function _WriteAutoloadFPGA *****************
  2893 ;; Defined at:
  2894 ;;		line 61 in file "programInfo.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  newVal          1    5[COMRAM] unsigned char 
  2897 ;; Auto vars:     Size  Location     Type
  2898 ;;  oldVal          1    6[COMRAM] unsigned char 
  2899 ;; Return value:  Size  Location     Type
  2900 ;;		None               void
  2901 ;; Registers used:
  2902 ;;		wreg, status,2, status,0, cstack
  2903 ;; Tracked objects:
  2904 ;;		On entry : 0/0
  2905 ;;		On exit  : 0/0
  2906 ;;		Unchanged: 0/0
  2907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2908 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;Total ram usage:        2 bytes
  2913 ;; Hardware stack levels used:    1
  2914 ;; Hardware stack levels required when called:    1
  2915 ;; This function calls:
  2916 ;;		_Read_b_eep
  2917 ;;		_Write_b_eep
  2918 ;;		_Busy_eep
  2919 ;; This function is called by:
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text6
  2925  00EAD4                     __ptext6:
  2926                           	opt stack 0
  2927  00EAD4                     _WriteAutoloadFPGA:
  2928                           	opt stack 29
  2929                           
  2930                           ;programInfo.c: 62: unsigned char oldVal;
  2931                           ;programInfo.c: 64: oldVal = Read_b_eep(0);
  2932                           
  2933                           ;incstack = 0
  2934                           ;incstack = 0
  2935  00EAD4  0E00               	movlw	0
  2936  00EAD6  6E02               	movwf	?_Read_b_eep+1,c
  2937  00EAD8  0E00               	movlw	0
  2938  00EADA  6E01               	movwf	?_Read_b_eep,c
  2939  00EADC  EC44  F074         	call	_Read_b_eep	;wreg free
  2940  00EAE0  6E07               	movwf	WriteAutoloadFPGA@oldVal,c
  2941                           
  2942                           ;programInfo.c: 65: if (newVal == 0)
  2943  00EAE2  6606               	tstfsz	WriteAutoloadFPGA@newVal,c
  2944  00EAE4  D003               	goto	l2843
  2945                           
  2946                           ;programInfo.c: 66: {
  2947                           ;programInfo.c: 67: oldVal = oldVal | 0x04;
  2948  00EAE6  5007               	movf	WriteAutoloadFPGA@oldVal,w,c
  2949  00EAE8  0904               	iorlw	4
  2950  00EAEA  D002               	goto	L3
  2951  00EAEC                     l2843:
  2952                           
  2953                           ;programInfo.c: 69: else
  2954                           ;programInfo.c: 70: {
  2955                           ;programInfo.c: 71: oldVal = oldVal & 0xFB;
  2956  00EAEC  5007               	movf	WriteAutoloadFPGA@oldVal,w,c
  2957  00EAEE  0BFB               	andlw	251
  2958  00EAF0                     L3:
  2959  00EAF0  6E07               	movwf	WriteAutoloadFPGA@oldVal,c
  2960                           
  2961                           ;programInfo.c: 72: }
  2962                           ;programInfo.c: 74: Write_b_eep(0, oldVal);
  2963  00EAF2  0E00               	movlw	0
  2964  00EAF4  6E02               	movwf	?_Write_b_eep+1,c
  2965  00EAF6  0E00               	movlw	0
  2966  00EAF8  6E01               	movwf	?_Write_b_eep,c
  2967  00EAFA  C007  F003         	movff	WriteAutoloadFPGA@oldVal,?_Write_b_eep+2
  2968  00EAFE  EC49  F076         	call	_Write_b_eep	;wreg free
  2969                           
  2970                           ;programInfo.c: 75: Busy_eep();
  2971  00EB02  ECF0  F073         	call	_Busy_eep	;wreg free
  2972  00EB06  0012               	return	
  2973  00EB08                     __end_of_WriteAutoloadFPGA:
  2974                           	opt stack 0
  2975                           tblptru	equ	0xFF8
  2976                           postinc0	equ	0xFEE
  2977                           wreg	equ	0xFE8
  2978                           indf1	equ	0xFE7
  2979                           postdec1	equ	0xFE5
  2980                           fsr1h	equ	0xFE2
  2981                           fsr1l	equ	0xFE1
  2982                           indf2	equ	0xFDF
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _SPIMemory_BulkErase *****************
  2988 ;; Defined at:
  2989 ;;		line 260 in file "spiMemory.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;		None
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;		None
  2994 ;; Return value:  Size  Location     Type
  2995 ;;		None               void
  2996 ;; Registers used:
  2997 ;;		wreg, status,2, status,0, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        1 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    1
  3010 ;; This function calls:
  3011 ;;		_SPIMemory_SetCS
  3012 ;;		_SPIMemory_UnsetCS
  3013 ;;		_SPIMemory_DoWrite
  3014 ;; This function is called by:
  3015 ;;		_main
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text7
  3020  00E972                     __ptext7:
  3021                           	opt stack 0
  3022  00E972                     _SPIMemory_BulkErase:
  3023                           	opt stack 29
  3024                           
  3025                           ;spiMemory.c: 261: SPIMemory_UnsetCS();
  3026                           
  3027                           ;incstack = 0
  3028                           ;incstack = 0
  3029  00E972  EC03  F074         	call	_SPIMemory_UnsetCS	;wreg free
  3030                           
  3031                           ;spiMemory.c: 262: SPIMemory_DoWrite(0xC7);
  3032  00E976  6E03               	movwf	??_SPIMemory_BulkErase& (0+255),c
  3033  00E978  0EC7               	movlw	199
  3034  00E97A  6E01               	movwf	?_SPIMemory_DoWrite,c
  3035  00E97C  5003               	movf	??_SPIMemory_BulkErase& (0+255),w,c
  3036  00E97E  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  3037                           
  3038                           ;spiMemory.c: 264: while ((PIR1 & 0x08) == 0) asm("nop");
  3039  00E982  D001               	goto	l356
  3040  00E984                     l357:
  3041  00E984  F000               	nop		;# 
  3042  00E986                     l356:
  3043  00E986  A69E               	btfss	3998,3,c	;volatile
  3044  00E988  D7FD               	goto	l357
  3045                           
  3046                           ;spiMemory.c: 266: SPIMemory_SetCS();
  3047  00E98A  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  3048  00E98E  0012               	return	
  3049  00E990                     __end_of_SPIMemory_BulkErase:
  3050                           	opt stack 0
  3051                           tblptru	equ	0xFF8
  3052                           postinc0	equ	0xFEE
  3053                           wreg	equ	0xFE8
  3054                           indf1	equ	0xFE7
  3055                           postdec1	equ	0xFE5
  3056                           fsr1h	equ	0xFE2
  3057                           fsr1l	equ	0xFE1
  3058                           indf2	equ	0xFDF
  3059                           fsr2h	equ	0xFDA
  3060                           fsr2l	equ	0xFD9
  3061                           status	equ	0xFD8
  3062                           
  3063 ;; *************** function _USB_SendHex *****************
  3064 ;; Defined at:
  3065 ;;		line 25 in file "usbSerial.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  theChar         1    6[COMRAM] unsigned char 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;  lowerNibble     1    8[COMRAM] unsigned char 
  3070 ;;  upperNibble     1    7[COMRAM] unsigned char 
  3071 ;; Return value:  Size  Location     Type
  3072 ;;		None               void
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0, cstack
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3080 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3084 ;;Total ram usage:        3 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    1
  3087 ;; This function calls:
  3088 ;;		_USB_SendChar
  3089 ;; This function is called by:
  3090 ;;		_main
  3091 ;; This function uses a non-reentrant model
  3092 ;;
  3093                           
  3094                           	psect	text8
  3095  00EC1C                     __ptext8:
  3096                           	opt stack 0
  3097  00EC1C                     _USB_SendHex:
  3098                           	opt stack 29
  3099                           
  3100                           ;usbSerial.c: 26: unsigned char upperNibble, lowerNibble;
  3101                           ;usbSerial.c: 28: upperNibble = theChar >> 4;
  3102                           
  3103                           ;incstack = 0
  3104                           ;incstack = 0
  3105  00EC1C  3807               	swapf	USB_SendHex@theChar,w,c
  3106  00EC1E  0B0F               	andlw	15
  3107  00EC20  6E08               	movwf	USB_SendHex@upperNibble,c
  3108                           
  3109                           ;usbSerial.c: 29: lowerNibble = theChar & 0x0F;
  3110  00EC22  5007               	movf	USB_SendHex@theChar,w,c
  3111  00EC24  0B0F               	andlw	15
  3112  00EC26  6E09               	movwf	USB_SendHex@lowerNibble,c
  3113                           
  3114                           ;usbSerial.c: 31: if (upperNibble > 9)
  3115  00EC28  0E09               	movlw	9
  3116  00EC2A  6408               	cpfsgt	USB_SendHex@upperNibble,c
  3117  00EC2C  D002               	goto	l2993
  3118                           
  3119                           ;usbSerial.c: 32: {
  3120                           ;usbSerial.c: 33: upperNibble += 'A' - 10;
  3121  00EC2E  0E37               	movlw	55
  3122  00EC30  D001               	goto	L4
  3123  00EC32                     l2993:
  3124                           
  3125                           ;usbSerial.c: 35: else
  3126                           ;usbSerial.c: 36: {
  3127                           ;usbSerial.c: 37: upperNibble += '0';
  3128  00EC32  0E30               	movlw	48
  3129  00EC34                     L4:
  3130  00EC34  2608               	addwf	USB_SendHex@upperNibble,f,c
  3131                           
  3132                           ;usbSerial.c: 38: }
  3133                           ;usbSerial.c: 40: if (lowerNibble > 9)
  3134  00EC36  0E09               	movlw	9
  3135  00EC38  6409               	cpfsgt	USB_SendHex@lowerNibble,c
  3136  00EC3A  D002               	goto	l2999
  3137                           
  3138                           ;usbSerial.c: 41: {
  3139                           ;usbSerial.c: 42: lowerNibble += 'A' - 10;
  3140  00EC3C  0E37               	movlw	55
  3141  00EC3E  D001               	goto	L5
  3142  00EC40                     l2999:
  3143                           
  3144                           ;usbSerial.c: 44: else
  3145                           ;usbSerial.c: 45: {
  3146                           ;usbSerial.c: 46: lowerNibble += '0';
  3147  00EC40  0E30               	movlw	48
  3148  00EC42                     L5:
  3149  00EC42  2609               	addwf	USB_SendHex@lowerNibble,f,c
  3150                           
  3151                           ;usbSerial.c: 47: }
  3152                           ;usbSerial.c: 49: USB_SendChar(upperNibble);
  3153  00EC44  C008  F001         	movff	USB_SendHex@upperNibble,?_USB_SendChar
  3154  00EC48  EC20  F074         	call	_USB_SendChar	;wreg free
  3155                           
  3156                           ;usbSerial.c: 50: USB_SendChar(lowerNibble);
  3157  00EC4C  C009  F001         	movff	USB_SendHex@lowerNibble,?_USB_SendChar
  3158  00EC50  EC20  F074         	call	_USB_SendChar	;wreg free
  3159  00EC54  0012               	return	
  3160  00EC56                     __end_of_USB_SendHex:
  3161                           	opt stack 0
  3162                           tblptru	equ	0xFF8
  3163                           postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           indf1	equ	0xFE7
  3166                           postdec1	equ	0xFE5
  3167                           fsr1h	equ	0xFE2
  3168                           fsr1l	equ	0xFE1
  3169                           indf2	equ	0xFDF
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           
  3174 ;; *************** function _SPIMemory_WaitWIP *****************
  3175 ;; Defined at:
  3176 ;;		line 270 in file "spiMemory.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;		None               void
  3183 ;; Registers used:
  3184 ;;		wreg, status,2, status,0, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;Total ram usage:        1 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    2
  3197 ;; This function calls:
  3198 ;;		_SPIMemory_ReadStatus
  3199 ;; This function is called by:
  3200 ;;		_main
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text9
  3205  00E84E                     __ptext9:
  3206                           	opt stack 0
  3207  00E84E                     _SPIMemory_WaitWIP:
  3208                           	opt stack 28
  3209                           
  3210                           ;spiMemory.c: 271: while (SPIMemory_ReadStatus() & 0x01) asm("nop");
  3211                           
  3212                           ;incstack = 0
  3213                           ;incstack = 0
  3214  00E84E  D001               	goto	l3015
  3215  00E850                     l363:
  3216  00E850  F000               	nop		;# 
  3217  00E852                     l3015:
  3218  00E852  EC9E  F075         	call	_SPIMemory_ReadStatus	;wreg free
  3219  00E856  6E0C               	movwf	??_SPIMemory_WaitWIP& (0+255),c
  3220  00E858  A00C               	btfss	??_SPIMemory_WaitWIP,0,c
  3221  00E85A  0012               	return	
  3222  00E85C  D7F9               	goto	l363
  3223  00E85E                     __end_of_SPIMemory_WaitWIP:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           postinc0	equ	0xFEE
  3227                           wreg	equ	0xFE8
  3228                           indf1	equ	0xFE7
  3229                           postdec1	equ	0xFE5
  3230                           fsr1h	equ	0xFE2
  3231                           fsr1l	equ	0xFE1
  3232                           indf2	equ	0xFDF
  3233                           fsr2h	equ	0xFDA
  3234                           fsr2l	equ	0xFD9
  3235                           status	equ	0xFD8
  3236                           
  3237 ;; *************** function _SPIMemory_ReadStatus *****************
  3238 ;; Defined at:
  3239 ;;		line 177 in file "spiMemory.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;		None
  3242 ;; Auto vars:     Size  Location     Type
  3243 ;;  stat            1   10[COMRAM] unsigned char 
  3244 ;; Return value:  Size  Location     Type
  3245 ;;                  1    wreg      unsigned char 
  3246 ;; Registers used:
  3247 ;;		wreg, status,2, status,0, cstack
  3248 ;; Tracked objects:
  3249 ;;		On entry : 0/0
  3250 ;;		On exit  : 0/0
  3251 ;;		Unchanged: 0/0
  3252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;Total ram usage:        2 bytes
  3258 ;; Hardware stack levels used:    1
  3259 ;; Hardware stack levels required when called:    1
  3260 ;; This function calls:
  3261 ;;		_Delay10KTCYx
  3262 ;;		_SPIMemory_SetCS
  3263 ;;		_SPIMemory_UnsetCS
  3264 ;;		_SPIMemory_DoRead
  3265 ;;		_SPIMemory_DoWrite
  3266 ;; This function is called by:
  3267 ;;		_main
  3268 ;;		_SPIMemory_WaitWIP
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text10
  3273  00EB3C                     __ptext10:
  3274                           	opt stack 0
  3275  00EB3C                     _SPIMemory_ReadStatus:
  3276                           	opt stack 29
  3277                           
  3278                           ;spiMemory.c: 178: unsigned char stat;
  3279                           ;spiMemory.c: 180: SPIMemory_UnsetCS();
  3280                           
  3281                           ;incstack = 0
  3282                           ;incstack = 0
  3283  00EB3C  EC03  F074         	call	_SPIMemory_UnsetCS	;wreg free
  3284                           
  3285                           ;spiMemory.c: 181: SPIMemory_DoWrite(0x05);
  3286  00EB40  6E0A               	movwf	??_SPIMemory_ReadStatus& (0+255),c
  3287  00EB42  0E05               	movlw	5
  3288  00EB44  6E01               	movwf	?_SPIMemory_DoWrite,c
  3289  00EB46  500A               	movf	??_SPIMemory_ReadStatus& (0+255),w,c
  3290  00EB48  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  3291                           
  3292                           ;spiMemory.c: 183: SPIMemory_DoWrite(0x00);
  3293  00EB4C  6E0A               	movwf	??_SPIMemory_ReadStatus& (0+255),c
  3294  00EB4E  0E00               	movlw	0
  3295  00EB50  6E01               	movwf	?_SPIMemory_DoWrite,c
  3296  00EB52  500A               	movf	??_SPIMemory_ReadStatus& (0+255),w,c
  3297  00EB54  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  3298                           
  3299                           ;spiMemory.c: 185: stat = SPIMemory_DoRead();
  3300  00EB58  EC8E  F074         	call	_SPIMemory_DoRead	;wreg free
  3301  00EB5C  6E0B               	movwf	SPIMemory_ReadStatus@stat,c
  3302                           
  3303                           ;spiMemory.c: 186: SPIMemory_SetCS();
  3304  00EB5E  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  3305                           
  3306                           ;spiMemory.c: 188: Delay10KTCYx(100);
  3307  00EB62  6E0A               	movwf	??_SPIMemory_ReadStatus& (0+255),c
  3308  00EB64  0E64               	movlw	100
  3309  00EB66  6E01               	movwf	?_Delay10KTCYx,c
  3310  00EB68  500A               	movf	??_SPIMemory_ReadStatus& (0+255),w,c
  3311  00EB6A  EC39  F074         	call	_Delay10KTCYx	;wreg free
  3312                           
  3313                           ;spiMemory.c: 189: return stat;
  3314  00EB6E  500B               	movf	SPIMemory_ReadStatus@stat,w,c
  3315  00EB70  0012               	return	
  3316  00EB72                     __end_of_SPIMemory_ReadStatus:
  3317                           	opt stack 0
  3318                           tblptru	equ	0xFF8
  3319                           postinc0	equ	0xFEE
  3320                           wreg	equ	0xFE8
  3321                           indf1	equ	0xFE7
  3322                           postdec1	equ	0xFE5
  3323                           fsr1h	equ	0xFE2
  3324                           fsr1l	equ	0xFE1
  3325                           indf2	equ	0xFDF
  3326                           fsr2h	equ	0xFDA
  3327                           fsr2l	equ	0xFD9
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function _SPIMemory_DoRead *****************
  3331 ;; Defined at:
  3332 ;;		line 51 in file "spiMemory.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;		None
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  tmp             1    0[COMRAM] unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      unsigned char 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;Total ram usage:        1 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; This function calls:
  3353 ;;		Nothing
  3354 ;; This function is called by:
  3355 ;;		_SPIMemory_ReadId
  3356 ;;		_SPIMemory_ReadStatus
  3357 ;;		_SPIMemory_ReadData
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text11
  3362  00E91C                     __ptext11:
  3363                           	opt stack 0
  3364  00E91C                     _SPIMemory_DoRead:
  3365                           	opt stack 29
  3366                           
  3367                           ;spiMemory.c: 72: unsigned char tmp;
  3368                           ;spiMemory.c: 75: while ((PIR1 & 0x08) == 0) asm("nop");
  3369                           
  3370                           ;incstack = 0
  3371                           ;incstack = 0
  3372  00E91C  D001               	goto	l298
  3373  00E91E                     l299:
  3374  00E91E  F000               	nop		;# 
  3375  00E920                     l298:
  3376  00E920  A69E               	btfss	3998,3,c	;volatile
  3377  00E922  D7FD               	goto	l299
  3378                           
  3379                           ;spiMemory.c: 76: PIR1 = PIR1 & 0xF7;
  3380  00E924  509E               	movf	3998,w,c	;volatile
  3381  00E926  0BF7               	andlw	247
  3382  00E928  6E9E               	movwf	3998,c	;volatile
  3383                           
  3384                           ;spiMemory.c: 79: tmp = SSP1BUF;
  3385  00E92A  CFC9 F001          	movff	4041,SPIMemory_DoRead@tmp	;volatile
  3386                           
  3387                           ;spiMemory.c: 82: SSP1BUF = 0x00;
  3388  00E92E  0E00               	movlw	0
  3389  00E930  6EC9               	movwf	4041,c	;volatile
  3390                           
  3391                           ;spiMemory.c: 84: return tmp;
  3392  00E932  5001               	movf	SPIMemory_DoRead@tmp,w,c
  3393  00E934  0012               	return	
  3394  00E936                     __end_of_SPIMemory_DoRead:
  3395                           	opt stack 0
  3396                           tblptru	equ	0xFF8
  3397                           postinc0	equ	0xFEE
  3398                           wreg	equ	0xFE8
  3399                           indf1	equ	0xFE7
  3400                           postdec1	equ	0xFE5
  3401                           fsr1h	equ	0xFE2
  3402                           fsr1l	equ	0xFE1
  3403                           indf2	equ	0xFDF
  3404                           fsr2h	equ	0xFDA
  3405                           fsr2l	equ	0xFD9
  3406                           status	equ	0xFD8
  3407                           
  3408 ;; *************** function _SPIMemory_PageProgram *****************
  3409 ;; Defined at:
  3410 ;;		line 225 in file "spiMemory.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  startAddr       3    2[COMRAM] unsigned um
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  currCount       2    8[COMRAM] unsigned int 
  3415 ;; Return value:  Size  Location     Type
  3416 ;;		None               void
  3417 ;; Registers used:
  3418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3419 ;; Tracked objects:
  3420 ;;		On entry : 0/0
  3421 ;;		On exit  : 0/0
  3422 ;;		Unchanged: 0/0
  3423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3424 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;Total ram usage:        8 bytes
  3429 ;; Hardware stack levels used:    1
  3430 ;; Hardware stack levels required when called:    1
  3431 ;; This function calls:
  3432 ;;		_SPIMemory_SetCS
  3433 ;;		_SPIMemory_UnsetCS
  3434 ;;		_SPIMemory_DoWrite
  3435 ;; This function is called by:
  3436 ;;		_main
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text12
  3441  00EE74                     __ptext12:
  3442                           	opt stack 0
  3443  00EE74                     _SPIMemory_PageProgram:
  3444                           	opt stack 29
  3445                           
  3446                           ;spiMemory.c: 226: unsigned int currCount;
  3447                           ;spiMemory.c: 228: SPIMemory_UnsetCS();
  3448                           
  3449                           ;incstack = 0
  3450                           ;incstack = 0
  3451  00EE74  EC03  F074         	call	_SPIMemory_UnsetCS	;wreg free
  3452                           
  3453                           ;spiMemory.c: 229: SPIMemory_DoWrite(0x02);
  3454  00EE78  6E06               	movwf	??_SPIMemory_PageProgram& (0+255),c
  3455  00EE7A  0E02               	movlw	2
  3456  00EE7C  6E01               	movwf	?_SPIMemory_DoWrite,c
  3457  00EE7E  5006               	movf	??_SPIMemory_PageProgram& (0+255),w,c
  3458  00EE80  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  3459                           
  3460                           ;spiMemory.c: 230: SPIMemory_DoWrite((startAddr >> 16) & 0xFF);
  3461  00EE84  C005  F001         	movff	SPIMemory_PageProgram@startAddr+2,?_SPIMemory_DoWrite
  3462  00EE88  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  3463                           
  3464                           ;spiMemory.c: 231: SPIMemory_DoWrite((startAddr >> 8) & 0xFF);
  3465  00EE8C  C003  F006         	movff	SPIMemory_PageProgram@startAddr,??_SPIMemory_PageProgram
  3466  00EE90  C004  F007         	movff	SPIMemory_PageProgram@startAddr+1,??_SPIMemory_PageProgram+1
  3467  00EE94  C005  F008         	movff	SPIMemory_PageProgram@startAddr+2,??_SPIMemory_PageProgram+2
  3468  00EE98  C007  F006         	movff	??_SPIMemory_PageProgram+1,??_SPIMemory_PageProgram
  3469  00EE9C  C008  F007         	movff	??_SPIMemory_PageProgram+2,??_SPIMemory_PageProgram+1
  3470  00EEA0  6A08               	clrf	??_SPIMemory_PageProgram+2,c
  3471  00EEA2  5006               	movf	??_SPIMemory_PageProgram,w,c
  3472  00EEA4  6E01               	movwf	?_SPIMemory_DoWrite,c
  3473  00EEA6  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  3474                           
  3475                           ;spiMemory.c: 232: SPIMemory_DoWrite(startAddr & 0xFF);
  3476  00EEAA  C003  F001         	movff	SPIMemory_PageProgram@startAddr,?_SPIMemory_DoWrite
  3477  00EEAE  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  3478                           
  3479                           ;spiMemory.c: 235: for (currCount = 0; currCount < 256; currCount ++)
  3480  00EEB2  0E00               	movlw	0
  3481  00EEB4  6E0A               	movwf	SPIMemory_PageProgram@currCount+1,c
  3482  00EEB6  0E00               	movlw	0
  3483  00EEB8  6E09               	movwf	SPIMemory_PageProgram@currCount,c
  3484  00EEBA  0E00               	movlw	0
  3485  00EEBC  5C09               	subwf	SPIMemory_PageProgram@currCount,w,c
  3486  00EEBE  0E01               	movlw	1
  3487  00EEC0  580A               	subwfb	SPIMemory_PageProgram@currCount+1,w,c
  3488  00EEC2  B0D8               	btfsc	status,0,c
  3489  00EEC4  D010               	goto	l344
  3490                           
  3491                           ;spiMemory.c: 236: {
  3492                           ;spiMemory.c: 237: SPIMemory_DoWrite(dataBuffer[currCount]);
  3493  00EEC6  0101               	movlb	1	; () banked
  3494  00EEC8  0E00               	movlw	low _dataBuffer	;volatile
  3495  00EECA  2409               	addwf	SPIMemory_PageProgram@currCount,w,c
  3496  00EECC  6ED9               	movwf	fsr2l,c
  3497  00EECE  0101               	movlb	1	; () banked
  3498  00EED0  0E01               	movlw	high _dataBuffer	;volatile
  3499  00EED2  200A               	addwfc	SPIMemory_PageProgram@currCount+1,w,c
  3500  00EED4  6EDA               	movwf	fsr2h,c
  3501  00EED6  50DF               	movf	indf2,w,c
  3502  00EED8  6E01               	movwf	?_SPIMemory_DoWrite,c
  3503  00EEDA  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  3504  00EEDE  4A09               	infsnz	SPIMemory_PageProgram@currCount,f,c
  3505  00EEE0  2A0A               	incf	SPIMemory_PageProgram@currCount+1,f,c
  3506  00EEE2  D7EB               	goto	L6
  3507  00EEE4                     l345:
  3508  00EEE4  F000               	nop		;# 
  3509  00EEE6                     l344:
  3510  00EEE6  A69E               	btfss	3998,3,c	;volatile
  3511  00EEE8  D7FD               	goto	l345
  3512                           
  3513                           ;spiMemory.c: 243: SPIMemory_SetCS();
  3514  00EEEA  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  3515  00EEEE  0012               	return	
  3516  00EEF0                     __end_of_SPIMemory_PageProgram:
  3517                           	opt stack 0
  3518                           tblptru	equ	0xFF8
  3519                           postinc0	equ	0xFEE
  3520                           wreg	equ	0xFE8
  3521                           indf1	equ	0xFE7
  3522                           postdec1	equ	0xFE5
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           fsr2h	equ	0xFDA
  3527                           fsr2l	equ	0xFD9
  3528                           status	equ	0xFD8
  3529                           
  3530 ;; *************** function _WriteAutoloadProgram *****************
  3531 ;; Defined at:
  3532 ;;		line 7 in file "programInfo.c"
  3533 ;; Parameters:    Size  Location     Type
  3534 ;;  newVal          1    5[COMRAM] unsigned char 
  3535 ;; Auto vars:     Size  Location     Type
  3536 ;;  oldVal          1    6[COMRAM] unsigned char 
  3537 ;; Return value:  Size  Location     Type
  3538 ;;		None               void
  3539 ;; Registers used:
  3540 ;;		wreg, status,2, status,0, cstack
  3541 ;; Tracked objects:
  3542 ;;		On entry : 0/0
  3543 ;;		On exit  : 0/0
  3544 ;;		Unchanged: 0/0
  3545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3546 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3549 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;Total ram usage:        2 bytes
  3551 ;; Hardware stack levels used:    1
  3552 ;; Hardware stack levels required when called:    1
  3553 ;; This function calls:
  3554 ;;		_Read_b_eep
  3555 ;;		_Write_b_eep
  3556 ;;		_Busy_eep
  3557 ;; This function is called by:
  3558 ;;		_main
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           	psect	text13
  3563  00EAA0                     __ptext13:
  3564                           	opt stack 0
  3565  00EAA0                     _WriteAutoloadProgram:
  3566                           	opt stack 29
  3567                           
  3568                           ;programInfo.c: 8: unsigned char oldVal;
  3569                           ;programInfo.c: 10: oldVal = Read_b_eep(0);
  3570                           
  3571                           ;incstack = 0
  3572                           ;incstack = 0
  3573  00EAA0  0E00               	movlw	0
  3574  00EAA2  6E02               	movwf	?_Read_b_eep+1,c
  3575  00EAA4  0E00               	movlw	0
  3576  00EAA6  6E01               	movwf	?_Read_b_eep,c
  3577  00EAA8  EC44  F074         	call	_Read_b_eep	;wreg free
  3578  00EAAC  6E07               	movwf	WriteAutoloadProgram@oldVal,c
  3579                           
  3580                           ;programInfo.c: 11: if (newVal == 0)
  3581  00EAAE  6606               	tstfsz	WriteAutoloadProgram@newVal,c
  3582  00EAB0  D003               	goto	l2813
  3583                           
  3584                           ;programInfo.c: 12: {
  3585                           ;programInfo.c: 13: oldVal = oldVal | 0x01;
  3586  00EAB2  5007               	movf	WriteAutoloadProgram@oldVal,w,c
  3587  00EAB4  0901               	iorlw	1
  3588  00EAB6  D002               	goto	L7
  3589  00EAB8                     l2813:
  3590                           
  3591                           ;programInfo.c: 15: else
  3592                           ;programInfo.c: 16: {
  3593                           ;programInfo.c: 17: oldVal = oldVal & 0xFE;
  3594  00EAB8  5007               	movf	WriteAutoloadProgram@oldVal,w,c
  3595  00EABA  0BFE               	andlw	254
  3596  00EABC                     L7:
  3597  00EABC  6E07               	movwf	WriteAutoloadProgram@oldVal,c
  3598                           
  3599                           ;programInfo.c: 18: }
  3600                           ;programInfo.c: 20: Write_b_eep(0, oldVal);
  3601  00EABE  0E00               	movlw	0
  3602  00EAC0  6E02               	movwf	?_Write_b_eep+1,c
  3603  00EAC2  0E00               	movlw	0
  3604  00EAC4  6E01               	movwf	?_Write_b_eep,c
  3605  00EAC6  C007  F003         	movff	WriteAutoloadProgram@oldVal,?_Write_b_eep+2
  3606  00EACA  EC49  F076         	call	_Write_b_eep	;wreg free
  3607                           
  3608                           ;programInfo.c: 21: Busy_eep();
  3609  00EACE  ECF0  F073         	call	_Busy_eep	;wreg free
  3610  00EAD2  0012               	return	
  3611  00EAD4                     __end_of_WriteAutoloadProgram:
  3612                           	opt stack 0
  3613                           tblptru	equ	0xFF8
  3614                           postinc0	equ	0xFEE
  3615                           wreg	equ	0xFE8
  3616                           indf1	equ	0xFE7
  3617                           postdec1	equ	0xFE5
  3618                           fsr1h	equ	0xFE2
  3619                           fsr1l	equ	0xFE1
  3620                           indf2	equ	0xFDF
  3621                           fsr2h	equ	0xFDA
  3622                           fsr2l	equ	0xFD9
  3623                           status	equ	0xFD8
  3624                           
  3625 ;; *************** function _Busy_eep *****************
  3626 ;; Defined at:
  3627 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;		None
  3630 ;; Auto vars:     Size  Location     Type
  3631 ;;		None
  3632 ;; Return value:  Size  Location     Type
  3633 ;;		None               void
  3634 ;; Registers used:
  3635 ;;		None
  3636 ;; Tracked objects:
  3637 ;;		On entry : 0/0
  3638 ;;		On exit  : 0/0
  3639 ;;		Unchanged: 0/0
  3640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;Total ram usage:        0 bytes
  3646 ;; Hardware stack levels used:    1
  3647 ;; This function calls:
  3648 ;;		Nothing
  3649 ;; This function is called by:
  3650 ;;		_WriteAutoloadProgram
  3651 ;;		_WriteAutoloadFPGA
  3652 ;;		_WriteAutoChangePalette
  3653 ;;		_WriteFpgaImageSize
  3654 ;;		_WriteProgramWritten
  3655 ;;		_WriteProgramStartAddr
  3656 ;;		_WriteProgramEndAddr
  3657 ;;		_WriteProgramChecksum
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           	psect	text14
  3662  00E7E0                     __ptext14:
  3663                           	opt stack 0
  3664  00E7E0                     _Busy_eep:
  3665                           	opt stack 29
  3666  00E7E0                     l612:
  3667  00E7E0  A2A6               	btfss	4006,1,c	;volatile
  3668  00E7E2  0012               	return	
  3669  00E7E4  D7FD               	goto	l612
  3670  00E7E6                     __end_of_Busy_eep:
  3671                           	opt stack 0
  3672                           tblptru	equ	0xFF8
  3673                           postinc0	equ	0xFEE
  3674                           wreg	equ	0xFE8
  3675                           indf1	equ	0xFE7
  3676                           postdec1	equ	0xFE5
  3677                           fsr1h	equ	0xFE2
  3678                           fsr1l	equ	0xFE1
  3679                           indf2	equ	0xFDF
  3680                           fsr2h	equ	0xFDA
  3681                           fsr2l	equ	0xFD9
  3682                           status	equ	0xFD8
  3683                           
  3684 ;; *************** function _Write_b_eep *****************
  3685 ;; Defined at:
  3686 ;;		line 50 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
  3687 ;; Parameters:    Size  Location     Type
  3688 ;;  badd            2    0[COMRAM] unsigned int 
  3689 ;;  bdat            1    2[COMRAM] unsigned char 
  3690 ;; Auto vars:     Size  Location     Type
  3691 ;;  GIE_BIT_VAL     1    4[COMRAM] unsigned char 
  3692 ;; Return value:  Size  Location     Type
  3693 ;;		None               void
  3694 ;; Registers used:
  3695 ;;		wreg, status,2, status,0
  3696 ;; Tracked objects:
  3697 ;;		On entry : 0/0
  3698 ;;		On exit  : 0/0
  3699 ;;		Unchanged: 0/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3701 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;Total ram usage:        5 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		_WriteAutoloadProgram
  3711 ;;		_WriteAutoloadFPGA
  3712 ;;		_WriteAutoChangePalette
  3713 ;;		_WriteFpgaImageSize
  3714 ;;		_WriteProgramWritten
  3715 ;;		_WriteProgramStartAddr
  3716 ;;		_WriteProgramEndAddr
  3717 ;;		_WriteProgramChecksum
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           	psect	text15
  3722  00EC92                     __ptext15:
  3723                           	opt stack 0
  3724  00EC92                     _Write_b_eep:
  3725                           	opt stack 29
  3726                           
  3727                           ;incstack = 0
  3728                           ;incstack = 0
  3729  00EC92  6E04               	movwf	??_Write_b_eep& (0+255),c
  3730  00EC94  0E00               	movlw	0
  3731  00EC96  6E05               	movwf	Write_b_eep@GIE_BIT_VAL,c
  3732  00EC98  5004               	movf	??_Write_b_eep& (0+255),w,c
  3733  00EC9A  5002               	movf	Write_b_eep@badd+1,w,c
  3734  00EC9C  0B03               	andlw	3
  3735  00EC9E  6EAA               	movwf	4010,c	;volatile
  3736  00ECA0  C001  FFA9         	movff	Write_b_eep@badd,4009	;volatile
  3737  00ECA4  C003  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
  3738  00ECA8  9EA6               	bcf	4006,7,c	;volatile
  3739  00ECAA  9CA6               	bcf	4006,6,c	;volatile
  3740  00ECAC  84A6               	bsf	4006,2,c	;volatile
  3741  00ECAE  0E00               	movlw	0
  3742  00ECB0  BEF2               	btfsc	intcon,7,c	;volatile
  3743  00ECB2  0E01               	movlw	1
  3744  00ECB4  6E05               	movwf	Write_b_eep@GIE_BIT_VAL,c
  3745  00ECB6  9EF2               	bcf	intcon,7,c	;volatile
  3746  00ECB8  0E55               	movlw	85
  3747  00ECBA  6EA7               	movwf	4007,c	;volatile
  3748  00ECBC  0EAA               	movlw	170
  3749  00ECBE  6EA7               	movwf	4007,c	;volatile
  3750  00ECC0  82A6               	bsf	4006,1,c	;volatile
  3751  00ECC2                     l641:
  3752  00ECC2  B2A6               	btfsc	4006,1,c	;volatile
  3753  00ECC4  D7FE               	goto	l641
  3754  00ECC6  B005               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
  3755  00ECC8  D002               	bra	u1165
  3756  00ECCA  9EF2               	bcf	intcon,7,c	;volatile
  3757  00ECCC  D001               	bra	u1166
  3758  00ECCE                     u1165:
  3759  00ECCE  8EF2               	bsf	intcon,7,c	;volatile
  3760  00ECD0                     u1166:
  3761  00ECD0  94A6               	bcf	4006,2,c	;volatile
  3762  00ECD2  0012               	return	
  3763  00ECD4                     __end_of_Write_b_eep:
  3764                           	opt stack 0
  3765                           tblptru	equ	0xFF8
  3766                           intcon	equ	0xFF2
  3767                           postinc0	equ	0xFEE
  3768                           wreg	equ	0xFE8
  3769                           indf1	equ	0xFE7
  3770                           postdec1	equ	0xFE5
  3771                           fsr1h	equ	0xFE2
  3772                           fsr1l	equ	0xFE1
  3773                           indf2	equ	0xFDF
  3774                           fsr2h	equ	0xFDA
  3775                           fsr2l	equ	0xFD9
  3776                           status	equ	0xFD8
  3777                           
  3778 ;; *************** function _USB_FlushBuffer *****************
  3779 ;; Defined at:
  3780 ;;		line 11 in file "usbSerial.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;		None               void
  3787 ;; Registers used:
  3788 ;;		None
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;Total ram usage:        0 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; This function calls:
  3801 ;;		Nothing
  3802 ;; This function is called by:
  3803 ;;		_main
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text16
  3808  00E836                     __ptext16:
  3809                           	opt stack 0
  3810  00E836                     _USB_FlushBuffer:
  3811                           	opt stack 30
  3812                           
  3813                           ;usbSerial.c: 12: while ((TXSTA1 & 0x02) == 0) asm("nop");
  3814                           
  3815                           ;incstack = 0
  3816                           ;incstack = 0
  3817  00E836  D001               	goto	l403
  3818  00E838                     l404:
  3819  00E838  F000               	nop		;# 
  3820  00E83A                     l403:
  3821  00E83A  B2AC               	btfsc	4012,1,c	;volatile
  3822  00E83C  0012               	return	
  3823  00E83E  D7FC               	goto	l404
  3824  00E840                     __end_of_USB_FlushBuffer:
  3825                           	opt stack 0
  3826                           tblptru	equ	0xFF8
  3827                           intcon	equ	0xFF2
  3828                           postinc0	equ	0xFEE
  3829                           wreg	equ	0xFE8
  3830                           indf1	equ	0xFE7
  3831                           postdec1	equ	0xFE5
  3832                           fsr1h	equ	0xFE2
  3833                           fsr1l	equ	0xFE1
  3834                           indf2	equ	0xFDF
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function _ParseIntelHex *****************
  3840 ;; Defined at:
  3841 ;;		line 36 in file "intelHex.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;  line            2    6[COMRAM] PTR unsigned char 
  3844 ;;		 -> inputBuffer(257), 
  3845 ;; Auto vars:     Size  Location     Type
  3846 ;;  n               1   15[COMRAM] unsigned char 
  3847 ;;  lineLength      1   14[COMRAM] unsigned char 
  3848 ;;  checksum        1   13[COMRAM] unsigned char 
  3849 ;; Return value:  Size  Location     Type
  3850 ;;                  2    6[COMRAM] int 
  3851 ;; Registers used:
  3852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3853 ;; Tracked objects:
  3854 ;;		On entry : 0/0
  3855 ;;		On exit  : 0/0
  3856 ;;		Unchanged: 0/0
  3857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3858 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;Total ram usage:       10 bytes
  3863 ;; Hardware stack levels used:    1
  3864 ;; Hardware stack levels required when called:    1
  3865 ;; This function calls:
  3866 ;;		_HexToByte
  3867 ;;		_strlen
  3868 ;; This function is called by:
  3869 ;;		_main
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text17
  3874  00F300                     __ptext17:
  3875                           	opt stack 0
  3876  00F300                     _ParseIntelHex:
  3877                           	opt stack 29
  3878                           
  3879                           ;intelHex.c: 37: unsigned char lineLength, n;
  3880                           ;intelHex.c: 39: lineLength = strlen(line);
  3881                           
  3882                           ;incstack = 0
  3883                           ;incstack = 0
  3884  00F300  C007  F001         	movff	ParseIntelHex@line,?_strlen
  3885  00F304  C008  F002         	movff	ParseIntelHex@line+1,?_strlen+1
  3886  00F308  ECF1  F075         	call	_strlen	;wreg free
  3887  00F30C  5001               	movf	?_strlen,w,c
  3888  00F30E  6E0F               	movwf	ParseIntelHex@lineLength,c
  3889                           
  3890                           ;intelHex.c: 41: if (lineLength < 11)
  3891  00F310  0E0B               	movlw	11
  3892  00F312  600F               	cpfslt	ParseIntelHex@lineLength,c
  3893  00F314  D005               	goto	l2751
  3894                           
  3895                           ;intelHex.c: 42: {
  3896                           ;intelHex.c: 43: return 1;
  3897  00F316  0E00               	movlw	0
  3898  00F318  6E08               	movwf	?_ParseIntelHex+1,c
  3899  00F31A  0E01               	movlw	1
  3900  00F31C  6E07               	movwf	?_ParseIntelHex,c
  3901  00F31E  0012               	return	
  3902  00F320                     l2751:
  3903                           
  3904                           ;intelHex.c: 44: }
  3905                           ;intelHex.c: 46: if (line[0] != ':')
  3906  00F320  C007  FFD9         	movff	ParseIntelHex@line,fsr2l
  3907  00F324  C008  FFDA         	movff	ParseIntelHex@line+1,fsr2h
  3908  00F328  50DF               	movf	indf2,w,c
  3909  00F32A  0A3A               	xorlw	58
  3910  00F32C  B4D8               	btfsc	status,2,c
  3911  00F32E  D005               	goto	l2757
  3912                           
  3913                           ;intelHex.c: 47: {
  3914                           ;intelHex.c: 48: return 2;
  3915  00F330  0E00               	movlw	0
  3916  00F332  6E08               	movwf	?_ParseIntelHex+1,c
  3917  00F334  0E02               	movlw	2
  3918  00F336  6E07               	movwf	?_ParseIntelHex,c
  3919  00F338  0012               	return	
  3920  00F33A                     l2757:
  3921                           
  3922                           ;intelHex.c: 49: }
  3923                           ;intelHex.c: 51: IntelHex_ByteCount = HexToByte(line[1], line[2]);
  3924  00F33A  EE20 F001          	lfsr	2,1
  3925  00F33E  5007               	movf	ParseIntelHex@line,w,c
  3926  00F340  26D9               	addwf	fsr2l,f,c
  3927  00F342  5008               	movf	ParseIntelHex@line+1,w,c
  3928  00F344  22DA               	addwfc	fsr2h,f,c
  3929  00F346  50DF               	movf	indf2,w,c
  3930  00F348  6E01               	movwf	?_HexToByte,c
  3931  00F34A  EE20 F002          	lfsr	2,2
  3932  00F34E  5007               	movf	ParseIntelHex@line,w,c
  3933  00F350  26D9               	addwf	fsr2l,f,c
  3934  00F352  5008               	movf	ParseIntelHex@line+1,w,c
  3935  00F354  22DA               	addwfc	fsr2h,f,c
  3936  00F356  50DF               	movf	indf2,w,c
  3937  00F358  6E02               	movwf	?_HexToByte+1,c
  3938  00F35A  EC39  F075         	call	_HexToByte	;wreg free
  3939  00F35E  6E2A               	movwf	_IntelHex_ByteCount,c
  3940                           
  3941                           ;intelHex.c: 52: IntelHex_StartAddr = (((unsigned int)HexToByte(line[3], line[4])) << 8)
      +                           | HexToByte(line[5], line[6]);
  3942  00F360  EE20 F005          	lfsr	2,5
  3943  00F364  5007               	movf	ParseIntelHex@line,w,c
  3944  00F366  26D9               	addwf	fsr2l,f,c
  3945  00F368  5008               	movf	ParseIntelHex@line+1,w,c
  3946  00F36A  22DA               	addwfc	fsr2h,f,c
  3947  00F36C  50DF               	movf	indf2,w,c
  3948  00F36E  6E01               	movwf	?_HexToByte,c
  3949  00F370  EE20 F006          	lfsr	2,6
  3950  00F374  5007               	movf	ParseIntelHex@line,w,c
  3951  00F376  26D9               	addwf	fsr2l,f,c
  3952  00F378  5008               	movf	ParseIntelHex@line+1,w,c
  3953  00F37A  22DA               	addwfc	fsr2h,f,c
  3954  00F37C  50DF               	movf	indf2,w,c
  3955  00F37E  6E02               	movwf	?_HexToByte+1,c
  3956  00F380  EC39  F075         	call	_HexToByte	;wreg free
  3957  00F384  6E09               	movwf	??_ParseIntelHex& (0+255),c
  3958  00F386  EE20 F003          	lfsr	2,3
  3959  00F38A  5007               	movf	ParseIntelHex@line,w,c
  3960  00F38C  26D9               	addwf	fsr2l,f,c
  3961  00F38E  5008               	movf	ParseIntelHex@line+1,w,c
  3962  00F390  22DA               	addwfc	fsr2h,f,c
  3963  00F392  50DF               	movf	indf2,w,c
  3964  00F394  6E01               	movwf	?_HexToByte,c
  3965  00F396  EE20 F004          	lfsr	2,4
  3966  00F39A  5007               	movf	ParseIntelHex@line,w,c
  3967  00F39C  26D9               	addwf	fsr2l,f,c
  3968  00F39E  5008               	movf	ParseIntelHex@line+1,w,c
  3969  00F3A0  22DA               	addwfc	fsr2h,f,c
  3970  00F3A2  50DF               	movf	indf2,w,c
  3971  00F3A4  6E02               	movwf	?_HexToByte+1,c
  3972  00F3A6  EC39  F075         	call	_HexToByte	;wreg free
  3973  00F3AA  6E27               	movwf	_IntelHex_StartAddr+1,c
  3974  00F3AC  5009               	movf	??_ParseIntelHex,w,c
  3975  00F3AE  6E26               	movwf	_IntelHex_StartAddr,c
  3976                           
  3977                           ;intelHex.c: 53: IntelHex_RecordType = HexToByte(line[7], line[8]);
  3978  00F3B0  EE20 F007          	lfsr	2,7
  3979  00F3B4  5007               	movf	ParseIntelHex@line,w,c
  3980  00F3B6  26D9               	addwf	fsr2l,f,c
  3981  00F3B8  5008               	movf	ParseIntelHex@line+1,w,c
  3982  00F3BA  22DA               	addwfc	fsr2h,f,c
  3983  00F3BC  50DF               	movf	indf2,w,c
  3984  00F3BE  6E01               	movwf	?_HexToByte,c
  3985  00F3C0  EE20 F008          	lfsr	2,8
  3986  00F3C4  5007               	movf	ParseIntelHex@line,w,c
  3987  00F3C6  26D9               	addwf	fsr2l,f,c
  3988  00F3C8  5008               	movf	ParseIntelHex@line+1,w,c
  3989  00F3CA  22DA               	addwfc	fsr2h,f,c
  3990  00F3CC  50DF               	movf	indf2,w,c
  3991  00F3CE  6E02               	movwf	?_HexToByte+1,c
  3992  00F3D0  EC39  F075         	call	_HexToByte	;wreg free
  3993  00F3D4  6E2B               	movwf	_IntelHex_RecordType,c
  3994                           
  3995                           ;intelHex.c: 55: if (IntelHex_RecordType == 0)
  3996  00F3D6  662B               	tstfsz	_IntelHex_RecordType,c
  3997  00F3D8  D044               	goto	l2775
  3998                           
  3999                           ;intelHex.c: 56: {
  4000                           ;intelHex.c: 57: if (lineLength != ((IntelHex_ByteCount * 2) + 11))
  4001  00F3DA  502A               	movf	_IntelHex_ByteCount,w,c
  4002  00F3DC  0D02               	mullw	2
  4003  00F3DE  0E0B               	movlw	11
  4004  00F3E0  26F3               	addwf	prodl,f,c
  4005  00F3E2  0E00               	movlw	0
  4006  00F3E4  22F4               	addwfc	prodh,f,c
  4007  00F3E6  500F               	movf	ParseIntelHex@lineLength,w,c
  4008  00F3E8  18F3               	xorwf	prodl,w,c
  4009  00F3EA  10F4               	iorwf	prodh,w,c
  4010  00F3EC  B4D8               	btfsc	status,2,c
  4011  00F3EE  D005               	goto	l2767
  4012                           
  4013                           ;intelHex.c: 58: {
  4014                           ;intelHex.c: 59: return 3;
  4015  00F3F0  0E00               	movlw	0
  4016  00F3F2  6E08               	movwf	?_ParseIntelHex+1,c
  4017  00F3F4  0E03               	movlw	3
  4018  00F3F6  6E07               	movwf	?_ParseIntelHex,c
  4019  00F3F8  0012               	return	
  4020  00F3FA                     l2767:
  4021                           
  4022                           ;intelHex.c: 60: }
  4023                           ;intelHex.c: 62: for (n = 0; n < IntelHex_ByteCount; n++)
  4024  00F3FA  6E09               	movwf	??_ParseIntelHex& (0+255),c
  4025  00F3FC  0E00               	movlw	0
  4026  00F3FE  6E10               	movwf	ParseIntelHex@n,c
  4027  00F400  5009               	movf	??_ParseIntelHex& (0+255),w,c
  4028  00F402  D02A               	goto	l2773
  4029  00F404                     l2769:
  4030                           
  4031                           ;intelHex.c: 63: {
  4032                           ;intelHex.c: 64: IntelHex_Data[n] = HexToByte(line[9 + (n * 2)], line[10 + (n * 2)]);
  4033  00F404  5010               	movf	ParseIntelHex@n,w,c
  4034  00F406  0D01               	mullw	1
  4035  00F408  0100               	movlb	0	; () banked
  4036  00F40A  0E60               	movlw	low _IntelHex_Data
  4037  00F40C  24F3               	addwf	prodl,w,c
  4038  00F40E  6ED9               	movwf	fsr2l,c
  4039  00F410  0100               	movlb	0	; () banked
  4040  00F412  0E00               	movlw	high _IntelHex_Data
  4041  00F414  20F4               	addwfc	prodh,w,c
  4042  00F416  6EDA               	movwf	fsr2h,c
  4043  00F418  5010               	movf	ParseIntelHex@n,w,c
  4044  00F41A  0D02               	mullw	2
  4045  00F41C  0E09               	movlw	9
  4046  00F41E  26F3               	addwf	prodl,f,c
  4047  00F420  0E00               	movlw	0
  4048  00F422  22F4               	addwfc	prodh,f,c
  4049  00F424  50F3               	movf	prodl,w,c
  4050  00F426  2407               	addwf	ParseIntelHex@line,w,c
  4051  00F428  6EE1               	movwf	fsr1l,c
  4052  00F42A  50F4               	movf	prodh,w,c
  4053  00F42C  2008               	addwfc	ParseIntelHex@line+1,w,c
  4054  00F42E  6EE2               	movwf	fsr1h,c
  4055  00F430  50E7               	movf	indf1,w,c
  4056  00F432  6E01               	movwf	?_HexToByte,c
  4057  00F434  5010               	movf	ParseIntelHex@n,w,c
  4058  00F436  0D02               	mullw	2
  4059  00F438  0E0A               	movlw	10
  4060  00F43A  26F3               	addwf	prodl,f,c
  4061  00F43C  0E00               	movlw	0
  4062  00F43E  22F4               	addwfc	prodh,f,c
  4063  00F440  50F3               	movf	prodl,w,c
  4064  00F442  2407               	addwf	ParseIntelHex@line,w,c
  4065  00F444  6EE1               	movwf	fsr1l,c
  4066  00F446  50F4               	movf	prodh,w,c
  4067  00F448  2008               	addwfc	ParseIntelHex@line+1,w,c
  4068  00F44A  6EE2               	movwf	fsr1h,c
  4069  00F44C  50E7               	movf	indf1,w,c
  4070  00F44E  6E02               	movwf	?_HexToByte+1,c
  4071  00F450  EC39  F075         	call	_HexToByte	;wreg free
  4072  00F454  6EDF               	movwf	indf2,c
  4073  00F456  2A10               	incf	ParseIntelHex@n,f,c
  4074  00F458                     l2773:
  4075  00F458  502A               	movf	_IntelHex_ByteCount,w,c
  4076  00F45A  5C10               	subwf	ParseIntelHex@n,w,c
  4077  00F45C  B0D8               	btfsc	status,0,c
  4078  00F45E  D011               	goto	l2787
  4079  00F460  D7D1               	goto	l2769
  4080  00F462                     l2775:
  4081                           
  4082                           ;intelHex.c: 67: else if (IntelHex_RecordType == 1)
  4083  00F462  042B               	decf	_IntelHex_RecordType,w,c
  4084  00F464  A4D8               	btfss	status,2,c
  4085  00F466  D008               	goto	l2783
  4086                           
  4087                           ;intelHex.c: 68: {
  4088                           ;intelHex.c: 69: if (IntelHex_ByteCount != 0)
  4089  00F468  502A               	movf	_IntelHex_ByteCount,w,c
  4090  00F46A  B4D8               	btfsc	status,2,c
  4091  00F46C  D00A               	goto	l2787
  4092                           
  4093                           ;intelHex.c: 70: {
  4094                           ;intelHex.c: 71: return 4;
  4095  00F46E  0E00               	movlw	0
  4096  00F470  6E08               	movwf	?_ParseIntelHex+1,c
  4097  00F472  0E04               	movlw	4
  4098  00F474  6E07               	movwf	?_ParseIntelHex,c
  4099  00F476  0012               	return	
  4100  00F478                     l2783:
  4101                           
  4102                           ;intelHex.c: 74: else
  4103                           ;intelHex.c: 75: {
  4104                           ;intelHex.c: 76: return 5;
  4105  00F478  0E00               	movlw	0
  4106  00F47A  6E08               	movwf	?_ParseIntelHex+1,c
  4107  00F47C  0E05               	movlw	5
  4108  00F47E  6E07               	movwf	?_ParseIntelHex,c
  4109  00F480  0012               	return	
  4110  00F482                     l2787:
  4111                           
  4112                           ;intelHex.c: 77: }
  4113                           ;intelHex.c: 79: unsigned char checksum = 0;
  4114  00F482  6E09               	movwf	??_ParseIntelHex& (0+255),c
  4115  00F484  0E00               	movlw	0
  4116  00F486  6E0E               	movwf	ParseIntelHex@checksum,c
  4117  00F488  5009               	movf	??_ParseIntelHex& (0+255),w,c
  4118                           
  4119                           ;intelHex.c: 80: for (n = 1; n < (lineLength - 2); n += 2)
  4120  00F48A  6E09               	movwf	??_ParseIntelHex& (0+255),c
  4121  00F48C  0E01               	movlw	1
  4122  00F48E  6E10               	movwf	ParseIntelHex@n,c
  4123  00F490  5009               	movf	??_ParseIntelHex& (0+255),w,c
  4124  00F492  D01E               	goto	l2793
  4125  00F494                     l2789:
  4126                           
  4127                           ;intelHex.c: 81: {
  4128                           ;intelHex.c: 82: checksum += HexToByte(line[n], line[n + 1]);
  4129  00F494  5010               	movf	ParseIntelHex@n,w,c
  4130  00F496  0D01               	mullw	1
  4131  00F498  50F3               	movf	prodl,w,c
  4132  00F49A  2407               	addwf	ParseIntelHex@line,w,c
  4133  00F49C  6ED9               	movwf	fsr2l,c
  4134  00F49E  50F4               	movf	prodh,w,c
  4135  00F4A0  2008               	addwfc	ParseIntelHex@line+1,w,c
  4136  00F4A2  6EDA               	movwf	fsr2h,c
  4137  00F4A4  50DF               	movf	indf2,w,c
  4138  00F4A6  6E01               	movwf	?_HexToByte,c
  4139  00F4A8  5010               	movf	ParseIntelHex@n,w,c
  4140  00F4AA  6E09               	movwf	??_ParseIntelHex& (0+255),c
  4141  00F4AC  6A0A               	clrf	(??_ParseIntelHex+1)& (0+255),c
  4142  00F4AE  0E01               	movlw	1
  4143  00F4B0  2609               	addwf	??_ParseIntelHex,f,c
  4144  00F4B2  0E00               	movlw	0
  4145  00F4B4  220A               	addwfc	??_ParseIntelHex+1,f,c
  4146  00F4B6  5009               	movf	??_ParseIntelHex,w,c
  4147  00F4B8  2407               	addwf	ParseIntelHex@line,w,c
  4148  00F4BA  6ED9               	movwf	fsr2l,c
  4149  00F4BC  500A               	movf	??_ParseIntelHex+1,w,c
  4150  00F4BE  2008               	addwfc	ParseIntelHex@line+1,w,c
  4151  00F4C0  6EDA               	movwf	fsr2h,c
  4152  00F4C2  50DF               	movf	indf2,w,c
  4153  00F4C4  6E02               	movwf	?_HexToByte+1,c
  4154  00F4C6  EC39  F075         	call	_HexToByte	;wreg free
  4155  00F4CA  260E               	addwf	ParseIntelHex@checksum,f,c
  4156  00F4CC  0E02               	movlw	2
  4157  00F4CE  2610               	addwf	ParseIntelHex@n,f,c
  4158  00F4D0                     l2793:
  4159  00F4D0  0EFE               	movlw	254
  4160  00F4D2  240F               	addwf	ParseIntelHex@lineLength,w,c
  4161  00F4D4  6E09               	movwf	??_ParseIntelHex& (0+255),c
  4162  00F4D6  6A0A               	clrf	(??_ParseIntelHex+1)& (0+255),c
  4163  00F4D8  0EFF               	movlw	255
  4164  00F4DA  220A               	addwfc	(??_ParseIntelHex+1)& (0+255),f,c
  4165  00F4DC  5010               	movf	ParseIntelHex@n,w,c
  4166  00F4DE  6E0B               	movwf	(??_ParseIntelHex+2)& (0+255),c
  4167  00F4E0  6A0C               	clrf	(??_ParseIntelHex+3)& (0+255),c
  4168  00F4E2  500C               	movf	??_ParseIntelHex+3,w,c
  4169  00F4E4  0A80               	xorlw	128
  4170  00F4E6  6E0D               	movwf	(??_ParseIntelHex+4)& (0+255),c
  4171  00F4E8  5009               	movf	??_ParseIntelHex,w,c
  4172  00F4EA  5C0B               	subwf	??_ParseIntelHex+2,w,c
  4173  00F4EC  500A               	movf	??_ParseIntelHex+1,w,c
  4174  00F4EE  0A80               	xorlw	128
  4175  00F4F0  580D               	subwfb	(??_ParseIntelHex+4)& (0+255),w,c
  4176  00F4F2  A0D8               	btfss	status,0,c
  4177  00F4F4  D7CF               	goto	l2789
  4178                           
  4179                           ;intelHex.c: 83: }
  4180                           ;intelHex.c: 85: checksum = (checksum ^ 0xFF) + 1;
  4181  00F4F6  6C0E               	negf	ParseIntelHex@checksum,c
  4182                           
  4183                           ;intelHex.c: 87: if (checksum != HexToByte(line[lineLength - 2], line[lineLength - 1]))
  4184  00F4F8  0EFE               	movlw	254
  4185  00F4FA  240F               	addwf	ParseIntelHex@lineLength,w,c
  4186  00F4FC  6E09               	movwf	??_ParseIntelHex& (0+255),c
  4187  00F4FE  6A0A               	clrf	(??_ParseIntelHex+1)& (0+255),c
  4188  00F500  0EFF               	movlw	255
  4189  00F502  220A               	addwfc	(??_ParseIntelHex+1)& (0+255),f,c
  4190  00F504  5009               	movf	??_ParseIntelHex,w,c
  4191  00F506  2407               	addwf	ParseIntelHex@line,w,c
  4192  00F508  6ED9               	movwf	fsr2l,c
  4193  00F50A  500A               	movf	??_ParseIntelHex+1,w,c
  4194  00F50C  2008               	addwfc	ParseIntelHex@line+1,w,c
  4195  00F50E  6EDA               	movwf	fsr2h,c
  4196  00F510  50DF               	movf	indf2,w,c
  4197  00F512  6E01               	movwf	?_HexToByte,c
  4198  00F514  0EFF               	movlw	255
  4199  00F516  240F               	addwf	ParseIntelHex@lineLength,w,c
  4200  00F518  6E0B               	movwf	(??_ParseIntelHex+2)& (0+255),c
  4201  00F51A  6A0C               	clrf	(??_ParseIntelHex+3)& (0+255),c
  4202  00F51C  0EFF               	movlw	255
  4203  00F51E  220C               	addwfc	(??_ParseIntelHex+3)& (0+255),f,c
  4204  00F520  500B               	movf	??_ParseIntelHex+2,w,c
  4205  00F522  2407               	addwf	ParseIntelHex@line,w,c
  4206  00F524  6ED9               	movwf	fsr2l,c
  4207  00F526  500C               	movf	??_ParseIntelHex+3,w,c
  4208  00F528  2008               	addwfc	ParseIntelHex@line+1,w,c
  4209  00F52A  6EDA               	movwf	fsr2h,c
  4210  00F52C  50DF               	movf	indf2,w,c
  4211  00F52E  6E02               	movwf	?_HexToByte+1,c
  4212  00F530  EC39  F075         	call	_HexToByte	;wreg free
  4213  00F534  180E               	xorwf	ParseIntelHex@checksum,w,c
  4214  00F536  B4D8               	btfsc	status,2,c
  4215  00F538  D005               	goto	l2803
  4216                           
  4217                           ;intelHex.c: 88: {
  4218                           ;intelHex.c: 89: return 6;
  4219  00F53A  0E00               	movlw	0
  4220  00F53C  6E08               	movwf	?_ParseIntelHex+1,c
  4221  00F53E  0E06               	movlw	6
  4222  00F540  6E07               	movwf	?_ParseIntelHex,c
  4223  00F542  0012               	return	
  4224  00F544                     l2803:
  4225                           
  4226                           ;intelHex.c: 90: }
  4227                           ;intelHex.c: 92: return 0;
  4228  00F544  0E00               	movlw	0
  4229  00F546  6E08               	movwf	?_ParseIntelHex+1,c
  4230  00F548  0E00               	movlw	0
  4231  00F54A  6E07               	movwf	?_ParseIntelHex,c
  4232  00F54C  0012               	return	
  4233  00F54E                     __end_of_ParseIntelHex:
  4234                           	opt stack 0
  4235                           tblptru	equ	0xFF8
  4236                           prodh	equ	0xFF4
  4237                           prodl	equ	0xFF3
  4238                           intcon	equ	0xFF2
  4239                           postinc0	equ	0xFEE
  4240                           wreg	equ	0xFE8
  4241                           indf1	equ	0xFE7
  4242                           postdec1	equ	0xFE5
  4243                           fsr1h	equ	0xFE2
  4244                           fsr1l	equ	0xFE1
  4245                           indf2	equ	0xFDF
  4246                           fsr2h	equ	0xFDA
  4247                           fsr2l	equ	0xFD9
  4248                           status	equ	0xFD8
  4249                           
  4250 ;; *************** function _strlen *****************
  4251 ;; Defined at:
  4252 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;  s               2    0[COMRAM] PTR const unsigned char 
  4255 ;;		 -> inputBuffer(257), 
  4256 ;; Auto vars:     Size  Location     Type
  4257 ;;  cp              2    4[COMRAM] PTR const unsigned char 
  4258 ;;		 -> inputBuffer(257), 
  4259 ;; Return value:  Size  Location     Type
  4260 ;;                  2    0[COMRAM] unsigned int 
  4261 ;; Registers used:
  4262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4263 ;; Tracked objects:
  4264 ;;		On entry : 0/0
  4265 ;;		On exit  : 0/0
  4266 ;;		Unchanged: 0/0
  4267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4268 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4269 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4270 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4271 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4272 ;;Total ram usage:        6 bytes
  4273 ;; Hardware stack levels used:    1
  4274 ;; This function calls:
  4275 ;;		Nothing
  4276 ;; This function is called by:
  4277 ;;		_ParseIntelHex
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           	psect	text18
  4282  00EBE2                     __ptext18:
  4283                           	opt stack 0
  4284  00EBE2                     _strlen:
  4285                           	opt stack 29
  4286                           
  4287                           ;incstack = 0
  4288                           ;incstack = 0
  4289  00EBE2  C001  F005         	movff	strlen@s,strlen@cp
  4290  00EBE6  C002  F006         	movff	strlen@s+1,strlen@cp+1
  4291  00EBEA  D002               	goto	l2585
  4292  00EBEC                     l2583:
  4293  00EBEC  4A05               	infsnz	strlen@cp,f,c
  4294  00EBEE  2A06               	incf	strlen@cp+1,f,c
  4295  00EBF0                     l2585:
  4296  00EBF0  C005  FFD9         	movff	strlen@cp,fsr2l
  4297  00EBF4  C006  FFDA         	movff	strlen@cp+1,fsr2h
  4298  00EBF8  50DF               	movf	indf2,w,c
  4299  00EBFA  A4D8               	btfss	status,2,c
  4300  00EBFC  D7F7               	goto	l2583
  4301  00EBFE  C001  F003         	movff	strlen@s,??_strlen
  4302  00EC02  C002  F004         	movff	strlen@s+1,??_strlen+1
  4303  00EC06  1E03               	comf	??_strlen,f,c
  4304  00EC08  1E04               	comf	??_strlen+1,f,c
  4305  00EC0A  4A03               	infsnz	??_strlen,f,c
  4306  00EC0C  2A04               	incf	??_strlen+1,f,c
  4307  00EC0E  5005               	movf	strlen@cp,w,c
  4308  00EC10  2403               	addwf	??_strlen,w,c
  4309  00EC12  6E01               	movwf	?_strlen,c
  4310  00EC14  5006               	movf	strlen@cp+1,w,c
  4311  00EC16  2004               	addwfc	??_strlen+1,w,c
  4312  00EC18  6E02               	movwf	?_strlen+1,c
  4313  00EC1A  0012               	return	
  4314  00EC1C                     __end_of_strlen:
  4315                           	opt stack 0
  4316                           tblptru	equ	0xFF8
  4317                           prodh	equ	0xFF4
  4318                           prodl	equ	0xFF3
  4319                           intcon	equ	0xFF2
  4320                           postinc0	equ	0xFEE
  4321                           wreg	equ	0xFE8
  4322                           indf1	equ	0xFE7
  4323                           postdec1	equ	0xFE5
  4324                           fsr1h	equ	0xFE2
  4325                           fsr1l	equ	0xFE1
  4326                           indf2	equ	0xFDF
  4327                           fsr2h	equ	0xFDA
  4328                           fsr2l	equ	0xFD9
  4329                           status	equ	0xFD8
  4330                           
  4331 ;; *************** function _HexToByte *****************
  4332 ;; Defined at:
  4333 ;;		line 9 in file "intelHex.c"
  4334 ;; Parameters:    Size  Location     Type
  4335 ;;  upperNibble     1    0[COMRAM] unsigned char 
  4336 ;;  lowerNibble     1    1[COMRAM] unsigned char 
  4337 ;; Auto vars:     Size  Location     Type
  4338 ;;  returnVal       1    2[COMRAM] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  1    wreg      unsigned char 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;Total ram usage:        3 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; This function calls:
  4355 ;;		Nothing
  4356 ;; This function is called by:
  4357 ;;		_main
  4358 ;;		_ParseIntelHex
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text19
  4363  00EA72                     __ptext19:
  4364                           	opt stack 0
  4365  00EA72                     _HexToByte:
  4366                           	opt stack 30
  4367                           
  4368                           ;intelHex.c: 10: unsigned char returnVal;
  4369                           ;intelHex.c: 12: if (upperNibble >= 'A')
  4370                           
  4371                           ;incstack = 0
  4372                           ;incstack = 0
  4373  00EA72  0E40               	movlw	64
  4374  00EA74  6401               	cpfsgt	HexToByte@upperNibble,c
  4375  00EA76  D003               	goto	l2417
  4376                           
  4377                           ;intelHex.c: 13: {
  4378                           ;intelHex.c: 14: returnVal = (upperNibble - 'A' + 10);
  4379  00EA78  5001               	movf	HexToByte@upperNibble,w,c
  4380  00EA7A  0FC9               	addlw	201
  4381  00EA7C  D002               	goto	L8
  4382  00EA7E                     l2417:
  4383                           
  4384                           ;intelHex.c: 16: else
  4385                           ;intelHex.c: 17: {
  4386                           ;intelHex.c: 18: returnVal = (upperNibble - '0');
  4387  00EA7E  5001               	movf	HexToByte@upperNibble,w,c
  4388  00EA80  0FD0               	addlw	208
  4389  00EA82                     L8:
  4390  00EA82  6E03               	movwf	HexToByte@returnVal,c
  4391                           
  4392                           ;intelHex.c: 19: }
  4393                           ;intelHex.c: 21: returnVal = returnVal << 4;
  4394  00EA84  3803               	swapf	HexToByte@returnVal,w,c
  4395  00EA86  0BF0               	andlw	240
  4396  00EA88  6E03               	movwf	HexToByte@returnVal,c
  4397                           
  4398                           ;intelHex.c: 23: if (lowerNibble >= 'A')
  4399  00EA8A  0E40               	movlw	64
  4400  00EA8C  6402               	cpfsgt	HexToByte@lowerNibble,c
  4401  00EA8E  D003               	goto	l2423
  4402                           
  4403                           ;intelHex.c: 24: {
  4404                           ;intelHex.c: 25: returnVal += (lowerNibble - 'A' + 10);
  4405  00EA90  5002               	movf	HexToByte@lowerNibble,w,c
  4406  00EA92  0FC9               	addlw	201
  4407  00EA94  D002               	goto	L9
  4408  00EA96                     l2423:
  4409                           
  4410                           ;intelHex.c: 27: else
  4411                           ;intelHex.c: 28: {
  4412                           ;intelHex.c: 29: returnVal += (lowerNibble - '0');
  4413  00EA96  5002               	movf	HexToByte@lowerNibble,w,c
  4414  00EA98  0FD0               	addlw	208
  4415  00EA9A                     L9:
  4416  00EA9A  2603               	addwf	HexToByte@returnVal,f,c
  4417                           
  4418                           ;intelHex.c: 30: }
  4419                           ;intelHex.c: 32: return returnVal;
  4420  00EA9C  5003               	movf	HexToByte@returnVal,w,c
  4421  00EA9E  0012               	return	
  4422  00EAA0                     __end_of_HexToByte:
  4423                           	opt stack 0
  4424                           tblptru	equ	0xFF8
  4425                           prodh	equ	0xFF4
  4426                           prodl	equ	0xFF3
  4427                           intcon	equ	0xFF2
  4428                           postinc0	equ	0xFEE
  4429                           wreg	equ	0xFE8
  4430                           indf1	equ	0xFE7
  4431                           postdec1	equ	0xFE5
  4432                           fsr1h	equ	0xFE2
  4433                           fsr1l	equ	0xFE1
  4434                           indf2	equ	0xFDF
  4435                           fsr2h	equ	0xFDA
  4436                           fsr2l	equ	0xFD9
  4437                           status	equ	0xFD8
  4438                           
  4439 ;; *************** function _USB_SendString *****************
  4440 ;; Defined at:
  4441 ;;		line 16 in file "usbSerial.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  theString       2    1[COMRAM] PTR const unsigned char 
  4444 ;;		 -> STR_49(3), STR_47(4), STR_46(7), STR_44(4), 
  4445 ;;		 -> STR_43(6), STR_40(4), STR_38(4), STR_37(6), 
  4446 ;;		 -> STR_35(4), STR_33(4), STR_29(4), STR_27(4), 
  4447 ;;		 -> STR_25(4), STR_23(4), STR_21(4), STR_19(4), 
  4448 ;;		 -> STR_17(4), STR_16(6), STR_14(4), STR_13(6), 
  4449 ;;		 -> STR_11(4), STR_8(13), STR_6(4), STR_4(4), 
  4450 ;;		 -> STR_3(4), STR_2(4), 
  4451 ;; Auto vars:     Size  Location     Type
  4452 ;;		None
  4453 ;; Return value:  Size  Location     Type
  4454 ;;		None               void
  4455 ;; Registers used:
  4456 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4457 ;; Tracked objects:
  4458 ;;		On entry : 0/0
  4459 ;;		On exit  : 0/0
  4460 ;;		Unchanged: 0/0
  4461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4462 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;Total ram usage:        2 bytes
  4467 ;; Hardware stack levels used:    1
  4468 ;; Hardware stack levels required when called:    1
  4469 ;; This function calls:
  4470 ;;		_USB_SendChar
  4471 ;; This function is called by:
  4472 ;;		_main
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text20
  4477  00EA18                     __ptext20:
  4478                           	opt stack 0
  4479  00EA18                     _USB_SendString:
  4480                           	opt stack 29
  4481                           
  4482                           ;usbSerial.c: 17: while (*theString != 0)
  4483                           
  4484                           ;incstack = 0
  4485                           ;incstack = 0
  4486  00EA18  D00B               	goto	l2741
  4487  00EA1A                     l2737:
  4488                           
  4489                           ;usbSerial.c: 18: {
  4490                           ;usbSerial.c: 19: USB_SendChar(*theString);
  4491  00EA1A  C002  FFF6         	movff	USB_SendString@theString,tblptrl
  4492  00EA1E  C003  FFF7         	movff	USB_SendString@theString+1,tblptrh
  4493  00EA22  0008               	tblrd		*
  4494  00EA24  CFF5 F001          	movff	tablat,?_USB_SendChar
  4495  00EA28  EC20  F074         	call	_USB_SendChar	;wreg free
  4496                           
  4497                           ;usbSerial.c: 20: theString ++;
  4498  00EA2C  4A02               	infsnz	USB_SendString@theString,f,c
  4499  00EA2E  2A03               	incf	USB_SendString@theString+1,f,c
  4500  00EA30                     l2741:
  4501  00EA30  C002  FFF6         	movff	USB_SendString@theString,tblptrl
  4502  00EA34  C003  FFF7         	movff	USB_SendString@theString+1,tblptrh
  4503  00EA38  0008               	tblrd		*
  4504  00EA3A  50F5               	movf	tablat,w,c
  4505  00EA3C  0900               	iorlw	0
  4506  00EA3E  B4D8               	btfsc	status,2,c
  4507  00EA40  0012               	return	
  4508  00EA42  D7EB               	goto	l2737
  4509  00EA44                     __end_of_USB_SendString:
  4510                           	opt stack 0
  4511                           tblptru	equ	0xFF8
  4512                           tblptrh	equ	0xFF7
  4513                           tblptrl	equ	0xFF6
  4514                           tablat	equ	0xFF5
  4515                           prodh	equ	0xFF4
  4516                           prodl	equ	0xFF3
  4517                           intcon	equ	0xFF2
  4518                           postinc0	equ	0xFEE
  4519                           wreg	equ	0xFE8
  4520                           indf1	equ	0xFE7
  4521                           postdec1	equ	0xFE5
  4522                           fsr1h	equ	0xFE2
  4523                           fsr1l	equ	0xFE1
  4524                           indf2	equ	0xFDF
  4525                           fsr2h	equ	0xFDA
  4526                           fsr2l	equ	0xFD9
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function _strcmp *****************
  4530 ;; Defined at:
  4531 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcmp.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  s1              2    0[COMRAM] PTR const unsigned char 
  4534 ;;		 -> inputBuffer(257), 
  4535 ;;  s2              2    2[COMRAM] PTR const unsigned char 
  4536 ;;		 -> STR_48(12), STR_45(13), STR_42(16), STR_41(14), 
  4537 ;;		 -> STR_39(13), STR_36(13), STR_34(9), STR_32(9), 
  4538 ;;		 -> STR_31(15), STR_30(14), STR_28(26), STR_26(24), 
  4539 ;;		 -> STR_24(20), STR_22(18), STR_20(10), STR_18(10), 
  4540 ;;		 -> STR_15(9), STR_12(10), STR_10(16), STR_9(14), 
  4541 ;;		 -> STR_7(16), STR_5(6), STR_1(4), 
  4542 ;; Auto vars:     Size  Location     Type
  4543 ;;  r               1    5[COMRAM] char 
  4544 ;; Return value:  Size  Location     Type
  4545 ;;                  2    0[COMRAM] int 
  4546 ;; Registers used:
  4547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  4548 ;; Tracked objects:
  4549 ;;		On entry : 0/0
  4550 ;;		On exit  : 0/0
  4551 ;;		Unchanged: 0/0
  4552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4553 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;Total ram usage:        6 bytes
  4558 ;; Hardware stack levels used:    1
  4559 ;; This function calls:
  4560 ;;		Nothing
  4561 ;; This function is called by:
  4562 ;;		_main
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text21
  4567  00ECD4                     __ptext21:
  4568                           	opt stack 0
  4569  00ECD4                     _strcmp:
  4570                           	opt stack 30
  4571                           
  4572                           ;incstack = 0
  4573                           ;incstack = 0
  4574  00ECD4  D004               	goto	l2401
  4575  00ECD6                     l2399:
  4576  00ECD6  4A01               	infsnz	strcmp@s1,f,c
  4577  00ECD8  2A02               	incf	strcmp@s1+1,f,c
  4578  00ECDA  4A03               	infsnz	strcmp@s2,f,c
  4579  00ECDC  2A04               	incf	strcmp@s2+1,f,c
  4580  00ECDE                     l2401:
  4581  00ECDE  C001  FFD9         	movff	strcmp@s1,fsr2l
  4582  00ECE2  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  4583  00ECE6  50DF               	movf	indf2,w,c
  4584  00ECE8  6E05               	movwf	??_strcmp& (0+255),c
  4585  00ECEA  C003  FFF6         	movff	strcmp@s2,tblptrl
  4586  00ECEE  C004  FFF7         	movff	strcmp@s2+1,tblptrh
  4587  00ECF2  0008               	tblrd		*
  4588  00ECF4  50F5               	movf	tablat,w,c
  4589  00ECF6  0800               	sublw	0
  4590  00ECF8  2405               	addwf	??_strcmp,w,c
  4591  00ECFA  6E06               	movwf	strcmp@r,c
  4592  00ECFC  6606               	tstfsz	strcmp@r& (0+255),c
  4593  00ECFE  D007               	goto	l2405
  4594  00ED00  C001  FFD9         	movff	strcmp@s1,fsr2l
  4595  00ED04  C002  FFDA         	movff	strcmp@s1+1,fsr2h
  4596  00ED08  50DF               	movf	indf2,w,c
  4597  00ED0A  A4D8               	btfss	status,2,c
  4598  00ED0C  D7E4               	goto	l2399
  4599  00ED0E                     l2405:
  4600  00ED0E  5006               	movf	strcmp@r,w,c
  4601  00ED10  6E01               	movwf	?_strcmp,c
  4602  00ED12  6A02               	clrf	?_strcmp+1,c
  4603  00ED14  BE01               	btfsc	?_strcmp,7,c
  4604  00ED16  0602               	decf	?_strcmp+1,f,c
  4605  00ED18  0012               	return	
  4606  00ED1A                     __end_of_strcmp:
  4607                           	opt stack 0
  4608                           tblptru	equ	0xFF8
  4609                           tblptrh	equ	0xFF7
  4610                           tblptrl	equ	0xFF6
  4611                           tablat	equ	0xFF5
  4612                           prodh	equ	0xFF4
  4613                           prodl	equ	0xFF3
  4614                           intcon	equ	0xFF2
  4615                           postinc0	equ	0xFEE
  4616                           wreg	equ	0xFE8
  4617                           indf1	equ	0xFE7
  4618                           postdec1	equ	0xFE5
  4619                           fsr1h	equ	0xFE2
  4620                           fsr1l	equ	0xFE1
  4621                           indf2	equ	0xFDF
  4622                           fsr2h	equ	0xFDA
  4623                           fsr2l	equ	0xFD9
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _SerialTerm_GetLine *****************
  4627 ;; Defined at:
  4628 ;;		line 14 in file "serialTerminal.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;  noEcho          1    1[COMRAM] unsigned char 
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;  n               2    5[COMRAM] unsigned int 
  4633 ;;  retVal          2    3[COMRAM] unsigned int 
  4634 ;;  inputTmp        1    7[COMRAM] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      unsigned char 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4644 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;Total ram usage:        7 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    1
  4651 ;; This function calls:
  4652 ;;		_USB_SendChar
  4653 ;; This function is called by:
  4654 ;;		_main
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text22
  4659  00F0B2                     __ptext22:
  4660                           	opt stack 0
  4661  00F0B2                     _SerialTerm_GetLine:
  4662                           	opt stack 29
  4663                           
  4664                           ;serialTerminal.c: 15: unsigned char inputTmp;
  4665                           ;serialTerminal.c: 16: unsigned int retVal, n;
  4666                           ;serialTerminal.c: 18: if ((PIR1 & 0x20) != 0)
  4667                           
  4668                           ;incstack = 0
  4669                           ;incstack = 0
  4670  00F0B2  AA9E               	btfss	3998,5,c	;volatile
  4671  00F0B4  D059               	goto	l2731
  4672                           
  4673                           ;serialTerminal.c: 19: {
  4674                           ;serialTerminal.c: 20: inputTmp = RCREG1;
  4675  00F0B6  CFAE F008          	movff	4014,SerialTerm_GetLine@inputTmp	;volatile
  4676                           
  4677                           ;serialTerminal.c: 22: if (inputTmp == ';')
  4678  00F0BA  5008               	movf	SerialTerm_GetLine@inputTmp,w,c
  4679  00F0BC  0A3B               	xorlw	59
  4680  00F0BE  A4D8               	btfss	status,2,c
  4681  00F0C0  D037               	goto	l2719
  4682                           
  4683                           ;serialTerminal.c: 23: {
  4684                           ;serialTerminal.c: 24: if (inputBufferPos == 0)
  4685  00F0C2  5029               	movf	_inputBufferPos+1,w,c
  4686  00F0C4  1028               	iorwf	_inputBufferPos,w,c
  4687  00F0C6  A4D8               	btfss	status,2,c
  4688  00F0C8  D002               	goto	l437
  4689                           
  4690                           ;serialTerminal.c: 25: {
  4691                           ;serialTerminal.c: 26: return 0;
  4692  00F0CA  0E00               	movlw	0
  4693  00F0CC  0012               	return	
  4694  00F0CE                     l437:
  4695                           
  4696                           ;serialTerminal.c: 27: }
  4697                           ;serialTerminal.c: 29: if (noEcho == 0)
  4698  00F0CE  6602               	tstfsz	SerialTerm_GetLine@noEcho,c
  4699  00F0D0  D01D               	goto	l2707
  4700                           
  4701                           ;serialTerminal.c: 30: {
  4702                           ;serialTerminal.c: 31: for (n = 0; n < inputBufferPos; n++)
  4703  00F0D2  0E00               	movlw	0
  4704  00F0D4  6E07               	movwf	SerialTerm_GetLine@n+1,c
  4705  00F0D6  0E00               	movlw	0
  4706  00F0D8  6E06               	movwf	SerialTerm_GetLine@n,c
  4707  00F0DA  D00C               	goto	l2703
  4708  00F0DC                     l2699:
  4709                           
  4710                           ;serialTerminal.c: 32: {
  4711                           ;serialTerminal.c: 33: USB_SendChar(inputBuffer[n]);
  4712  00F0DC  0E00               	movlw	low _inputBuffer
  4713  00F0DE  2406               	addwf	SerialTerm_GetLine@n,w,c
  4714  00F0E0  6ED9               	movwf	fsr2l,c
  4715  00F0E2  0E02               	movlw	high _inputBuffer
  4716  00F0E4  2007               	addwfc	SerialTerm_GetLine@n+1,w,c
  4717  00F0E6  6EDA               	movwf	fsr2h,c
  4718  00F0E8  50DF               	movf	indf2,w,c
  4719  00F0EA  6E01               	movwf	?_USB_SendChar,c
  4720  00F0EC  EC20  F074         	call	_USB_SendChar	;wreg free
  4721  00F0F0  4A06               	infsnz	SerialTerm_GetLine@n,f,c
  4722  00F0F2  2A07               	incf	SerialTerm_GetLine@n+1,f,c
  4723  00F0F4                     l2703:
  4724  00F0F4  5028               	movf	_inputBufferPos,w,c
  4725  00F0F6  5C06               	subwf	SerialTerm_GetLine@n,w,c
  4726  00F0F8  5029               	movf	_inputBufferPos+1,w,c
  4727  00F0FA  5807               	subwfb	SerialTerm_GetLine@n+1,w,c
  4728  00F0FC  A0D8               	btfss	status,0,c
  4729  00F0FE  D7EE               	goto	l2699
  4730                           
  4731                           ;serialTerminal.c: 34: }
  4732                           ;serialTerminal.c: 35: USB_SendChar(';');
  4733  00F100  6E03               	movwf	??_SerialTerm_GetLine& (0+255),c
  4734  00F102  0E3B               	movlw	59
  4735  00F104  6E01               	movwf	?_USB_SendChar,c
  4736  00F106  5003               	movf	??_SerialTerm_GetLine& (0+255),w,c
  4737  00F108  EC20  F074         	call	_USB_SendChar	;wreg free
  4738  00F10C                     l2707:
  4739                           
  4740                           ;serialTerminal.c: 36: }
  4741                           ;serialTerminal.c: 37: inputBuffer[inputBufferPos] = 0;
  4742  00F10C  0E00               	movlw	low _inputBuffer
  4743  00F10E  2428               	addwf	_inputBufferPos,w,c
  4744  00F110  6ED9               	movwf	fsr2l,c
  4745  00F112  0E02               	movlw	high _inputBuffer
  4746  00F114  2029               	addwfc	_inputBufferPos+1,w,c
  4747  00F116  6EDA               	movwf	fsr2h,c
  4748  00F118  0E00               	movlw	0
  4749  00F11A  6EDF               	movwf	indf2,c
  4750                           
  4751                           ;serialTerminal.c: 38: retVal = inputBufferPos;
  4752  00F11C  C028  F004         	movff	_inputBufferPos,SerialTerm_GetLine@retVal
  4753  00F120  C029  F005         	movff	_inputBufferPos+1,SerialTerm_GetLine@retVal+1
  4754                           
  4755                           ;serialTerminal.c: 39: inputBufferPos = 0;
  4756  00F124  0E00               	movlw	0
  4757  00F126  6E29               	movwf	_inputBufferPos+1,c
  4758  00F128  0E00               	movlw	0
  4759  00F12A  6E28               	movwf	_inputBufferPos,c
  4760                           
  4761                           ;serialTerminal.c: 40: return retVal;
  4762  00F12C  5004               	movf	SerialTerm_GetLine@retVal,w,c
  4763  00F12E  0012               	return	
  4764  00F130                     l2719:
  4765                           
  4766                           ;serialTerminal.c: 42: else if (inputTmp == 0x7F)
  4767  00F130  5008               	movf	SerialTerm_GetLine@inputTmp,w,c
  4768  00F132  0A7F               	xorlw	127
  4769  00F134  A4D8               	btfss	status,2,c
  4770  00F136  D008               	goto	l2725
  4771                           
  4772                           ;serialTerminal.c: 43: {
  4773                           ;serialTerminal.c: 44: if (inputBufferPos > 0)
  4774  00F138  5029               	movf	_inputBufferPos+1,w,c
  4775  00F13A  1028               	iorwf	_inputBufferPos,w,c
  4776  00F13C  B4D8               	btfsc	status,2,c
  4777  00F13E  D014               	goto	l2731
  4778                           
  4779                           ;serialTerminal.c: 45: {
  4780                           ;serialTerminal.c: 46: inputBufferPos --;
  4781  00F140  0628               	decf	_inputBufferPos,f,c
  4782  00F142  A0D8               	btfss	status,0,c
  4783  00F144  0629               	decf	_inputBufferPos+1,f,c
  4784  00F146  D010               	goto	l2731
  4785  00F148                     l2725:
  4786                           
  4787                           ;serialTerminal.c: 49: else
  4788                           ;serialTerminal.c: 50: {
  4789                           ;serialTerminal.c: 51: if (inputBufferPos < 256)
  4790  00F148  0E00               	movlw	0
  4791  00F14A  5C28               	subwf	_inputBufferPos,w,c
  4792  00F14C  0E01               	movlw	1
  4793  00F14E  5829               	subwfb	_inputBufferPos+1,w,c
  4794  00F150  B0D8               	btfsc	status,0,c
  4795  00F152  D00A               	goto	l2731
  4796                           
  4797                           ;serialTerminal.c: 52: {
  4798                           ;serialTerminal.c: 53: inputBuffer[inputBufferPos] = inputTmp;
  4799  00F154  0E00               	movlw	low _inputBuffer
  4800  00F156  2428               	addwf	_inputBufferPos,w,c
  4801  00F158  6ED9               	movwf	fsr2l,c
  4802  00F15A  0E02               	movlw	high _inputBuffer
  4803  00F15C  2029               	addwfc	_inputBufferPos+1,w,c
  4804  00F15E  6EDA               	movwf	fsr2h,c
  4805  00F160  C008  FFDF         	movff	SerialTerm_GetLine@inputTmp,indf2
  4806                           
  4807                           ;serialTerminal.c: 54: inputBufferPos ++;
  4808  00F164  4A28               	infsnz	_inputBufferPos,f,c
  4809  00F166  2A29               	incf	_inputBufferPos+1,f,c
  4810  00F168                     l2731:
  4811                           
  4812                           ;serialTerminal.c: 55: }
  4813                           ;serialTerminal.c: 56: }
  4814                           ;serialTerminal.c: 57: }
  4815                           ;serialTerminal.c: 59: return 0;
  4816  00F168  0E00               	movlw	0
  4817  00F16A  0012               	return	
  4818  00F16C                     __end_of_SerialTerm_GetLine:
  4819                           	opt stack 0
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           intcon	equ	0xFF2
  4827                           postinc0	equ	0xFEE
  4828                           wreg	equ	0xFE8
  4829                           indf1	equ	0xFE7
  4830                           postdec1	equ	0xFE5
  4831                           fsr1h	equ	0xFE2
  4832                           fsr1l	equ	0xFE1
  4833                           indf2	equ	0xFDF
  4834                           fsr2h	equ	0xFDA
  4835                           fsr2l	equ	0xFD9
  4836                           status	equ	0xFD8
  4837                           
  4838 ;; *************** function _USB_SendChar *****************
  4839 ;; Defined at:
  4840 ;;		line 5 in file "usbSerial.c"
  4841 ;; Parameters:    Size  Location     Type
  4842 ;;  theChar         1    0[COMRAM] unsigned char 
  4843 ;; Auto vars:     Size  Location     Type
  4844 ;;		None
  4845 ;; Return value:  Size  Location     Type
  4846 ;;		None               void
  4847 ;; Registers used:
  4848 ;;		None
  4849 ;; Tracked objects:
  4850 ;;		On entry : 0/0
  4851 ;;		On exit  : 0/0
  4852 ;;		Unchanged: 0/0
  4853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4854 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4857 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4858 ;;Total ram usage:        1 bytes
  4859 ;; Hardware stack levels used:    1
  4860 ;; This function calls:
  4861 ;;		Nothing
  4862 ;; This function is called by:
  4863 ;;		_main
  4864 ;;		_USB_SendString
  4865 ;;		_USB_SendHex
  4866 ;;		_SerialTerm_GetLine
  4867 ;; This function uses a non-reentrant model
  4868 ;;
  4869                           
  4870                           	psect	text23
  4871  00E840                     __ptext23:
  4872                           	opt stack 0
  4873  00E840                     _USB_SendChar:
  4874                           	opt stack 29
  4875                           
  4876                           ;usbSerial.c: 6: while ((PIR1 & 0x10) == 0) asm("nop");
  4877                           
  4878                           ;incstack = 0
  4879                           ;incstack = 0
  4880  00E840  D001               	goto	l397
  4881  00E842                     l398:
  4882  00E842  F000               	nop		;# 
  4883  00E844                     l397:
  4884  00E844  A89E               	btfss	3998,4,c	;volatile
  4885  00E846  D7FD               	goto	l398
  4886                           
  4887                           ;usbSerial.c: 7: TXREG1 = theChar;
  4888  00E848  C001  FFAD         	movff	USB_SendChar@theChar,4013	;volatile
  4889  00E84C  0012               	return	
  4890  00E84E                     __end_of_USB_SendChar:
  4891                           	opt stack 0
  4892                           tblptru	equ	0xFF8
  4893                           tblptrh	equ	0xFF7
  4894                           tblptrl	equ	0xFF6
  4895                           tablat	equ	0xFF5
  4896                           prodh	equ	0xFF4
  4897                           prodl	equ	0xFF3
  4898                           intcon	equ	0xFF2
  4899                           postinc0	equ	0xFEE
  4900                           wreg	equ	0xFE8
  4901                           indf1	equ	0xFE7
  4902                           postdec1	equ	0xFE5
  4903                           fsr1h	equ	0xFE2
  4904                           fsr1l	equ	0xFE1
  4905                           indf2	equ	0xFDF
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function _FPGARegs_ReadData *****************
  4911 ;; Defined at:
  4912 ;;		line 57 in file "fpgaRegs.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;  ret             1    0[COMRAM] unsigned char 
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      unsigned char 
  4919 ;; Registers used:
  4920 ;;		wreg, status,2, status,0
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;Total ram usage:        1 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; This function calls:
  4933 ;;		Nothing
  4934 ;; This function is called by:
  4935 ;;		_main
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           	psect	text24
  4940  00EA44                     __ptext24:
  4941                           	opt stack 0
  4942  00EA44                     _FPGARegs_ReadData:
  4943                           	opt stack 30
  4944                           
  4945                           ;fpgaRegs.c: 58: unsigned char ret;
  4946                           ;fpgaRegs.c: 60: LATE = LATE & 0xFE;;
  4947                           
  4948                           ;incstack = 0
  4949                           ;incstack = 0
  4950  00EA44  508D               	movf	3981,w,c	;volatile
  4951  00EA46  0BFE               	andlw	254
  4952  00EA48  6E8D               	movwf	3981,c	;volatile
  4953                           
  4954                           ;fpgaRegs.c: 61: TRISA = 0xFF;;
  4955  00EA4A  6892               	setf	3986,c	;volatile
  4956                           
  4957                           ;fpgaRegs.c: 62: LATD = LATD & 0x7F;;
  4958  00EA4C  508C               	movf	3980,w,c	;volatile
  4959  00EA4E  0B7F               	andlw	127
  4960  00EA50  6E8C               	movwf	3980,c	;volatile
  4961                           
  4962                           ;fpgaRegs.c: 64: LATD = LATD | 0x40;;
  4963  00EA52  508C               	movf	3980,w,c	;volatile
  4964  00EA54  0940               	iorlw	64
  4965  00EA56  6E8C               	movwf	3980,c	;volatile
  4966                           
  4967                           ;fpgaRegs.c: 65: LATD = LATD & 0xBF;;
  4968  00EA58  508C               	movf	3980,w,c	;volatile
  4969  00EA5A  0BBF               	andlw	191
  4970  00EA5C  6E8C               	movwf	3980,c	;volatile
  4971                           
  4972                           ;fpgaRegs.c: 66: LATD = LATD | 0x40;;
  4973  00EA5E  508C               	movf	3980,w,c	;volatile
  4974  00EA60  0940               	iorlw	64
  4975  00EA62  6E8C               	movwf	3980,c	;volatile
  4976                           
  4977                           ;fpgaRegs.c: 67: ret = PORTA;
  4978  00EA64  CF80 F001          	movff	3968,FPGARegs_ReadData@ret	;volatile
  4979                           
  4980                           ;fpgaRegs.c: 68: LATD = LATD & 0xBF;;
  4981  00EA68  508C               	movf	3980,w,c	;volatile
  4982  00EA6A  0BBF               	andlw	191
  4983  00EA6C  6E8C               	movwf	3980,c	;volatile
  4984                           
  4985                           ;fpgaRegs.c: 70: return ret;
  4986  00EA6E  5001               	movf	FPGARegs_ReadData@ret,w,c
  4987  00EA70  0012               	return	
  4988  00EA72                     __end_of_FPGARegs_ReadData:
  4989                           	opt stack 0
  4990                           tblptru	equ	0xFF8
  4991                           tblptrh	equ	0xFF7
  4992                           tblptrl	equ	0xFF6
  4993                           tablat	equ	0xFF5
  4994                           prodh	equ	0xFF4
  4995                           prodl	equ	0xFF3
  4996                           intcon	equ	0xFF2
  4997                           postinc0	equ	0xFEE
  4998                           wreg	equ	0xFE8
  4999                           indf1	equ	0xFE7
  5000                           postdec1	equ	0xFE5
  5001                           fsr1h	equ	0xFE2
  5002                           fsr1l	equ	0xFE1
  5003                           indf2	equ	0xFDF
  5004                           fsr2h	equ	0xFDA
  5005                           fsr2l	equ	0xFD9
  5006                           status	equ	0xFD8
  5007                           
  5008 ;; *************** function _GetFpgaImageSize *****************
  5009 ;; Defined at:
  5010 ;;		line 212 in file "programInfo.c"
  5011 ;; Parameters:    Size  Location     Type
  5012 ;;		None
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;  retVal          3    8[COMRAM] unsigned um
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  3    2[COMRAM] unsigned um
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0, cstack
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5024 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;Total ram usage:        9 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    1
  5031 ;; This function calls:
  5032 ;;		_Read_b_eep
  5033 ;; This function is called by:
  5034 ;;		_main
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text25
  5039  00EF70                     __ptext25:
  5040                           	opt stack 0
  5041  00EF70                     _GetFpgaImageSize:
  5042                           	opt stack 29
  5043                           
  5044                           ;programInfo.c: 213: unsigned short long retVal;
  5045                           ;programInfo.c: 215: retVal = Read_b_eep(8);
  5046                           
  5047                           ;incstack = 0
  5048                           ;incstack = 0
  5049  00EF70  0E00               	movlw	0
  5050  00EF72  6E02               	movwf	?_Read_b_eep+1,c
  5051  00EF74  0E08               	movlw	8
  5052  00EF76  6E01               	movwf	?_Read_b_eep,c
  5053  00EF78  EC44  F074         	call	_Read_b_eep	;wreg free
  5054  00EF7C  6E06               	movwf	??_GetFpgaImageSize& (0+255),c
  5055  00EF7E  5006               	movf	??_GetFpgaImageSize,w,c
  5056  00EF80  6E09               	movwf	GetFpgaImageSize@retVal,c
  5057  00EF82  6A0A               	clrf	GetFpgaImageSize@retVal+1,c
  5058  00EF84  6A0B               	clrf	GetFpgaImageSize@retVal+2,c
  5059                           
  5060                           ;programInfo.c: 216: retVal = retVal << 8;
  5061  00EF86  C009  F007         	movff	GetFpgaImageSize@retVal,??_GetFpgaImageSize+1
  5062  00EF8A  C00A  F008         	movff	GetFpgaImageSize@retVal+1,??_GetFpgaImageSize+2
  5063  00EF8E  6A06               	clrf	??_GetFpgaImageSize& (0+255),c
  5064  00EF90  C008  F00B         	movff	??_GetFpgaImageSize+2,GetFpgaImageSize@retVal+2
  5065  00EF94  C007  F00A         	movff	??_GetFpgaImageSize+1,GetFpgaImageSize@retVal+1
  5066  00EF98  C006  F009         	movff	??_GetFpgaImageSize,GetFpgaImageSize@retVal
  5067                           
  5068                           ;programInfo.c: 217: retVal = retVal | Read_b_eep(9);
  5069  00EF9C  0E00               	movlw	0
  5070  00EF9E  6E02               	movwf	?_Read_b_eep+1,c
  5071  00EFA0  0E09               	movlw	9
  5072  00EFA2  6E01               	movwf	?_Read_b_eep,c
  5073  00EFA4  EC44  F074         	call	_Read_b_eep	;wreg free
  5074  00EFA8  6E06               	movwf	??_GetFpgaImageSize& (0+255),c
  5075  00EFAA  5006               	movf	??_GetFpgaImageSize,w,c
  5076  00EFAC  1009               	iorwf	GetFpgaImageSize@retVal,w,c
  5077  00EFAE  6E09               	movwf	GetFpgaImageSize@retVal,c
  5078  00EFB0  0E00               	movlw	0
  5079  00EFB2  100A               	iorwf	GetFpgaImageSize@retVal+1,w,c
  5080  00EFB4  6E0A               	movwf	GetFpgaImageSize@retVal+1,c
  5081  00EFB6  0E00               	movlw	0
  5082  00EFB8  100B               	iorwf	GetFpgaImageSize@retVal+2,w,c
  5083  00EFBA  6E0B               	movwf	GetFpgaImageSize@retVal+2,c
  5084                           
  5085                           ;programInfo.c: 218: retVal = retVal << 8;
  5086  00EFBC  C009  F007         	movff	GetFpgaImageSize@retVal,??_GetFpgaImageSize+1
  5087  00EFC0  C00A  F008         	movff	GetFpgaImageSize@retVal+1,??_GetFpgaImageSize+2
  5088  00EFC4  6A06               	clrf	??_GetFpgaImageSize& (0+255),c
  5089  00EFC6  C008  F00B         	movff	??_GetFpgaImageSize+2,GetFpgaImageSize@retVal+2
  5090  00EFCA  C007  F00A         	movff	??_GetFpgaImageSize+1,GetFpgaImageSize@retVal+1
  5091  00EFCE  C006  F009         	movff	??_GetFpgaImageSize,GetFpgaImageSize@retVal
  5092                           
  5093                           ;programInfo.c: 219: retVal = retVal | Read_b_eep(10);
  5094  00EFD2  0E00               	movlw	0
  5095  00EFD4  6E02               	movwf	?_Read_b_eep+1,c
  5096  00EFD6  0E0A               	movlw	10
  5097  00EFD8  6E01               	movwf	?_Read_b_eep,c
  5098  00EFDA  EC44  F074         	call	_Read_b_eep	;wreg free
  5099  00EFDE  6E06               	movwf	??_GetFpgaImageSize& (0+255),c
  5100  00EFE0  5006               	movf	??_GetFpgaImageSize,w,c
  5101  00EFE2  1009               	iorwf	GetFpgaImageSize@retVal,w,c
  5102  00EFE4  6E09               	movwf	GetFpgaImageSize@retVal,c
  5103  00EFE6  0E00               	movlw	0
  5104  00EFE8  100A               	iorwf	GetFpgaImageSize@retVal+1,w,c
  5105  00EFEA  6E0A               	movwf	GetFpgaImageSize@retVal+1,c
  5106  00EFEC  0E00               	movlw	0
  5107  00EFEE  100B               	iorwf	GetFpgaImageSize@retVal+2,w,c
  5108  00EFF0  6E0B               	movwf	GetFpgaImageSize@retVal+2,c
  5109                           
  5110                           ;programInfo.c: 221: return retVal;
  5111  00EFF2  C009  F003         	movff	GetFpgaImageSize@retVal,?_GetFpgaImageSize
  5112  00EFF6  C00A  F004         	movff	GetFpgaImageSize@retVal+1,?_GetFpgaImageSize+1
  5113  00EFFA  C00B  F005         	movff	GetFpgaImageSize@retVal+2,?_GetFpgaImageSize+2
  5114  00EFFE  0012               	return	
  5115  00F000                     __end_of_GetFpgaImageSize:
  5116                           	opt stack 0
  5117                           tblptru	equ	0xFF8
  5118                           tblptrh	equ	0xFF7
  5119                           tblptrl	equ	0xFF6
  5120                           tablat	equ	0xFF5
  5121                           prodh	equ	0xFF4
  5122                           prodl	equ	0xFF3
  5123                           intcon	equ	0xFF2
  5124                           postinc0	equ	0xFEE
  5125                           wreg	equ	0xFE8
  5126                           indf1	equ	0xFE7
  5127                           postdec1	equ	0xFE5
  5128                           fsr1h	equ	0xFE2
  5129                           fsr1l	equ	0xFE1
  5130                           indf2	equ	0xFDF
  5131                           fsr2h	equ	0xFDA
  5132                           fsr2l	equ	0xFD9
  5133                           status	equ	0xFD8
  5134                           
  5135 ;; *************** function _GetAutoloadFPGA *****************
  5136 ;; Defined at:
  5137 ;;		line 79 in file "programInfo.c"
  5138 ;; Parameters:    Size  Location     Type
  5139 ;;		None
  5140 ;; Auto vars:     Size  Location     Type
  5141 ;;		None
  5142 ;; Return value:  Size  Location     Type
  5143 ;;                  1    wreg      unsigned char 
  5144 ;; Registers used:
  5145 ;;		wreg, status,2, status,0, cstack
  5146 ;; Tracked objects:
  5147 ;;		On entry : 0/0
  5148 ;;		On exit  : 0/0
  5149 ;;		Unchanged: 0/0
  5150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5154 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;Total ram usage:        1 bytes
  5156 ;; Hardware stack levels used:    1
  5157 ;; Hardware stack levels required when called:    1
  5158 ;; This function calls:
  5159 ;;		_Read_b_eep
  5160 ;; This function is called by:
  5161 ;;		_main
  5162 ;; This function uses a non-reentrant model
  5163 ;;
  5164                           
  5165                           	psect	text26
  5166  00E902                     __ptext26:
  5167                           	opt stack 0
  5168  00E902                     _GetAutoloadFPGA:
  5169                           	opt stack 29
  5170                           
  5171                           ;programInfo.c: 80: if ((Read_b_eep(0) & 0x04) == 0)
  5172                           
  5173                           ;incstack = 0
  5174                           ;incstack = 0
  5175  00E902  0E00               	movlw	0
  5176  00E904  6E02               	movwf	?_Read_b_eep+1,c
  5177  00E906  0E00               	movlw	0
  5178  00E908  6E01               	movwf	?_Read_b_eep,c
  5179  00E90A  EC44  F074         	call	_Read_b_eep	;wreg free
  5180  00E90E  6E03               	movwf	??_GetAutoloadFPGA& (0+255),c
  5181  00E910  B403               	btfsc	??_GetAutoloadFPGA,2,c
  5182  00E912  D002               	goto	l2669
  5183                           
  5184                           ;programInfo.c: 81: {
  5185                           ;programInfo.c: 82: return 1;
  5186  00E914  0E01               	movlw	1
  5187  00E916  0012               	return	
  5188  00E918                     l2669:
  5189                           
  5190                           ;programInfo.c: 83: }
  5191                           ;programInfo.c: 84: return 0;
  5192  00E918  0E00               	movlw	0
  5193  00E91A  0012               	return	
  5194  00E91C                     __end_of_GetAutoloadFPGA:
  5195                           	opt stack 0
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           postinc0	equ	0xFEE
  5204                           wreg	equ	0xFE8
  5205                           indf1	equ	0xFE7
  5206                           postdec1	equ	0xFE5
  5207                           fsr1h	equ	0xFE2
  5208                           fsr1l	equ	0xFE1
  5209                           indf2	equ	0xFDF
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8
  5213                           
  5214 ;; *************** function _FPGARegs_Init *****************
  5215 ;; Defined at:
  5216 ;;		line 14 in file "fpgaRegs.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;		None
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;		None               void
  5223 ;; Registers used:
  5224 ;;		wreg, status,2, status,0
  5225 ;; Tracked objects:
  5226 ;;		On entry : 0/0
  5227 ;;		On exit  : 0/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5234 ;;Total ram usage:        0 bytes
  5235 ;; Hardware stack levels used:    1
  5236 ;; This function calls:
  5237 ;;		Nothing
  5238 ;; This function is called by:
  5239 ;;		_main
  5240 ;; This function uses a non-reentrant model
  5241 ;;
  5242                           
  5243                           	psect	text27
  5244  00E82C                     __ptext27:
  5245                           	opt stack 0
  5246  00E82C                     _FPGARegs_Init:
  5247                           	opt stack 30
  5248                           
  5249                           ;fpgaRegs.c: 15: LATD = LATD & 0xBF;;
  5250                           
  5251                           ;incstack = 0
  5252                           ;incstack = 0
  5253  00E82C  508C               	movf	3980,w,c	;volatile
  5254  00E82E  0BBF               	andlw	191
  5255  00E830  6E8C               	movwf	3980,c	;volatile
  5256                           
  5257                           ;fpgaRegs.c: 16: TRISA = 0xFF;;
  5258  00E832  6892               	setf	3986,c	;volatile
  5259  00E834  0012               	return	
  5260  00E836                     __end_of_FPGARegs_Init:
  5261                           	opt stack 0
  5262                           tblptru	equ	0xFF8
  5263                           tblptrh	equ	0xFF7
  5264                           tblptrl	equ	0xFF6
  5265                           tablat	equ	0xFF5
  5266                           prodh	equ	0xFF4
  5267                           prodl	equ	0xFF3
  5268                           intcon	equ	0xFF2
  5269                           postinc0	equ	0xFEE
  5270                           wreg	equ	0xFE8
  5271                           indf1	equ	0xFE7
  5272                           postdec1	equ	0xFE5
  5273                           fsr1h	equ	0xFE2
  5274                           fsr1l	equ	0xFE1
  5275                           indf2	equ	0xFDF
  5276                           fsr2h	equ	0xFDA
  5277                           fsr2l	equ	0xFD9
  5278                           status	equ	0xFD8
  5279                           
  5280 ;; *************** function _SPIMemory_WriteStatus *****************
  5281 ;; Defined at:
  5282 ;;		line 193 in file "spiMemory.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;  stat            1    2[COMRAM] unsigned char 
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;		None
  5287 ;; Return value:  Size  Location     Type
  5288 ;;		None               void
  5289 ;; Registers used:
  5290 ;;		wreg, status,2, status,0, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5296 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5298 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5299 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5300 ;;Total ram usage:        2 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    1
  5303 ;; This function calls:
  5304 ;;		_SPIMemory_SetCS
  5305 ;;		_SPIMemory_UnsetCS
  5306 ;;		_SPIMemory_DoWrite
  5307 ;; This function is called by:
  5308 ;;		_main
  5309 ;; This function uses a non-reentrant model
  5310 ;;
  5311                           
  5312                           	psect	text28
  5313  00E9F2                     __ptext28:
  5314                           	opt stack 0
  5315  00E9F2                     _SPIMemory_WriteStatus:
  5316                           	opt stack 29
  5317                           
  5318                           ;spiMemory.c: 194: SPIMemory_UnsetCS();
  5319                           
  5320                           ;incstack = 0
  5321                           ;incstack = 0
  5322  00E9F2  EC03  F074         	call	_SPIMemory_UnsetCS	;wreg free
  5323                           
  5324                           ;spiMemory.c: 195: SPIMemory_DoWrite(0x01);
  5325  00E9F6  6E04               	movwf	??_SPIMemory_WriteStatus& (0+255),c
  5326  00E9F8  0E01               	movlw	1
  5327  00E9FA  6E01               	movwf	?_SPIMemory_DoWrite,c
  5328  00E9FC  5004               	movf	??_SPIMemory_WriteStatus& (0+255),w,c
  5329  00E9FE  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  5330                           
  5331                           ;spiMemory.c: 196: SPIMemory_DoWrite(stat);
  5332  00EA02  C003  F001         	movff	SPIMemory_WriteStatus@stat,?_SPIMemory_DoWrite
  5333  00EA06  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  5334                           
  5335                           ;spiMemory.c: 198: while ((PIR1 & 0x08) == 0) asm("nop");
  5336  00EA0A  D001               	goto	l331
  5337  00EA0C                     l332:
  5338  00EA0C  F000               	nop		;# 
  5339  00EA0E                     l331:
  5340  00EA0E  A69E               	btfss	3998,3,c	;volatile
  5341  00EA10  D7FD               	goto	l332
  5342                           
  5343                           ;spiMemory.c: 200: SPIMemory_SetCS();
  5344  00EA12  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  5345  00EA16  0012               	return	
  5346  00EA18                     __end_of_SPIMemory_WriteStatus:
  5347                           	opt stack 0
  5348                           tblptru	equ	0xFF8
  5349                           tblptrh	equ	0xFF7
  5350                           tblptrl	equ	0xFF6
  5351                           tablat	equ	0xFF5
  5352                           prodh	equ	0xFF4
  5353                           prodl	equ	0xFF3
  5354                           intcon	equ	0xFF2
  5355                           postinc0	equ	0xFEE
  5356                           wreg	equ	0xFE8
  5357                           indf1	equ	0xFE7
  5358                           postdec1	equ	0xFE5
  5359                           fsr1h	equ	0xFE2
  5360                           fsr1l	equ	0xFE1
  5361                           indf2	equ	0xFDF
  5362                           fsr2h	equ	0xFDA
  5363                           fsr2l	equ	0xFD9
  5364                           status	equ	0xFD8
  5365                           
  5366 ;; *************** function _SPIMemory_WriteEnable *****************
  5367 ;; Defined at:
  5368 ;;		line 140 in file "spiMemory.c"
  5369 ;; Parameters:    Size  Location     Type
  5370 ;;		None
  5371 ;; Auto vars:     Size  Location     Type
  5372 ;;		None
  5373 ;; Return value:  Size  Location     Type
  5374 ;;		None               void
  5375 ;; Registers used:
  5376 ;;		wreg, status,2, status,0, cstack
  5377 ;; Tracked objects:
  5378 ;;		On entry : 0/0
  5379 ;;		On exit  : 0/0
  5380 ;;		Unchanged: 0/0
  5381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;Total ram usage:        1 bytes
  5387 ;; Hardware stack levels used:    1
  5388 ;; Hardware stack levels required when called:    1
  5389 ;; This function calls:
  5390 ;;		_SPIMemory_SetCS
  5391 ;;		_SPIMemory_UnsetCS
  5392 ;;		_SPIMemory_DoWrite
  5393 ;; This function is called by:
  5394 ;;		_main
  5395 ;; This function uses a non-reentrant model
  5396 ;;
  5397                           
  5398                           	psect	text29
  5399  00E954                     __ptext29:
  5400                           	opt stack 0
  5401  00E954                     _SPIMemory_WriteEnable:
  5402                           	opt stack 29
  5403                           
  5404                           ;spiMemory.c: 141: SPIMemory_UnsetCS();
  5405                           
  5406                           ;incstack = 0
  5407                           ;incstack = 0
  5408  00E954  EC03  F074         	call	_SPIMemory_UnsetCS	;wreg free
  5409                           
  5410                           ;spiMemory.c: 142: SPIMemory_DoWrite(0x06);
  5411  00E958  6E03               	movwf	??_SPIMemory_WriteEnable& (0+255),c
  5412  00E95A  0E06               	movlw	6
  5413  00E95C  6E01               	movwf	?_SPIMemory_DoWrite,c
  5414  00E95E  5003               	movf	??_SPIMemory_WriteEnable& (0+255),w,c
  5415  00E960  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  5416                           
  5417                           ;spiMemory.c: 144: while ((PIR1 & 0x08) == 0) asm("nop");
  5418  00E964  D001               	goto	l313
  5419  00E966                     l314:
  5420  00E966  F000               	nop		;# 
  5421  00E968                     l313:
  5422  00E968  A69E               	btfss	3998,3,c	;volatile
  5423  00E96A  D7FD               	goto	l314
  5424                           
  5425                           ;spiMemory.c: 146: SPIMemory_SetCS();
  5426  00E96C  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  5427  00E970  0012               	return	
  5428  00E972                     __end_of_SPIMemory_WriteEnable:
  5429                           	opt stack 0
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodh	equ	0xFF4
  5435                           prodl	equ	0xFF3
  5436                           intcon	equ	0xFF2
  5437                           postinc0	equ	0xFEE
  5438                           wreg	equ	0xFE8
  5439                           indf1	equ	0xFE7
  5440                           postdec1	equ	0xFE5
  5441                           fsr1h	equ	0xFE2
  5442                           fsr1l	equ	0xFE1
  5443                           indf2	equ	0xFDF
  5444                           fsr2h	equ	0xFDA
  5445                           fsr2l	equ	0xFD9
  5446                           status	equ	0xFD8
  5447                           
  5448 ;; *************** function _SPIMemory_DoWrite *****************
  5449 ;; Defined at:
  5450 ;;		line 90 in file "spiMemory.c"
  5451 ;; Parameters:    Size  Location     Type
  5452 ;;  d               1    0[COMRAM] unsigned char 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  tmp             1    1[COMRAM] unsigned char 
  5455 ;; Return value:  Size  Location     Type
  5456 ;;		None               void
  5457 ;; Registers used:
  5458 ;;		wreg, status,2, status,0
  5459 ;; Tracked objects:
  5460 ;;		On entry : 0/0
  5461 ;;		On exit  : 0/0
  5462 ;;		Unchanged: 0/0
  5463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5464 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;Total ram usage:        2 bytes
  5469 ;; Hardware stack levels used:    1
  5470 ;; This function calls:
  5471 ;;		Nothing
  5472 ;; This function is called by:
  5473 ;;		_SPIMemory_WriteEnable
  5474 ;;		_SPIMemory_WriteDisable
  5475 ;;		_SPIMemory_ReadId
  5476 ;;		_SPIMemory_ReadStatus
  5477 ;;		_SPIMemory_WriteStatus
  5478 ;;		_SPIMemory_ReadData
  5479 ;;		_SPIMemory_PageProgram
  5480 ;;		_SPIMemory_SectorErase
  5481 ;;		_SPIMemory_BulkErase
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           	psect	text30
  5486  00E8D0                     __ptext30:
  5487                           	opt stack 0
  5488  00E8D0                     _SPIMemory_DoWrite:
  5489                           	opt stack 29
  5490                           
  5491                           ;spiMemory.c: 109: unsigned char tmp;
  5492                           ;spiMemory.c: 112: while ((PIR1 & 0x08) == 0) asm("nop");
  5493                           
  5494                           ;incstack = 0
  5495                           ;incstack = 0
  5496  00E8D0  D001               	goto	l304
  5497  00E8D2                     l305:
  5498  00E8D2  F000               	nop		;# 
  5499  00E8D4                     l304:
  5500  00E8D4  A69E               	btfss	3998,3,c	;volatile
  5501  00E8D6  D7FD               	goto	l305
  5502                           
  5503                           ;spiMemory.c: 113: PIR1 = PIR1 & 0xF7;
  5504  00E8D8  509E               	movf	3998,w,c	;volatile
  5505  00E8DA  0BF7               	andlw	247
  5506  00E8DC  6E9E               	movwf	3998,c	;volatile
  5507                           
  5508                           ;spiMemory.c: 116: tmp = SSP1BUF;
  5509  00E8DE  CFC9 F002          	movff	4041,SPIMemory_DoWrite@tmp	;volatile
  5510                           
  5511                           ;spiMemory.c: 119: SSP1BUF = d;
  5512  00E8E2  C001  FFC9         	movff	SPIMemory_DoWrite@d,4041	;volatile
  5513  00E8E6  0012               	return	
  5514  00E8E8                     __end_of_SPIMemory_DoWrite:
  5515                           	opt stack 0
  5516                           tblptru	equ	0xFF8
  5517                           tblptrh	equ	0xFF7
  5518                           tblptrl	equ	0xFF6
  5519                           tablat	equ	0xFF5
  5520                           prodh	equ	0xFF4
  5521                           prodl	equ	0xFF3
  5522                           intcon	equ	0xFF2
  5523                           postinc0	equ	0xFEE
  5524                           wreg	equ	0xFE8
  5525                           indf1	equ	0xFE7
  5526                           postdec1	equ	0xFE5
  5527                           fsr1h	equ	0xFE2
  5528                           fsr1l	equ	0xFE1
  5529                           indf2	equ	0xFDF
  5530                           fsr2h	equ	0xFDA
  5531                           fsr2l	equ	0xFD9
  5532                           status	equ	0xFD8
  5533                           
  5534 ;; *************** function _SPIMemory_UnsetCS *****************
  5535 ;; Defined at:
  5536 ;;		line 26 in file "spiMemory.c"
  5537 ;; Parameters:    Size  Location     Type
  5538 ;;		None
  5539 ;; Auto vars:     Size  Location     Type
  5540 ;;		None
  5541 ;; Return value:  Size  Location     Type
  5542 ;;		None               void
  5543 ;; Registers used:
  5544 ;;		wreg, status,2, status,0
  5545 ;; Tracked objects:
  5546 ;;		On entry : 0/0
  5547 ;;		On exit  : 0/0
  5548 ;;		Unchanged: 0/0
  5549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;Total ram usage:        0 bytes
  5555 ;; Hardware stack levels used:    1
  5556 ;; This function calls:
  5557 ;;		Nothing
  5558 ;; This function is called by:
  5559 ;;		_SPIMemory_WriteEnable
  5560 ;;		_SPIMemory_WriteDisable
  5561 ;;		_SPIMemory_ReadId
  5562 ;;		_SPIMemory_ReadStatus
  5563 ;;		_SPIMemory_WriteStatus
  5564 ;;		_SPIMemory_ReadData
  5565 ;;		_SPIMemory_PageProgram
  5566 ;;		_SPIMemory_SectorErase
  5567 ;;		_SPIMemory_BulkErase
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text31
  5572  00E806                     __ptext31:
  5573                           	opt stack 0
  5574  00E806                     _SPIMemory_UnsetCS:
  5575                           	opt stack 29
  5576                           
  5577                           ;spiMemory.c: 27: LATC = LATC & 0xFE;
  5578                           
  5579                           ;incstack = 0
  5580                           ;incstack = 0
  5581  00E806  508B               	movf	3979,w,c	;volatile
  5582  00E808  0BFE               	andlw	254
  5583  00E80A  6E8B               	movwf	3979,c	;volatile
  5584  00E80C  0012               	return	
  5585  00E80E                     __end_of_SPIMemory_UnsetCS:
  5586                           	opt stack 0
  5587                           tblptru	equ	0xFF8
  5588                           tblptrh	equ	0xFF7
  5589                           tblptrl	equ	0xFF6
  5590                           tablat	equ	0xFF5
  5591                           prodh	equ	0xFF4
  5592                           prodl	equ	0xFF3
  5593                           intcon	equ	0xFF2
  5594                           postinc0	equ	0xFEE
  5595                           wreg	equ	0xFE8
  5596                           indf1	equ	0xFE7
  5597                           postdec1	equ	0xFE5
  5598                           fsr1h	equ	0xFE2
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           fsr2h	equ	0xFDA
  5602                           fsr2l	equ	0xFD9
  5603                           status	equ	0xFD8
  5604                           
  5605 ;; *************** function _SPIMemory_Init *****************
  5606 ;; Defined at:
  5607 ;;		line 125 in file "spiMemory.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;		None
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;		None
  5612 ;; Return value:  Size  Location     Type
  5613 ;;		None               void
  5614 ;; Registers used:
  5615 ;;		wreg, status,2, status,0, cstack
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;Total ram usage:        0 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    1
  5628 ;; This function calls:
  5629 ;;		_SPIMemory_SetHold
  5630 ;;		_SPIMemory_SetCS
  5631 ;; This function is called by:
  5632 ;;		_main
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           	psect	text32
  5637  00E8B8                     __ptext32:
  5638                           	opt stack 0
  5639  00E8B8                     _SPIMemory_Init:
  5640                           	opt stack 29
  5641                           
  5642                           ;spiMemory.c: 126: SPIMemory_SetCS();
  5643                           
  5644                           ;incstack = 0
  5645                           ;incstack = 0
  5646  00E8B8  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  5647                           
  5648                           ;spiMemory.c: 127: SPIMemory_SetHold();
  5649  00E8BC  ECFB  F073         	call	_SPIMemory_SetHold	;wreg free
  5650                           
  5651                           ;spiMemory.c: 133: SSP1STAT = 0x80;
  5652  00E8C0  0E80               	movlw	128
  5653  00E8C2  6EC7               	movwf	4039,c	;volatile
  5654                           
  5655                           ;spiMemory.c: 134: SSP1CON1 = 0x31;
  5656  00E8C4  0E31               	movlw	49
  5657  00E8C6  6EC6               	movwf	4038,c	;volatile
  5658                           
  5659                           ;spiMemory.c: 135: PIR1 = PIR1 | 0x08;
  5660  00E8C8  509E               	movf	3998,w,c	;volatile
  5661  00E8CA  0908               	iorlw	8
  5662  00E8CC  6E9E               	movwf	3998,c	;volatile
  5663  00E8CE  0012               	return	
  5664  00E8D0                     __end_of_SPIMemory_Init:
  5665                           	opt stack 0
  5666                           tblptru	equ	0xFF8
  5667                           tblptrh	equ	0xFF7
  5668                           tblptrl	equ	0xFF6
  5669                           tablat	equ	0xFF5
  5670                           prodh	equ	0xFF4
  5671                           prodl	equ	0xFF3
  5672                           intcon	equ	0xFF2
  5673                           postinc0	equ	0xFEE
  5674                           wreg	equ	0xFE8
  5675                           indf1	equ	0xFE7
  5676                           postdec1	equ	0xFE5
  5677                           fsr1h	equ	0xFE2
  5678                           fsr1l	equ	0xFE1
  5679                           indf2	equ	0xFDF
  5680                           fsr2h	equ	0xFDA
  5681                           fsr2l	equ	0xFD9
  5682                           status	equ	0xFD8
  5683                           
  5684 ;; *************** function _SPIMemory_SetCS *****************
  5685 ;; Defined at:
  5686 ;;		line 21 in file "spiMemory.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;		None               void
  5693 ;; Registers used:
  5694 ;;		wreg, status,2, status,0
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;Total ram usage:        0 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; This function calls:
  5707 ;;		Nothing
  5708 ;; This function is called by:
  5709 ;;		_SPIMemory_Init
  5710 ;;		_SPIMemory_WriteEnable
  5711 ;;		_SPIMemory_WriteDisable
  5712 ;;		_SPIMemory_ReadId
  5713 ;;		_SPIMemory_ReadStatus
  5714 ;;		_SPIMemory_WriteStatus
  5715 ;;		_SPIMemory_ReadData
  5716 ;;		_SPIMemory_PageProgram
  5717 ;;		_SPIMemory_SectorErase
  5718 ;;		_SPIMemory_BulkErase
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text33
  5723  00E7FE                     __ptext33:
  5724                           	opt stack 0
  5725  00E7FE                     _SPIMemory_SetCS:
  5726                           	opt stack 29
  5727                           
  5728                           ;spiMemory.c: 22: LATC = LATC | 0x01;
  5729                           
  5730                           ;incstack = 0
  5731                           ;incstack = 0
  5732  00E7FE  508B               	movf	3979,w,c	;volatile
  5733  00E800  0901               	iorlw	1
  5734  00E802  6E8B               	movwf	3979,c	;volatile
  5735  00E804  0012               	return	
  5736  00E806                     __end_of_SPIMemory_SetCS:
  5737                           	opt stack 0
  5738                           tblptru	equ	0xFF8
  5739                           tblptrh	equ	0xFF7
  5740                           tblptrl	equ	0xFF6
  5741                           tablat	equ	0xFF5
  5742                           prodh	equ	0xFF4
  5743                           prodl	equ	0xFF3
  5744                           intcon	equ	0xFF2
  5745                           postinc0	equ	0xFEE
  5746                           wreg	equ	0xFE8
  5747                           indf1	equ	0xFE7
  5748                           postdec1	equ	0xFE5
  5749                           fsr1h	equ	0xFE2
  5750                           fsr1l	equ	0xFE1
  5751                           indf2	equ	0xFDF
  5752                           fsr2h	equ	0xFDA
  5753                           fsr2l	equ	0xFD9
  5754                           status	equ	0xFD8
  5755                           
  5756 ;; *************** function _SPIMemory_SetHold *****************
  5757 ;; Defined at:
  5758 ;;		line 11 in file "spiMemory.c"
  5759 ;; Parameters:    Size  Location     Type
  5760 ;;		None
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;		None
  5763 ;; Return value:  Size  Location     Type
  5764 ;;		None               void
  5765 ;; Registers used:
  5766 ;;		wreg, status,2, status,0
  5767 ;; Tracked objects:
  5768 ;;		On entry : 0/0
  5769 ;;		On exit  : 0/0
  5770 ;;		Unchanged: 0/0
  5771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5776 ;;Total ram usage:        0 bytes
  5777 ;; Hardware stack levels used:    1
  5778 ;; This function calls:
  5779 ;;		Nothing
  5780 ;; This function is called by:
  5781 ;;		_SPIMemory_Init
  5782 ;; This function uses a non-reentrant model
  5783 ;;
  5784                           
  5785                           	psect	text34
  5786  00E7F6                     __ptext34:
  5787                           	opt stack 0
  5788  00E7F6                     _SPIMemory_SetHold:
  5789                           	opt stack 29
  5790                           
  5791                           ;spiMemory.c: 12: LATC = LATC | 0x02;
  5792                           
  5793                           ;incstack = 0
  5794                           ;incstack = 0
  5795  00E7F6  508B               	movf	3979,w,c	;volatile
  5796  00E7F8  0902               	iorlw	2
  5797  00E7FA  6E8B               	movwf	3979,c	;volatile
  5798  00E7FC  0012               	return	
  5799  00E7FE                     __end_of_SPIMemory_SetHold:
  5800                           	opt stack 0
  5801                           tblptru	equ	0xFF8
  5802                           tblptrh	equ	0xFF7
  5803                           tblptrl	equ	0xFF6
  5804                           tablat	equ	0xFF5
  5805                           prodh	equ	0xFF4
  5806                           prodl	equ	0xFF3
  5807                           intcon	equ	0xFF2
  5808                           postinc0	equ	0xFEE
  5809                           wreg	equ	0xFE8
  5810                           indf1	equ	0xFE7
  5811                           postdec1	equ	0xFE5
  5812                           fsr1h	equ	0xFE2
  5813                           fsr1l	equ	0xFE1
  5814                           indf2	equ	0xFDF
  5815                           fsr2h	equ	0xFDA
  5816                           fsr2l	equ	0xFD9
  5817                           status	equ	0xFD8
  5818                           
  5819 ;; *************** function _SerialTerm_Init *****************
  5820 ;; Defined at:
  5821 ;;		line 9 in file "serialTerminal.c"
  5822 ;; Parameters:    Size  Location     Type
  5823 ;;		None
  5824 ;; Auto vars:     Size  Location     Type
  5825 ;;		None
  5826 ;; Return value:  Size  Location     Type
  5827 ;;		None               void
  5828 ;; Registers used:
  5829 ;;		wreg, status,2
  5830 ;; Tracked objects:
  5831 ;;		On entry : 0/0
  5832 ;;		On exit  : 0/0
  5833 ;;		Unchanged: 0/0
  5834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;Total ram usage:        0 bytes
  5840 ;; Hardware stack levels used:    1
  5841 ;; This function calls:
  5842 ;;		Nothing
  5843 ;; This function is called by:
  5844 ;;		_main
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text35
  5849  00E822                     __ptext35:
  5850                           	opt stack 0
  5851  00E822                     _SerialTerm_Init:
  5852                           	opt stack 30
  5853                           
  5854                           ;serialTerminal.c: 10: inputBufferPos = 0;
  5855                           
  5856                           ;incstack = 0
  5857                           ;incstack = 0
  5858  00E822  0E00               	movlw	0
  5859  00E824  6E29               	movwf	_inputBufferPos+1,c
  5860  00E826  0E00               	movlw	0
  5861  00E828  6E28               	movwf	_inputBufferPos,c
  5862  00E82A  0012               	return	
  5863  00E82C                     __end_of_SerialTerm_Init:
  5864                           	opt stack 0
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           intcon	equ	0xFF2
  5872                           postinc0	equ	0xFEE
  5873                           wreg	equ	0xFE8
  5874                           indf1	equ	0xFE7
  5875                           postdec1	equ	0xFE5
  5876                           fsr1h	equ	0xFE2
  5877                           fsr1l	equ	0xFE1
  5878                           indf2	equ	0xFDF
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function _PeripheralInit *****************
  5884 ;; Defined at:
  5885 ;;		line 4 in file "init.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;		None
  5888 ;; Auto vars:     Size  Location     Type
  5889 ;;		None
  5890 ;; Return value:  Size  Location     Type
  5891 ;;		None               void
  5892 ;; Registers used:
  5893 ;;		wreg, status,2
  5894 ;; Tracked objects:
  5895 ;;		On entry : 0/0
  5896 ;;		On exit  : 0/0
  5897 ;;		Unchanged: 0/0
  5898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;Total ram usage:        0 bytes
  5904 ;; Hardware stack levels used:    1
  5905 ;; This function calls:
  5906 ;;		Nothing
  5907 ;; This function is called by:
  5908 ;;		_main
  5909 ;; This function uses a non-reentrant model
  5910 ;;
  5911                           
  5912                           	psect	text36
  5913  00EE04                     __ptext36:
  5914                           	opt stack 0
  5915  00EE04                     _PeripheralInit:
  5916                           	opt stack 30
  5917                           
  5918                           ;init.c: 56: ANSELA = 0x00;
  5919                           
  5920                           ;incstack = 0
  5921                           ;incstack = 0
  5922  00EE04  0E00               	movlw	0
  5923  00EE06  010F               	movlb	15	; () banked
  5924  00EE08  010F               	movlb	15	; () banked
  5925  00EE0A  6F38               	movwf	56,b	;volatile
  5926                           
  5927                           ;init.c: 57: ANSELB = 0x00;
  5928  00EE0C  0E00               	movlw	0
  5929  00EE0E  010F               	movlb	15	; () banked
  5930  00EE10  010F               	movlb	15	; () banked
  5931  00EE12  6F39               	movwf	57,b	;volatile
  5932                           
  5933                           ;init.c: 58: ANSELC = 0x00;
  5934  00EE14  0E00               	movlw	0
  5935  00EE16  010F               	movlb	15	; () banked
  5936  00EE18  010F               	movlb	15	; () banked
  5937  00EE1A  6F3A               	movwf	58,b	;volatile
  5938                           
  5939                           ;init.c: 59: ANSELD = 0x00;
  5940  00EE1C  0E00               	movlw	0
  5941  00EE1E  010F               	movlb	15	; () banked
  5942  00EE20  010F               	movlb	15	; () banked
  5943  00EE22  6F3B               	movwf	59,b	;volatile
  5944                           
  5945                           ;init.c: 60: ANSELE = 0x00;
  5946  00EE24  0E00               	movlw	0
  5947  00EE26  010F               	movlb	15	; () banked
  5948  00EE28  010F               	movlb	15	; () banked
  5949  00EE2A  6F3C               	movwf	60,b	;volatile
  5950                           
  5951                           ; BSR set to: 15
  5952                           ;init.c: 64: TRISA = 0xFF;
  5953  00EE2C  6892               	setf	3986,c	;volatile
  5954                           
  5955                           ;init.c: 65: TRISB = 0xF3;
  5956  00EE2E  0EF3               	movlw	243
  5957  00EE30  6E93               	movwf	3987,c	;volatile
  5958                           
  5959                           ;init.c: 66: TRISC = 0xD4;
  5960  00EE32  0ED4               	movlw	212
  5961  00EE34  6E94               	movwf	3988,c	;volatile
  5962                           
  5963                           ;init.c: 67: TRISD = 0x28;
  5964  00EE36  0E28               	movlw	40
  5965  00EE38  6E95               	movwf	3989,c	;volatile
  5966                           
  5967                           ;init.c: 68: TRISE = 0xFE;
  5968  00EE3A  0EFE               	movlw	254
  5969  00EE3C  6E96               	movwf	3990,c	;volatile
  5970                           
  5971                           ;init.c: 72: LATA = 0x00;
  5972  00EE3E  0E00               	movlw	0
  5973  00EE40  6E89               	movwf	3977,c	;volatile
  5974                           
  5975                           ;init.c: 73: LATB = 0x00;
  5976  00EE42  0E00               	movlw	0
  5977  00EE44  6E8A               	movwf	3978,c	;volatile
  5978                           
  5979                           ;init.c: 74: LATC = 0x03;
  5980  00EE46  0E03               	movlw	3
  5981  00EE48  6E8B               	movwf	3979,c	;volatile
  5982                           
  5983                           ;init.c: 75: LATD = 0x06;
  5984  00EE4A  0E06               	movlw	6
  5985  00EE4C  6E8C               	movwf	3980,c	;volatile
  5986                           
  5987                           ;init.c: 76: LATE = 0x00;
  5988  00EE4E  0E00               	movlw	0
  5989  00EE50  6E8D               	movwf	3981,c	;volatile
  5990                           
  5991                           ;init.c: 88: OSCCON = 0x70;
  5992  00EE52  0E70               	movlw	112
  5993  00EE54  6ED3               	movwf	4051,c	;volatile
  5994                           
  5995                           ;init.c: 89: OSCTUNE = 0x40;
  5996  00EE56  0E40               	movlw	64
  5997  00EE58  6E9B               	movwf	3995,c	;volatile
  5998                           
  5999                           ;init.c: 114: SPBRGH1 = 0x00;
  6000  00EE5A  0E00               	movlw	0
  6001  00EE5C  6EB0               	movwf	4016,c	;volatile
  6002                           
  6003                           ;init.c: 115: SPBRG1 = 0x8A;
  6004  00EE5E  0E8A               	movlw	138
  6005  00EE60  6EAF               	movwf	4015,c	;volatile
  6006                           
  6007                           ;init.c: 117: BAUDCON1 = 0x48;
  6008  00EE62  0E48               	movlw	72
  6009  00EE64  6EB8               	movwf	4024,c	;volatile
  6010                           
  6011                           ;init.c: 118: TXSTA1 = 0x26;
  6012  00EE66  0E26               	movlw	38
  6013  00EE68  6EAC               	movwf	4012,c	;volatile
  6014                           
  6015                           ;init.c: 119: RCSTA1 = 0x80;
  6016  00EE6A  0E80               	movlw	128
  6017  00EE6C  6EAB               	movwf	4011,c	;volatile
  6018                           
  6019                           ;init.c: 120: RCSTA1 = 0x90;
  6020  00EE6E  0E90               	movlw	144
  6021  00EE70  6EAB               	movwf	4011,c	;volatile
  6022                           
  6023                           ; BSR set to: 15
  6024  00EE72  0012               	return	
  6025  00EE74                     __end_of_PeripheralInit:
  6026                           	opt stack 0
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           intcon	equ	0xFF2
  6034                           postinc0	equ	0xFEE
  6035                           wreg	equ	0xFE8
  6036                           indf1	equ	0xFE7
  6037                           postdec1	equ	0xFE5
  6038                           fsr1h	equ	0xFE2
  6039                           fsr1l	equ	0xFE1
  6040                           indf2	equ	0xFDF
  6041                           fsr2h	equ	0xFDA
  6042                           fsr2l	equ	0xFD9
  6043                           status	equ	0xFD8
  6044                           
  6045 ;; *************** function _LoadFPGA *****************
  6046 ;; Defined at:
  6047 ;;		line 94 in file "main.c"
  6048 ;; Parameters:    Size  Location     Type
  6049 ;;  endAddr         3   11[COMRAM] unsigned um
  6050 ;; Auto vars:     Size  Location     Type
  6051 ;;  currAddr        3   17[COMRAM] unsigned um
  6052 ;;  m               2   22[COMRAM] unsigned int 
  6053 ;;  n               2   20[COMRAM] unsigned int 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;		None               void
  6056 ;; Registers used:
  6057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6063 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;Total ram usage:       13 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    2
  6070 ;; This function calls:
  6071 ;;		_FPGA_DoWrite
  6072 ;;		_FPGA_EndConfig
  6073 ;;		_FPGA_BeginConfig
  6074 ;;		_SPIMemory_ReadData
  6075 ;; This function is called by:
  6076 ;;		_main
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text37
  6081  00F000                     __ptext37:
  6082                           	opt stack 0
  6083  00F000                     _LoadFPGA:
  6084                           	opt stack 28
  6085                           
  6086                           ;main.c: 95: unsigned int n, m;
  6087                           ;main.c: 96: unsigned short long currAddr;
  6088                           ;main.c: 98: currAddr = 0;
  6089                           
  6090                           ; BSR set to: 15
  6091                           ;incstack = 0
  6092                           ;incstack = 0
  6093  00F000  0E00               	movlw	0
  6094  00F002  6E12               	movwf	LoadFPGA@currAddr,c
  6095  00F004  0E00               	movlw	0
  6096  00F006  6E13               	movwf	LoadFPGA@currAddr+1,c
  6097  00F008  0E00               	movlw	0
  6098  00F00A  6E14               	movwf	LoadFPGA@currAddr+2,c
  6099                           
  6100                           ;main.c: 100: FPGA_BeginConfig();
  6101  00F00C  EC9B  F074         	call	_FPGA_BeginConfig	;wreg free
  6102                           
  6103                           ;main.c: 102: for (n = 0; n < 0x7FF; n++)
  6104  00F010  0E00               	movlw	0
  6105  00F012  6E16               	movwf	LoadFPGA@n+1,c
  6106  00F014  0E00               	movlw	0
  6107  00F016  6E15               	movwf	LoadFPGA@n,c
  6108  00F018  0EFF               	movlw	255
  6109  00F01A  5C15               	subwf	LoadFPGA@n,w,c
  6110  00F01C  0E07               	movlw	7
  6111  00F01E  5816               	subwfb	LoadFPGA@n+1,w,c
  6112  00F020  B0D8               	btfsc	status,0,c
  6113  00F022  D044               	goto	l2985
  6114                           
  6115                           ;main.c: 103: {
  6116                           ;main.c: 104: SPIMemory_ReadData((unsigned short long)n << 8);
  6117  00F024  C015  F00F         	movff	LoadFPGA@n,??_LoadFPGA
  6118  00F028  C016  F010         	movff	LoadFPGA@n+1,??_LoadFPGA+1
  6119  00F02C  6A11               	clrf	(??_LoadFPGA+2)& (0+255),c
  6120  00F02E  C010  F011         	movff	??_LoadFPGA+1,??_LoadFPGA+2
  6121  00F032  C00F  F010         	movff	??_LoadFPGA,??_LoadFPGA+1
  6122  00F036  6A0F               	clrf	??_LoadFPGA,c
  6123  00F038  C011  F005         	movff	??_LoadFPGA+2,?_SPIMemory_ReadData+2
  6124  00F03C  C010  F004         	movff	??_LoadFPGA+1,?_SPIMemory_ReadData+1
  6125  00F040  C00F  F003         	movff	??_LoadFPGA,?_SPIMemory_ReadData
  6126  00F044  EC78  F077         	call	_SPIMemory_ReadData	;wreg free
  6127                           
  6128                           ;main.c: 105: for (m = 0; m < 256; m++)
  6129  00F048  0E00               	movlw	0
  6130  00F04A  6E18               	movwf	LoadFPGA@m+1,c
  6131  00F04C  0E00               	movlw	0
  6132  00F04E  6E17               	movwf	LoadFPGA@m,c
  6133  00F050  0E00               	movlw	0
  6134  00F052  5C17               	subwf	LoadFPGA@m,w,c
  6135  00F054  0E01               	movlw	1
  6136  00F056  5818               	subwfb	LoadFPGA@m+1,w,c
  6137  00F058  B0D8               	btfsc	status,0,c
  6138  00F05A  D01D               	goto	l2977
  6139                           
  6140                           ;main.c: 106: {
  6141                           ;main.c: 107: FPGA_DoWrite(dataBuffer[m]);
  6142  00F05C  0101               	movlb	1	; () banked
  6143  00F05E  0E00               	movlw	low _dataBuffer	;volatile
  6144  00F060  2417               	addwf	LoadFPGA@m,w,c
  6145  00F062  6ED9               	movwf	fsr2l,c
  6146  00F064  0101               	movlb	1	; () banked
  6147  00F066  0E01               	movlw	high _dataBuffer	;volatile
  6148  00F068  2018               	addwfc	LoadFPGA@m+1,w,c
  6149  00F06A  6EDA               	movwf	fsr2h,c
  6150  00F06C  50DF               	movf	indf2,w,c
  6151  00F06E  6E01               	movwf	?_FPGA_DoWrite,c
  6152  00F070  EC50  F074         	call	_FPGA_DoWrite	;wreg free
  6153                           
  6154                           ;main.c: 108: currAddr ++;
  6155  00F074  0E01               	movlw	1
  6156  00F076  2612               	addwf	LoadFPGA@currAddr,f,c
  6157  00F078  0E00               	movlw	0
  6158  00F07A  2213               	addwfc	LoadFPGA@currAddr+1,f,c
  6159  00F07C  0E00               	movlw	0
  6160  00F07E  2214               	addwfc	LoadFPGA@currAddr+2,f,c
  6161                           
  6162                           ;main.c: 109: if (currAddr >= endAddr)
  6163  00F080  500C               	movf	LoadFPGA@endAddr,w,c
  6164  00F082  5C12               	subwf	LoadFPGA@currAddr,w,c
  6165  00F084  500D               	movf	LoadFPGA@endAddr+1,w,c
  6166  00F086  5813               	subwfb	LoadFPGA@currAddr+1,w,c
  6167  00F088  500E               	movf	LoadFPGA@endAddr+2,w,c
  6168  00F08A  5814               	subwfb	LoadFPGA@currAddr+2,w,c
  6169  00F08C  B0D8               	btfsc	status,0,c
  6170  00F08E  D003               	goto	l2977
  6171                           
  6172                           ;main.c: 110: {
  6173                           ;main.c: 111: break;
  6174  00F090  4A17               	infsnz	LoadFPGA@m,f,c
  6175  00F092  2A18               	incf	LoadFPGA@m+1,f,c
  6176  00F094  D7DD               	goto	L10
  6177  00F096                     l2977:
  6178                           
  6179                           ;main.c: 112: }
  6180                           ;main.c: 113: }
  6181                           ;main.c: 114: if (currAddr >= endAddr)
  6182  00F096  500C               	movf	LoadFPGA@endAddr,w,c
  6183  00F098  5C12               	subwf	LoadFPGA@currAddr,w,c
  6184  00F09A  500D               	movf	LoadFPGA@endAddr+1,w,c
  6185  00F09C  5813               	subwfb	LoadFPGA@currAddr+1,w,c
  6186  00F09E  500E               	movf	LoadFPGA@endAddr+2,w,c
  6187  00F0A0  5814               	subwfb	LoadFPGA@currAddr+2,w,c
  6188  00F0A2  B0D8               	btfsc	status,0,c
  6189  00F0A4  D003               	goto	l2985
  6190                           
  6191                           ;main.c: 115: {
  6192                           ;main.c: 116: break;
  6193  00F0A6  4A15               	infsnz	LoadFPGA@n,f,c
  6194  00F0A8  2A16               	incf	LoadFPGA@n+1,f,c
  6195  00F0AA  D7B6               	goto	L11
  6196  00F0AC                     l2985:
  6197                           
  6198                           ;main.c: 117: }
  6199                           ;main.c: 118: }
  6200                           ;main.c: 120: FPGA_EndConfig();
  6201  00F0AC  EC2B  F076         	call	_FPGA_EndConfig	;wreg free
  6202  00F0B0  0012               	return	
  6203  00F0B2                     __end_of_LoadFPGA:
  6204                           	opt stack 0
  6205                           tblptru	equ	0xFF8
  6206                           tblptrh	equ	0xFF7
  6207                           tblptrl	equ	0xFF6
  6208                           tablat	equ	0xFF5
  6209                           prodh	equ	0xFF4
  6210                           prodl	equ	0xFF3
  6211                           intcon	equ	0xFF2
  6212                           postinc0	equ	0xFEE
  6213                           wreg	equ	0xFE8
  6214                           indf1	equ	0xFE7
  6215                           postdec1	equ	0xFE5
  6216                           fsr1h	equ	0xFE2
  6217                           fsr1l	equ	0xFE1
  6218                           indf2	equ	0xFDF
  6219                           fsr2h	equ	0xFDA
  6220                           fsr2l	equ	0xFD9
  6221                           status	equ	0xFD8
  6222                           
  6223 ;; *************** function _FPGA_BeginConfig *****************
  6224 ;; Defined at:
  6225 ;;		line 113 in file "fpga.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;		None
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;		None
  6230 ;; Return value:  Size  Location     Type
  6231 ;;		None               void
  6232 ;; Registers used:
  6233 ;;		wreg, status,2, status,0, cstack
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;Total ram usage:        0 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; Hardware stack levels required when called:    1
  6246 ;; This function calls:
  6247 ;;		_FPGA_ReadInitB
  6248 ;;		_FPGA_SetProgramB
  6249 ;;		_FPGA_UnsetProgramB
  6250 ;; This function is called by:
  6251 ;;		_LoadFPGA
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255                           	psect	text38
  6256  00E936                     __ptext38:
  6257                           	opt stack 0
  6258  00E936                     _FPGA_BeginConfig:
  6259                           	opt stack 28
  6260                           
  6261                           ;fpga.c: 114: FPGA_UnsetProgramB();
  6262                           
  6263                           ;incstack = 0
  6264                           ;incstack = 0
  6265  00E936  ECF7  F073         	call	_FPGA_UnsetProgramB	;wreg free
  6266  00E93A                     l55:
  6267                           
  6268                           ;fpga.c: 116: {
  6269                           ;fpga.c: 117: if (FPGA_ReadInitB() == 0)
  6270  00E93A  EC0C  F074         	call	_FPGA_ReadInitB	;wreg free
  6271  00E93E  0900               	iorlw	0
  6272  00E940  A4D8               	btfss	status,2,c
  6273  00E942  D7FB               	goto	l55
  6274                           
  6275                           ;fpga.c: 120: }
  6276                           ;fpga.c: 121: }
  6277                           ;fpga.c: 122: FPGA_SetProgramB();
  6278                           
  6279                           ;fpga.c: 118: {
  6280                           ;fpga.c: 119: break;
  6281  00E944  ECF3  F073         	call	_FPGA_SetProgramB	;wreg free
  6282  00E948                     l59:
  6283                           
  6284                           ;fpga.c: 124: {
  6285                           ;fpga.c: 125: if (FPGA_ReadInitB() != 0)
  6286  00E948  EC0C  F074         	call	_FPGA_ReadInitB	;wreg free
  6287  00E94C  0900               	iorlw	0
  6288  00E94E  A4D8               	btfss	status,2,c
  6289                           
  6290                           ;fpga.c: 126: {
  6291                           ;fpga.c: 127: break;
  6292  00E950  0012               	return	
  6293  00E952  D7FA               	goto	l59
  6294  00E954                     __end_of_FPGA_BeginConfig:
  6295                           	opt stack 0
  6296                           tblptru	equ	0xFF8
  6297                           tblptrh	equ	0xFF7
  6298                           tblptrl	equ	0xFF6
  6299                           tablat	equ	0xFF5
  6300                           prodh	equ	0xFF4
  6301                           prodl	equ	0xFF3
  6302                           intcon	equ	0xFF2
  6303                           postinc0	equ	0xFEE
  6304                           wreg	equ	0xFE8
  6305                           indf1	equ	0xFE7
  6306                           postdec1	equ	0xFE5
  6307                           fsr1h	equ	0xFE2
  6308                           fsr1l	equ	0xFE1
  6309                           indf2	equ	0xFDF
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function _FPGA_UnsetProgramB *****************
  6315 ;; Defined at:
  6316 ;;		line 28 in file "fpga.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;		None
  6321 ;; Return value:  Size  Location     Type
  6322 ;;		None               void
  6323 ;; Registers used:
  6324 ;;		wreg, status,2, status,0
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;Total ram usage:        0 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; This function calls:
  6337 ;;		Nothing
  6338 ;; This function is called by:
  6339 ;;		_FPGA_BeginConfig
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           	psect	text39
  6344  00E7EE                     __ptext39:
  6345                           	opt stack 0
  6346  00E7EE                     _FPGA_UnsetProgramB:
  6347                           	opt stack 28
  6348                           
  6349                           ;fpga.c: 29: LATD = LATD & 0xFB;
  6350                           
  6351                           ;incstack = 0
  6352                           ;incstack = 0
  6353  00E7EE  508C               	movf	3980,w,c	;volatile
  6354  00E7F0  0BFB               	andlw	251
  6355  00E7F2  6E8C               	movwf	3980,c	;volatile
  6356  00E7F4  0012               	return	
  6357  00E7F6                     __end_of_FPGA_UnsetProgramB:
  6358                           	opt stack 0
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           prodh	equ	0xFF4
  6364                           prodl	equ	0xFF3
  6365                           intcon	equ	0xFF2
  6366                           postinc0	equ	0xFEE
  6367                           wreg	equ	0xFE8
  6368                           indf1	equ	0xFE7
  6369                           postdec1	equ	0xFE5
  6370                           fsr1h	equ	0xFE2
  6371                           fsr1l	equ	0xFE1
  6372                           indf2	equ	0xFDF
  6373                           fsr2h	equ	0xFDA
  6374                           fsr2l	equ	0xFD9
  6375                           status	equ	0xFD8
  6376                           
  6377 ;; *************** function _FPGA_SetProgramB *****************
  6378 ;; Defined at:
  6379 ;;		line 23 in file "fpga.c"
  6380 ;; Parameters:    Size  Location     Type
  6381 ;;		None
  6382 ;; Auto vars:     Size  Location     Type
  6383 ;;		None
  6384 ;; Return value:  Size  Location     Type
  6385 ;;		None               void
  6386 ;; Registers used:
  6387 ;;		wreg, status,2, status,0
  6388 ;; Tracked objects:
  6389 ;;		On entry : 0/0
  6390 ;;		On exit  : 0/0
  6391 ;;		Unchanged: 0/0
  6392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6397 ;;Total ram usage:        0 bytes
  6398 ;; Hardware stack levels used:    1
  6399 ;; This function calls:
  6400 ;;		Nothing
  6401 ;; This function is called by:
  6402 ;;		_FPGA_BeginConfig
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text40
  6407  00E7E6                     __ptext40:
  6408                           	opt stack 0
  6409  00E7E6                     _FPGA_SetProgramB:
  6410                           	opt stack 28
  6411                           
  6412                           ;fpga.c: 24: LATD = LATD | 0x04;
  6413                           
  6414                           ;incstack = 0
  6415                           ;incstack = 0
  6416  00E7E6  508C               	movf	3980,w,c	;volatile
  6417  00E7E8  0904               	iorlw	4
  6418  00E7EA  6E8C               	movwf	3980,c	;volatile
  6419  00E7EC  0012               	return	
  6420  00E7EE                     __end_of_FPGA_SetProgramB:
  6421                           	opt stack 0
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodh	equ	0xFF4
  6427                           prodl	equ	0xFF3
  6428                           intcon	equ	0xFF2
  6429                           postinc0	equ	0xFEE
  6430                           wreg	equ	0xFE8
  6431                           indf1	equ	0xFE7
  6432                           postdec1	equ	0xFE5
  6433                           fsr1h	equ	0xFE2
  6434                           fsr1l	equ	0xFE1
  6435                           indf2	equ	0xFDF
  6436                           fsr2h	equ	0xFDA
  6437                           fsr2l	equ	0xFD9
  6438                           status	equ	0xFD8
  6439                           
  6440 ;; *************** function _FPGA_ReadInitB *****************
  6441 ;; Defined at:
  6442 ;;		line 8 in file "fpga.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;		None
  6445 ;; Auto vars:     Size  Location     Type
  6446 ;;		None
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  1    wreg      unsigned char 
  6449 ;; Registers used:
  6450 ;;		wreg, status,2, status,0
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;Total ram usage:        0 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; This function calls:
  6463 ;;		Nothing
  6464 ;; This function is called by:
  6465 ;;		_FPGA_BeginConfig
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text41
  6470  00E818                     __ptext41:
  6471                           	opt stack 0
  6472  00E818                     _FPGA_ReadInitB:
  6473                           	opt stack 28
  6474                           
  6475                           ;fpga.c: 9: return (PORTC & 0x04) >> 2;
  6476                           
  6477                           ;incstack = 0
  6478                           ;incstack = 0
  6479  00E818  4082               	rrncf	3970,w,c	;volatile
  6480  00E81A  42E8               	rrncf	wreg,f,c
  6481  00E81C  0B3F               	andlw	63
  6482  00E81E  0B01               	andlw	1
  6483  00E820  0012               	return	
  6484  00E822                     __end_of_FPGA_ReadInitB:
  6485                           	opt stack 0
  6486                           tblptru	equ	0xFF8
  6487                           tblptrh	equ	0xFF7
  6488                           tblptrl	equ	0xFF6
  6489                           tablat	equ	0xFF5
  6490                           prodh	equ	0xFF4
  6491                           prodl	equ	0xFF3
  6492                           intcon	equ	0xFF2
  6493                           postinc0	equ	0xFEE
  6494                           wreg	equ	0xFE8
  6495                           indf1	equ	0xFE7
  6496                           postdec1	equ	0xFE5
  6497                           fsr1h	equ	0xFE2
  6498                           fsr1l	equ	0xFE1
  6499                           indf2	equ	0xFDF
  6500                           fsr2h	equ	0xFDA
  6501                           fsr2l	equ	0xFD9
  6502                           status	equ	0xFD8
  6503                           
  6504 ;; *************** function _FPGA_EndConfig *****************
  6505 ;; Defined at:
  6506 ;;		line 88 in file "fpga.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;		None
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;  retryCount      2    3[COMRAM] int 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;		None               void
  6513 ;; Registers used:
  6514 ;;		wreg, status,2, status,0, cstack
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;Total ram usage:        3 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    1
  6527 ;; This function calls:
  6528 ;;		_FPGA_ReadDone
  6529 ;;		_FPGA_DoWrite
  6530 ;; This function is called by:
  6531 ;;		_LoadFPGA
  6532 ;; This function uses a non-reentrant model
  6533 ;;
  6534                           
  6535                           	psect	text42
  6536  00EC56                     __ptext42:
  6537                           	opt stack 0
  6538  00EC56                     _FPGA_EndConfig:
  6539                           	opt stack 28
  6540                           
  6541                           ;fpga.c: 89: int retryCount = 100;
  6542                           
  6543                           ;incstack = 0
  6544                           ;incstack = 0
  6545  00EC56  0E00               	movlw	0
  6546  00EC58  6E05               	movwf	FPGA_EndConfig@retryCount+1,c
  6547  00EC5A  0E64               	movlw	100
  6548  00EC5C  6E04               	movwf	FPGA_EndConfig@retryCount,c
  6549                           
  6550                           ;fpga.c: 91: while (retryCount > 0 && FPGA_ReadDone() == 0)
  6551  00EC5E  D009               	goto	l2603
  6552  00EC60                     l2599:
  6553                           
  6554                           ;fpga.c: 92: {
  6555                           ;fpga.c: 94: FPGA_DoWrite(0x00);
  6556  00EC60  6E03               	movwf	??_FPGA_EndConfig& (0+255),c
  6557  00EC62  0E00               	movlw	0
  6558  00EC64  6E01               	movwf	?_FPGA_DoWrite,c
  6559  00EC66  5003               	movf	??_FPGA_EndConfig& (0+255),w,c
  6560  00EC68  EC50  F074         	call	_FPGA_DoWrite	;wreg free
  6561                           
  6562                           ;fpga.c: 99: retryCount --;
  6563  00EC6C  0604               	decf	FPGA_EndConfig@retryCount,f,c
  6564  00EC6E  A0D8               	btfss	status,0,c
  6565  00EC70  0605               	decf	FPGA_EndConfig@retryCount+1,f,c
  6566  00EC72                     l2603:
  6567  00EC72  5005               	movf	FPGA_EndConfig@retryCount+1,w,c
  6568  00EC74  0A80               	xorlw	128
  6569  00EC76  0F80               	addlw	-128
  6570  00EC78  0E01               	movlw	1
  6571  00EC7A  B4D8               	btfsc	status,2,c
  6572  00EC7C  5C04               	subwf	FPGA_EndConfig@retryCount,w,c
  6573  00EC7E  A0D8               	btfss	status,0,c
  6574  00EC80  D005               	goto	l2607
  6575  00EC82  EC07  F074         	call	_FPGA_ReadDone	;wreg free
  6576  00EC86  0900               	iorlw	0
  6577  00EC88  B4D8               	btfsc	status,2,c
  6578  00EC8A  D7EA               	goto	l2599
  6579  00EC8C                     l2607:
  6580                           
  6581                           ;fpga.c: 100: }
  6582                           ;fpga.c: 108: SSP2CON1 = 0x01;
  6583  00EC8C  0E01               	movlw	1
  6584  00EC8E  6E6C               	movwf	3948,c	;volatile
  6585  00EC90  0012               	return	
  6586  00EC92                     __end_of_FPGA_EndConfig:
  6587                           	opt stack 0
  6588                           tblptru	equ	0xFF8
  6589                           tblptrh	equ	0xFF7
  6590                           tblptrl	equ	0xFF6
  6591                           tablat	equ	0xFF5
  6592                           prodh	equ	0xFF4
  6593                           prodl	equ	0xFF3
  6594                           intcon	equ	0xFF2
  6595                           postinc0	equ	0xFEE
  6596                           wreg	equ	0xFE8
  6597                           indf1	equ	0xFE7
  6598                           postdec1	equ	0xFE5
  6599                           fsr1h	equ	0xFE2
  6600                           fsr1l	equ	0xFE1
  6601                           indf2	equ	0xFDF
  6602                           fsr2h	equ	0xFDA
  6603                           fsr2l	equ	0xFD9
  6604                           status	equ	0xFD8
  6605                           
  6606 ;; *************** function _FPGA_DoWrite *****************
  6607 ;; Defined at:
  6608 ;;		line 43 in file "fpga.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  d               1    0[COMRAM] unsigned char 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  tmp             1    1[COMRAM] unsigned char 
  6613 ;; Return value:  Size  Location     Type
  6614 ;;		None               void
  6615 ;; Registers used:
  6616 ;;		wreg, status,2, status,0
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6622 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6625 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6626 ;;Total ram usage:        2 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; This function calls:
  6629 ;;		Nothing
  6630 ;; This function is called by:
  6631 ;;		_FPGA_EndConfig
  6632 ;;		_LoadFPGA
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           	psect	text43
  6637  00E8A0                     __ptext43:
  6638                           	opt stack 0
  6639  00E8A0                     _FPGA_DoWrite:
  6640                           	opt stack 28
  6641                           
  6642                           ;fpga.c: 60: unsigned char tmp;
  6643                           ;fpga.c: 62: while ((PIR3 & 0x80) == 0) asm("nop");
  6644                           
  6645                           ;incstack = 0
  6646                           ;incstack = 0
  6647  00E8A0  D001               	goto	l38
  6648  00E8A2                     l39:
  6649  00E8A2  F000               	nop		;# 
  6650  00E8A4                     l38:
  6651  00E8A4  AEA4               	btfss	4004,7,c	;volatile
  6652  00E8A6  D7FD               	goto	l39
  6653                           
  6654                           ;fpga.c: 63: PIR3 = PIR3 & 0x7F;
  6655  00E8A8  50A4               	movf	4004,w,c	;volatile
  6656  00E8AA  0B7F               	andlw	127
  6657  00E8AC  6EA4               	movwf	4004,c	;volatile
  6658                           
  6659                           ;fpga.c: 65: tmp = SSP2BUF;
  6660  00E8AE  CF6F F002          	movff	3951,FPGA_DoWrite@tmp	;volatile
  6661                           
  6662                           ;fpga.c: 67: SSP2BUF = d;
  6663  00E8B2  C001  FF6F         	movff	FPGA_DoWrite@d,3951	;volatile
  6664  00E8B6  0012               	return	
  6665  00E8B8                     __end_of_FPGA_DoWrite:
  6666                           	opt stack 0
  6667                           tblptru	equ	0xFF8
  6668                           tblptrh	equ	0xFF7
  6669                           tblptrl	equ	0xFF6
  6670                           tablat	equ	0xFF5
  6671                           prodh	equ	0xFF4
  6672                           prodl	equ	0xFF3
  6673                           intcon	equ	0xFF2
  6674                           postinc0	equ	0xFEE
  6675                           wreg	equ	0xFE8
  6676                           indf1	equ	0xFE7
  6677                           postdec1	equ	0xFE5
  6678                           fsr1h	equ	0xFE2
  6679                           fsr1l	equ	0xFE1
  6680                           indf2	equ	0xFDF
  6681                           fsr2h	equ	0xFDA
  6682                           fsr2l	equ	0xFD9
  6683                           status	equ	0xFD8
  6684                           
  6685 ;; *************** function _FPGA_ReadDone *****************
  6686 ;; Defined at:
  6687 ;;		line 38 in file "fpga.c"
  6688 ;; Parameters:    Size  Location     Type
  6689 ;;		None
  6690 ;; Auto vars:     Size  Location     Type
  6691 ;;		None
  6692 ;; Return value:  Size  Location     Type
  6693 ;;                  1    wreg      unsigned char 
  6694 ;; Registers used:
  6695 ;;		wreg, status,2, status,0
  6696 ;; Tracked objects:
  6697 ;;		On entry : 0/0
  6698 ;;		On exit  : 0/0
  6699 ;;		Unchanged: 0/0
  6700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6705 ;;Total ram usage:        0 bytes
  6706 ;; Hardware stack levels used:    1
  6707 ;; This function calls:
  6708 ;;		Nothing
  6709 ;; This function is called by:
  6710 ;;		_FPGA_EndConfig
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text44
  6715  00E80E                     __ptext44:
  6716                           	opt stack 0
  6717  00E80E                     _FPGA_ReadDone:
  6718                           	opt stack 28
  6719                           
  6720                           ;fpga.c: 39: return ((PORTD & 0x08) >> 3);
  6721                           
  6722                           ;incstack = 0
  6723                           ;incstack = 0
  6724  00E80E  3883               	swapf	3971,w,c	;volatile
  6725  00E810  46E8               	rlncf	wreg,f,c
  6726  00E812  0B1F               	andlw	31
  6727  00E814  0B01               	andlw	1
  6728  00E816  0012               	return	
  6729  00E818                     __end_of_FPGA_ReadDone:
  6730                           	opt stack 0
  6731                           tblptru	equ	0xFF8
  6732                           tblptrh	equ	0xFF7
  6733                           tblptrl	equ	0xFF6
  6734                           tablat	equ	0xFF5
  6735                           prodh	equ	0xFF4
  6736                           prodl	equ	0xFF3
  6737                           intcon	equ	0xFF2
  6738                           postinc0	equ	0xFEE
  6739                           wreg	equ	0xFE8
  6740                           indf1	equ	0xFE7
  6741                           postdec1	equ	0xFE5
  6742                           fsr1h	equ	0xFE2
  6743                           fsr1l	equ	0xFE1
  6744                           indf2	equ	0xFDF
  6745                           fsr2h	equ	0xFDA
  6746                           fsr2l	equ	0xFD9
  6747                           status	equ	0xFD8
  6748                           
  6749 ;; *************** function _LoadPalette *****************
  6750 ;; Defined at:
  6751 ;;		line 28 in file "main.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;  jmp             1   10[COMRAM] unsigned char 
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;  spiAddr         3   20[COMRAM] unsigned um
  6756 ;;  m               2   17[COMRAM] int 
  6757 ;;  n               2   15[COMRAM] int 
  6758 ;;  i               1   19[COMRAM] unsigned char 
  6759 ;; Return value:  Size  Location     Type
  6760 ;;		None               void
  6761 ;; Registers used:
  6762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6763 ;; Tracked objects:
  6764 ;;		On entry : 0/0
  6765 ;;		On exit  : 0/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6768 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6769 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6770 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;Total ram usage:       13 bytes
  6773 ;; Hardware stack levels used:    1
  6774 ;; Hardware stack levels required when called:    2
  6775 ;; This function calls:
  6776 ;;		_GetAutoChangePalette
  6777 ;;		_SPIMemory_ReadData
  6778 ;;		_FPGARegs_WriteAddress
  6779 ;;		_FPGARegs_WriteData
  6780 ;;		___wmul
  6781 ;; This function is called by:
  6782 ;;		_main
  6783 ;; This function uses a non-reentrant model
  6784 ;;
  6785                           
  6786                           	psect	text45
  6787  00F16C                     __ptext45:
  6788                           	opt stack 0
  6789  00F16C                     _LoadPalette:
  6790                           	opt stack 28
  6791                           
  6792                           ;main.c: 29: unsigned long short spiAddr;
  6793                           ;main.c: 30: int n, m;
  6794                           ;main.c: 31: unsigned char i;
  6795                           ;main.c: 33: if (GetAutoChangePalette() == 0)
  6796                           
  6797                           ;incstack = 0
  6798                           ;incstack = 0
  6799  00F16C  EC74  F074         	call	_GetAutoChangePalette	;wreg free
  6800  00F170  0900               	iorlw	0
  6801  00F172  B4D8               	btfsc	status,2,c
  6802  00F174  0012               	return	
  6803  00F176  D017               	goto	l2901
  6804  00F178                     l2885:
  6805                           
  6806                           ;main.c: 41: i = 0;
  6807  00F178  6E0C               	movwf	??_LoadPalette& (0+255),c
  6808  00F17A  0E00               	movlw	0
  6809  00F17C  D011               	goto	L17
  6810  00F17E                     l2887:
  6811                           
  6812                           ;main.c: 44: i = 1;
  6813  00F17E  6E0C               	movwf	??_LoadPalette& (0+255),c
  6814  00F180  0E01               	movlw	1
  6815  00F182  D00E               	goto	L17
  6816  00F184                     l2889:
  6817                           
  6818                           ;main.c: 47: i = 2;
  6819  00F184  6E0C               	movwf	??_LoadPalette& (0+255),c
  6820  00F186  0E02               	movlw	2
  6821  00F188  D00B               	goto	L17
  6822  00F18A                     l2891:
  6823                           
  6824                           ;main.c: 50: i = 3;
  6825  00F18A  6E0C               	movwf	??_LoadPalette& (0+255),c
  6826  00F18C  0E03               	movlw	3
  6827  00F18E  D008               	goto	L17
  6828  00F190                     l2893:
  6829                           
  6830                           ;main.c: 53: i = 4;
  6831  00F190  6E0C               	movwf	??_LoadPalette& (0+255),c
  6832  00F192  0E04               	movlw	4
  6833  00F194  D005               	goto	L17
  6834  00F196                     l2895:
  6835                           
  6836                           ;main.c: 56: i = 5;
  6837  00F196  6E0C               	movwf	??_LoadPalette& (0+255),c
  6838  00F198  0E05               	movlw	5
  6839  00F19A  D002               	goto	L17
  6840  00F19C                     l2897:
  6841                           
  6842                           ;main.c: 59: i = 6;
  6843  00F19C  6E0C               	movwf	??_LoadPalette& (0+255),c
  6844  00F19E  0E06               	movlw	6
  6845  00F1A0                     L17:
  6846  00F1A0  6E14               	movwf	LoadPalette@i,c
  6847  00F1A2  500C               	movf	??_LoadPalette& (0+255),w,c
  6848                           
  6849                           ;main.c: 60: break;
  6850  00F1A4  D01F               	goto	l2903
  6851  00F1A6                     l2901:
  6852  00F1A6  500B               	movf	LoadPalette@jmp,w,c
  6853  00F1A8  0B70               	andlw	112
  6854  00F1AA  6E0C               	movwf	??_LoadPalette& (0+255),c
  6855  00F1AC  6A0D               	clrf	(??_LoadPalette+1)& (0+255),c
  6856                           
  6857                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6858                           ; Switch size 1, requested type "space"
  6859                           ; Number of cases is 1, Range of values is 0 to 0
  6860                           ; switch strategies available:
  6861                           ; Name         Instructions Cycles
  6862                           ; simple_byte            4     3 (average)
  6863                           ;	Chosen strategy is simple_byte
  6864  00F1AE  500D               	movf	??_LoadPalette+1,w,c
  6865  00F1B0  0A00               	xorlw	0	; case 0
  6866  00F1B2  A4D8               	btfss	status,2,c
  6867  00F1B4  0012               	return	
  6868                           
  6869                           ; Switch size 1, requested type "space"
  6870                           ; Number of cases is 7, Range of values is 16 to 112
  6871                           ; switch strategies available:
  6872                           ; Name         Instructions Cycles
  6873                           ; simple_byte           22    12 (average)
  6874                           ;	Chosen strategy is simple_byte
  6875  00F1B6  500C               	movf	??_LoadPalette,w,c
  6876  00F1B8  0A10               	xorlw	16	; case 16
  6877  00F1BA  B4D8               	btfsc	status,2,c
  6878  00F1BC  D7E6               	goto	l2891
  6879  00F1BE  0A30               	xorlw	48	; case 32
  6880  00F1C0  B4D8               	btfsc	status,2,c
  6881  00F1C2  D7E9               	goto	l2895
  6882  00F1C4  0A10               	xorlw	16	; case 48
  6883  00F1C6  B4D8               	btfsc	status,2,c
  6884  00F1C8  D7DA               	goto	l2887
  6885  00F1CA  0A70               	xorlw	112	; case 64
  6886  00F1CC  B4D8               	btfsc	status,2,c
  6887  00F1CE  D7E6               	goto	l2897
  6888  00F1D0  0A10               	xorlw	16	; case 80
  6889  00F1D2  B4D8               	btfsc	status,2,c
  6890  00F1D4  D7D7               	goto	l2889
  6891  00F1D6  0A30               	xorlw	48	; case 96
  6892  00F1D8  B4D8               	btfsc	status,2,c
  6893  00F1DA  D7DA               	goto	l2893
  6894  00F1DC  0A10               	xorlw	16	; case 112
  6895  00F1DE  A4D8               	btfss	status,2,c
  6896  00F1E0  0012               	return	
  6897  00F1E2  D7CA               	goto	l2885
  6898  00F1E4                     l2903:
  6899                           
  6900                           ;main.c: 65: spiAddr = 0x70000 + (i * 1536);
  6901  00F1E4  C014  F001         	movff	LoadPalette@i,?___wmul
  6902  00F1E8  6A02               	clrf	?___wmul+1,c
  6903  00F1EA  0E06               	movlw	6
  6904  00F1EC  6E04               	movwf	?___wmul+3,c
  6905  00F1EE  0E00               	movlw	0
  6906  00F1F0  6E03               	movwf	?___wmul+2,c
  6907  00F1F2  ECD4  F075         	call	___wmul	;wreg free
  6908  00F1F6  C001  F00C         	movff	?___wmul,??_LoadPalette
  6909  00F1FA  C002  F00D         	movff	?___wmul+1,??_LoadPalette+1
  6910  00F1FE  0E00               	movlw	0
  6911  00F200  BE0D               	btfsc	(??_LoadPalette+1)& (0+255),7,c
  6912  00F202  0EFF               	movlw	255
  6913  00F204  6E0E               	movwf	(??_LoadPalette+2)& (0+255),c
  6914  00F206  6E0F               	movwf	(??_LoadPalette+3)& (0+255),c
  6915  00F208  0E00               	movlw	0
  6916  00F20A  240C               	addwf	??_LoadPalette,w,c
  6917  00F20C  6E15               	movwf	LoadPalette@spiAddr,c
  6918  00F20E  0E00               	movlw	0
  6919  00F210  200D               	addwfc	??_LoadPalette+1,w,c
  6920  00F212  6E16               	movwf	LoadPalette@spiAddr+1,c
  6921  00F214  0E07               	movlw	7
  6922  00F216  200E               	addwfc	??_LoadPalette+2,w,c
  6923  00F218  6E17               	movwf	LoadPalette@spiAddr+2,c
  6924                           
  6925                           ;main.c: 66: SPIMemory_ReadData(spiAddr);
  6926  00F21A  C015  F003         	movff	LoadPalette@spiAddr,?_SPIMemory_ReadData
  6927  00F21E  C016  F004         	movff	LoadPalette@spiAddr+1,?_SPIMemory_ReadData+1
  6928  00F222  C017  F005         	movff	LoadPalette@spiAddr+2,?_SPIMemory_ReadData+2
  6929  00F226  EC78  F077         	call	_SPIMemory_ReadData	;wreg free
  6930                           
  6931                           ;main.c: 68: FPGARegs_WriteAddress(0x01);
  6932  00F22A  6E0C               	movwf	??_LoadPalette& (0+255),c
  6933  00F22C  0E01               	movlw	1
  6934  00F22E  6E01               	movwf	?_FPGARegs_WriteAddress,c
  6935  00F230  500C               	movf	??_LoadPalette& (0+255),w,c
  6936  00F232  ECD7  F074         	call	_FPGARegs_WriteAddress	;wreg free
  6937                           
  6938                           ;main.c: 69: FPGARegs_WriteData(0x00);
  6939  00F236  6E0C               	movwf	??_LoadPalette& (0+255),c
  6940  00F238  0E00               	movlw	0
  6941  00F23A  6E01               	movwf	?_FPGARegs_WriteData,c
  6942  00F23C  500C               	movf	??_LoadPalette& (0+255),w,c
  6943  00F23E  ECE8  F074         	call	_FPGARegs_WriteData	;wreg free
  6944                           
  6945                           ;main.c: 70: FPGARegs_WriteAddress(0x02);
  6946  00F242  6E0C               	movwf	??_LoadPalette& (0+255),c
  6947  00F244  0E02               	movlw	2
  6948  00F246  6E01               	movwf	?_FPGARegs_WriteAddress,c
  6949  00F248  500C               	movf	??_LoadPalette& (0+255),w,c
  6950  00F24A  ECD7  F074         	call	_FPGARegs_WriteAddress	;wreg free
  6951                           
  6952                           ;main.c: 71: FPGARegs_WriteData(0x00);
  6953  00F24E  6E0C               	movwf	??_LoadPalette& (0+255),c
  6954  00F250  0E00               	movlw	0
  6955  00F252  6E01               	movwf	?_FPGARegs_WriteData,c
  6956  00F254  500C               	movf	??_LoadPalette& (0+255),w,c
  6957  00F256  ECE8  F074         	call	_FPGARegs_WriteData	;wreg free
  6958                           
  6959                           ;main.c: 73: m = 3;
  6960  00F25A  0E00               	movlw	0
  6961  00F25C  6E13               	movwf	LoadPalette@m+1,c
  6962  00F25E  0E03               	movlw	3
  6963  00F260  6E12               	movwf	LoadPalette@m,c
  6964                           
  6965                           ;main.c: 75: for (n = 0; n < 1536; n++)
  6966  00F262  0E00               	movlw	0
  6967  00F264  6E11               	movwf	LoadPalette@n+1,c
  6968  00F266  0E00               	movlw	0
  6969  00F268  6E10               	movwf	LoadPalette@n,c
  6970  00F26A  5011               	movf	LoadPalette@n+1,w,c
  6971  00F26C  0A80               	xorlw	128
  6972  00F26E  0F7A               	addlw	-134
  6973  00F270  0E00               	movlw	0
  6974  00F272  B4D8               	btfsc	status,2,c
  6975  00F274  5C10               	subwf	LoadPalette@n,w,c
  6976  00F276  B0D8               	btfsc	status,0,c
  6977  00F278  0012               	return	
  6978                           
  6979                           ;main.c: 76: {
  6980                           ;main.c: 77: FPGARegs_WriteAddress((unsigned char)m);
  6981  00F27A  C012  F001         	movff	LoadPalette@m,?_FPGARegs_WriteAddress
  6982  00F27E  ECD7  F074         	call	_FPGARegs_WriteAddress	;wreg free
  6983                           
  6984                           ;main.c: 78: m++;
  6985  00F282  4A12               	infsnz	LoadPalette@m,f,c
  6986  00F284  2A13               	incf	LoadPalette@m+1,f,c
  6987                           
  6988                           ;main.c: 79: if (m > 5)
  6989  00F286  5013               	movf	LoadPalette@m+1,w,c
  6990  00F288  0A80               	xorlw	128
  6991  00F28A  0F80               	addlw	-128
  6992  00F28C  0E06               	movlw	6
  6993  00F28E  B4D8               	btfsc	status,2,c
  6994  00F290  5C12               	subwf	LoadPalette@m,w,c
  6995  00F292  A0D8               	btfss	status,0,c
  6996  00F294  D004               	goto	l2931
  6997                           
  6998                           ;main.c: 80: {
  6999                           ;main.c: 81: m = 3;
  7000  00F296  0E00               	movlw	0
  7001  00F298  6E13               	movwf	LoadPalette@m+1,c
  7002  00F29A  0E03               	movlw	3
  7003  00F29C  6E12               	movwf	LoadPalette@m,c
  7004  00F29E                     l2931:
  7005                           
  7006                           ;main.c: 82: }
  7007                           ;main.c: 83: FPGARegs_WriteData(dataBuffer[spiAddr & 0xFF]);
  7008  00F29E  0EFF               	movlw	255
  7009  00F2A0  1415               	andwf	LoadPalette@spiAddr,w,c
  7010  00F2A2  6E0C               	movwf	??_LoadPalette& (0+255),c
  7011  00F2A4  0E00               	movlw	0
  7012  00F2A6  1416               	andwf	LoadPalette@spiAddr+1,w,c
  7013  00F2A8  6E0D               	movwf	(??_LoadPalette+1)& (0+255),c
  7014  00F2AA  0101               	movlb	1	; () banked
  7015  00F2AC  0E00               	movlw	low _dataBuffer	;volatile
  7016  00F2AE  240C               	addwf	??_LoadPalette,w,c
  7017  00F2B0  6ED9               	movwf	fsr2l,c
  7018  00F2B2  0101               	movlb	1	; () banked
  7019  00F2B4  0E01               	movlw	high _dataBuffer	;volatile
  7020  00F2B6  200D               	addwfc	??_LoadPalette+1,w,c
  7021  00F2B8  6EDA               	movwf	fsr2h,c
  7022  00F2BA  50DF               	movf	indf2,w,c
  7023  00F2BC  6E01               	movwf	?_FPGARegs_WriteData,c
  7024  00F2BE  ECE8  F074         	call	_FPGARegs_WriteData	;wreg free
  7025                           
  7026                           ;main.c: 84: spiAddr ++;
  7027  00F2C2  0E01               	movlw	1
  7028  00F2C4  2615               	addwf	LoadPalette@spiAddr,f,c
  7029  00F2C6  0E00               	movlw	0
  7030  00F2C8  2216               	addwfc	LoadPalette@spiAddr+1,f,c
  7031  00F2CA  0E00               	movlw	0
  7032  00F2CC  2217               	addwfc	LoadPalette@spiAddr+2,f,c
  7033                           
  7034                           ;main.c: 85: if ((spiAddr & 0xFF) == 0)
  7035  00F2CE  0EFF               	movlw	255
  7036  00F2D0  1415               	andwf	LoadPalette@spiAddr,w,c
  7037  00F2D2  6E0C               	movwf	??_LoadPalette& (0+255),c
  7038  00F2D4  0E00               	movlw	0
  7039  00F2D6  1416               	andwf	LoadPalette@spiAddr+1,w,c
  7040  00F2D8  6E0D               	movwf	(??_LoadPalette+1)& (0+255),c
  7041  00F2DA  0E00               	movlw	0
  7042  00F2DC  1417               	andwf	LoadPalette@spiAddr+2,w,c
  7043  00F2DE  6E0E               	movwf	(??_LoadPalette+2)& (0+255),c
  7044  00F2E0  500C               	movf	??_LoadPalette,w,c
  7045  00F2E2  100D               	iorwf	??_LoadPalette+1,w,c
  7046  00F2E4  100E               	iorwf	??_LoadPalette+2,w,c
  7047  00F2E6  A4D8               	btfss	status,2,c
  7048  00F2E8  D008               	goto	l2939
  7049                           
  7050                           ;main.c: 86: {
  7051                           ;main.c: 87: SPIMemory_ReadData(spiAddr);
  7052  00F2EA  C015  F003         	movff	LoadPalette@spiAddr,?_SPIMemory_ReadData
  7053  00F2EE  C016  F004         	movff	LoadPalette@spiAddr+1,?_SPIMemory_ReadData+1
  7054  00F2F2  C017  F005         	movff	LoadPalette@spiAddr+2,?_SPIMemory_ReadData+2
  7055  00F2F6  EC78  F077         	call	_SPIMemory_ReadData	;wreg free
  7056  00F2FA                     l2939:
  7057  00F2FA  4A10               	infsnz	LoadPalette@n,f,c
  7058  00F2FC  2A11               	incf	LoadPalette@n+1,f,c
  7059  00F2FE  D7B5               	goto	L18
  7060  00F300                     __end_of_LoadPalette:
  7061                           	opt stack 0
  7062                           tblptru	equ	0xFF8
  7063                           tblptrh	equ	0xFF7
  7064                           tblptrl	equ	0xFF6
  7065                           tablat	equ	0xFF5
  7066                           prodh	equ	0xFF4
  7067                           prodl	equ	0xFF3
  7068                           intcon	equ	0xFF2
  7069                           postinc0	equ	0xFEE
  7070                           wreg	equ	0xFE8
  7071                           indf1	equ	0xFE7
  7072                           postdec1	equ	0xFE5
  7073                           fsr1h	equ	0xFE2
  7074                           fsr1l	equ	0xFE1
  7075                           indf2	equ	0xFDF
  7076                           fsr2h	equ	0xFDA
  7077                           fsr2l	equ	0xFD9
  7078                           status	equ	0xFD8
  7079                           
  7080 ;; *************** function ___wmul *****************
  7081 ;; Defined at:
  7082 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;  multiplier      2    0[COMRAM] unsigned int 
  7085 ;;  multiplicand    2    2[COMRAM] unsigned int 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;  product         2    4[COMRAM] unsigned int 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  2    0[COMRAM] unsigned int 
  7090 ;; Registers used:
  7091 ;;		wreg, status,2, status,0, prodl, prodh
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7097 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7101 ;;Total ram usage:        6 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; This function calls:
  7104 ;;		Nothing
  7105 ;; This function is called by:
  7106 ;;		_LoadPalette
  7107 ;; This function uses a non-reentrant model
  7108 ;;
  7109                           
  7110                           	psect	text46
  7111  00EBA8                     __ptext46:
  7112                           	opt stack 0
  7113  00EBA8                     ___wmul:
  7114                           	opt stack 29
  7115                           
  7116                           ;incstack = 0
  7117                           ;incstack = 0
  7118  00EBA8  5001               	movf	___wmul@multiplier,w,c
  7119  00EBAA  0203               	mulwf	___wmul@multiplicand,c
  7120  00EBAC  CFF3 F005          	movff	prodl,___wmul@product
  7121  00EBB0  CFF4 F006          	movff	prodh,___wmul@product+1
  7122  00EBB4  5001               	movf	___wmul@multiplier,w,c
  7123  00EBB6  0204               	mulwf	___wmul@multiplicand+1,c
  7124  00EBB8  CFF3 FFF4          	movff	prodl,prodh
  7125  00EBBC  6AF3               	clrf	prodl,c
  7126  00EBBE  50F3               	movf	prodl,w,c
  7127  00EBC0  2605               	addwf	___wmul@product,f,c
  7128  00EBC2  50F4               	movf	prodh,w,c
  7129  00EBC4  2206               	addwfc	___wmul@product+1,f,c
  7130  00EBC6  5002               	movf	___wmul@multiplier+1,w,c
  7131  00EBC8  0203               	mulwf	___wmul@multiplicand,c
  7132  00EBCA  CFF3 FFF4          	movff	prodl,prodh
  7133  00EBCE  6AF3               	clrf	prodl,c
  7134  00EBD0  50F3               	movf	prodl,w,c
  7135  00EBD2  2605               	addwf	___wmul@product,f,c
  7136  00EBD4  50F4               	movf	prodh,w,c
  7137  00EBD6  2206               	addwfc	___wmul@product+1,f,c
  7138  00EBD8  C005  F001         	movff	___wmul@product,?___wmul
  7139  00EBDC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  7140  00EBE0  0012               	return	
  7141  00EBE2                     __end_of___wmul:
  7142                           	opt stack 0
  7143                           tblptru	equ	0xFF8
  7144                           tblptrh	equ	0xFF7
  7145                           tblptrl	equ	0xFF6
  7146                           tablat	equ	0xFF5
  7147                           prodh	equ	0xFF4
  7148                           prodl	equ	0xFF3
  7149                           intcon	equ	0xFF2
  7150                           postinc0	equ	0xFEE
  7151                           wreg	equ	0xFE8
  7152                           indf1	equ	0xFE7
  7153                           postdec1	equ	0xFE5
  7154                           fsr1h	equ	0xFE2
  7155                           fsr1l	equ	0xFE1
  7156                           indf2	equ	0xFDF
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function _FPGARegs_WriteData *****************
  7162 ;; Defined at:
  7163 ;;		line 46 in file "fpgaRegs.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  data            1    0[COMRAM] unsigned char 
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;		None
  7168 ;; Return value:  Size  Location     Type
  7169 ;;		None               void
  7170 ;; Registers used:
  7171 ;;		wreg, status,2, status,0
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7177 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;Total ram usage:        1 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; This function calls:
  7184 ;;		Nothing
  7185 ;; This function is called by:
  7186 ;;		_LoadPalette
  7187 ;; This function uses a non-reentrant model
  7188 ;;
  7189                           
  7190                           	psect	text47
  7191  00E9D0                     __ptext47:
  7192                           	opt stack 0
  7193  00E9D0                     _FPGARegs_WriteData:
  7194                           	opt stack 29
  7195                           
  7196                           ;fpgaRegs.c: 47: LATE = LATE | 0x01;;
  7197                           
  7198                           ;incstack = 0
  7199                           ;incstack = 0
  7200  00E9D0  508D               	movf	3981,w,c	;volatile
  7201  00E9D2  0901               	iorlw	1
  7202  00E9D4  6E8D               	movwf	3981,c	;volatile
  7203                           
  7204                           ;fpgaRegs.c: 48: TRISA = 0x00;;
  7205  00E9D6  0E00               	movlw	0
  7206  00E9D8  6E92               	movwf	3986,c	;volatile
  7207                           
  7208                           ;fpgaRegs.c: 49: LATD = LATD & 0x7F;;
  7209  00E9DA  508C               	movf	3980,w,c	;volatile
  7210  00E9DC  0B7F               	andlw	127
  7211  00E9DE  6E8C               	movwf	3980,c	;volatile
  7212                           
  7213                           ;fpgaRegs.c: 51: PORTA = data;
  7214  00E9E0  C001  FF80         	movff	FPGARegs_WriteData@data,3968	;volatile
  7215                           
  7216                           ;fpgaRegs.c: 52: LATD = LATD | 0x40;;
  7217  00E9E4  508C               	movf	3980,w,c	;volatile
  7218  00E9E6  0940               	iorlw	64
  7219  00E9E8  6E8C               	movwf	3980,c	;volatile
  7220                           
  7221                           ;fpgaRegs.c: 53: LATD = LATD & 0xBF;;
  7222  00E9EA  508C               	movf	3980,w,c	;volatile
  7223  00E9EC  0BBF               	andlw	191
  7224  00E9EE  6E8C               	movwf	3980,c	;volatile
  7225  00E9F0  0012               	return	
  7226  00E9F2                     __end_of_FPGARegs_WriteData:
  7227                           	opt stack 0
  7228                           tblptru	equ	0xFF8
  7229                           tblptrh	equ	0xFF7
  7230                           tblptrl	equ	0xFF6
  7231                           tablat	equ	0xFF5
  7232                           prodh	equ	0xFF4
  7233                           prodl	equ	0xFF3
  7234                           intcon	equ	0xFF2
  7235                           postinc0	equ	0xFEE
  7236                           wreg	equ	0xFE8
  7237                           indf1	equ	0xFE7
  7238                           postdec1	equ	0xFE5
  7239                           fsr1h	equ	0xFE2
  7240                           fsr1l	equ	0xFE1
  7241                           indf2	equ	0xFDF
  7242                           fsr2h	equ	0xFDA
  7243                           fsr2l	equ	0xFD9
  7244                           status	equ	0xFD8
  7245                           
  7246 ;; *************** function _FPGARegs_WriteAddress *****************
  7247 ;; Defined at:
  7248 ;;		line 20 in file "fpgaRegs.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  addr            1    0[COMRAM] unsigned char 
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;		None
  7253 ;; Return value:  Size  Location     Type
  7254 ;;		None               void
  7255 ;; Registers used:
  7256 ;;		wreg, status,2, status,0
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7262 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7265 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;Total ram usage:        1 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; This function calls:
  7269 ;;		Nothing
  7270 ;; This function is called by:
  7271 ;;		_LoadPalette
  7272 ;;		_main
  7273 ;; This function uses a non-reentrant model
  7274 ;;
  7275                           
  7276                           	psect	text48
  7277  00E9AE                     __ptext48:
  7278                           	opt stack 0
  7279  00E9AE                     _FPGARegs_WriteAddress:
  7280                           	opt stack 30
  7281                           
  7282                           ;fpgaRegs.c: 21: LATE = LATE | 0x01;;
  7283                           
  7284                           ;incstack = 0
  7285                           ;incstack = 0
  7286  00E9AE  508D               	movf	3981,w,c	;volatile
  7287  00E9B0  0901               	iorlw	1
  7288  00E9B2  6E8D               	movwf	3981,c	;volatile
  7289                           
  7290                           ;fpgaRegs.c: 22: TRISA = 0x00;;
  7291  00E9B4  0E00               	movlw	0
  7292  00E9B6  6E92               	movwf	3986,c	;volatile
  7293                           
  7294                           ;fpgaRegs.c: 23: LATD = LATD | 0x80;;
  7295  00E9B8  508C               	movf	3980,w,c	;volatile
  7296  00E9BA  0980               	iorlw	128
  7297  00E9BC  6E8C               	movwf	3980,c	;volatile
  7298                           
  7299                           ;fpgaRegs.c: 25: PORTA = addr;
  7300  00E9BE  C001  FF80         	movff	FPGARegs_WriteAddress@addr,3968	;volatile
  7301                           
  7302                           ;fpgaRegs.c: 26: LATD = LATD | 0x40;;
  7303  00E9C2  508C               	movf	3980,w,c	;volatile
  7304  00E9C4  0940               	iorlw	64
  7305  00E9C6  6E8C               	movwf	3980,c	;volatile
  7306                           
  7307                           ;fpgaRegs.c: 27: LATD = LATD & 0xBF;;
  7308  00E9C8  508C               	movf	3980,w,c	;volatile
  7309  00E9CA  0BBF               	andlw	191
  7310  00E9CC  6E8C               	movwf	3980,c	;volatile
  7311  00E9CE  0012               	return	
  7312  00E9D0                     __end_of_FPGARegs_WriteAddress:
  7313                           	opt stack 0
  7314                           tblptru	equ	0xFF8
  7315                           tblptrh	equ	0xFF7
  7316                           tblptrl	equ	0xFF6
  7317                           tablat	equ	0xFF5
  7318                           prodh	equ	0xFF4
  7319                           prodl	equ	0xFF3
  7320                           intcon	equ	0xFF2
  7321                           postinc0	equ	0xFEE
  7322                           wreg	equ	0xFE8
  7323                           indf1	equ	0xFE7
  7324                           postdec1	equ	0xFE5
  7325                           fsr1h	equ	0xFE2
  7326                           fsr1l	equ	0xFE1
  7327                           indf2	equ	0xFDF
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332 ;; *************** function _SPIMemory_ReadData *****************
  7333 ;; Defined at:
  7334 ;;		line 204 in file "spiMemory.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;  startAddr       3    2[COMRAM] unsigned um
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;  currCount       2    8[COMRAM] unsigned int 
  7339 ;; Return value:  Size  Location     Type
  7340 ;;		None               void
  7341 ;; Registers used:
  7342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7348 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7349 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7350 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;Total ram usage:        8 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    1
  7355 ;; This function calls:
  7356 ;;		_SPIMemory_SetCS
  7357 ;;		_SPIMemory_UnsetCS
  7358 ;;		_SPIMemory_DoRead
  7359 ;;		_SPIMemory_DoWrite
  7360 ;; This function is called by:
  7361 ;;		_LoadPalette
  7362 ;;		_LoadFPGA
  7363 ;;		_main
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text49
  7368  00EEF0                     __ptext49:
  7369                           	opt stack 0
  7370  00EEF0                     _SPIMemory_ReadData:
  7371                           	opt stack 28
  7372                           
  7373                           ;spiMemory.c: 205: unsigned int currCount;
  7374                           ;spiMemory.c: 207: SPIMemory_UnsetCS();
  7375                           
  7376                           ;incstack = 0
  7377                           ;incstack = 0
  7378  00EEF0  EC03  F074         	call	_SPIMemory_UnsetCS	;wreg free
  7379                           
  7380                           ;spiMemory.c: 208: SPIMemory_DoWrite(0x03);
  7381  00EEF4  6E06               	movwf	??_SPIMemory_ReadData& (0+255),c
  7382  00EEF6  0E03               	movlw	3
  7383  00EEF8  6E01               	movwf	?_SPIMemory_DoWrite,c
  7384  00EEFA  5006               	movf	??_SPIMemory_ReadData& (0+255),w,c
  7385  00EEFC  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  7386                           
  7387                           ;spiMemory.c: 209: SPIMemory_DoWrite((startAddr >> 16) & 0xFF);
  7388  00EF00  C005  F001         	movff	SPIMemory_ReadData@startAddr+2,?_SPIMemory_DoWrite
  7389  00EF04  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  7390                           
  7391                           ;spiMemory.c: 210: SPIMemory_DoWrite((startAddr >> 8) & 0xFF);
  7392  00EF08  C003  F006         	movff	SPIMemory_ReadData@startAddr,??_SPIMemory_ReadData
  7393  00EF0C  C004  F007         	movff	SPIMemory_ReadData@startAddr+1,??_SPIMemory_ReadData+1
  7394  00EF10  C005  F008         	movff	SPIMemory_ReadData@startAddr+2,??_SPIMemory_ReadData+2
  7395  00EF14  C007  F006         	movff	??_SPIMemory_ReadData+1,??_SPIMemory_ReadData
  7396  00EF18  C008  F007         	movff	??_SPIMemory_ReadData+2,??_SPIMemory_ReadData+1
  7397  00EF1C  6A08               	clrf	??_SPIMemory_ReadData+2,c
  7398  00EF1E  5006               	movf	??_SPIMemory_ReadData,w,c
  7399  00EF20  6E01               	movwf	?_SPIMemory_DoWrite,c
  7400  00EF22  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  7401                           
  7402                           ;spiMemory.c: 211: SPIMemory_DoWrite(startAddr & 0xFF);
  7403  00EF26  C003  F001         	movff	SPIMemory_ReadData@startAddr,?_SPIMemory_DoWrite
  7404  00EF2A  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  7405                           
  7406                           ;spiMemory.c: 213: SPIMemory_DoWrite(0x00);
  7407  00EF2E  6E06               	movwf	??_SPIMemory_ReadData& (0+255),c
  7408  00EF30  0E00               	movlw	0
  7409  00EF32  6E01               	movwf	?_SPIMemory_DoWrite,c
  7410  00EF34  5006               	movf	??_SPIMemory_ReadData& (0+255),w,c
  7411  00EF36  EC68  F074         	call	_SPIMemory_DoWrite	;wreg free
  7412                           
  7413                           ;spiMemory.c: 216: for (currCount = 0; currCount < 256; currCount ++)
  7414  00EF3A  0E00               	movlw	0
  7415  00EF3C  6E0A               	movwf	SPIMemory_ReadData@currCount+1,c
  7416  00EF3E  0E00               	movlw	0
  7417  00EF40  6E09               	movwf	SPIMemory_ReadData@currCount,c
  7418  00EF42  0E00               	movlw	0
  7419  00EF44  5C09               	subwf	SPIMemory_ReadData@currCount,w,c
  7420  00EF46  0E01               	movlw	1
  7421  00EF48  580A               	subwfb	SPIMemory_ReadData@currCount+1,w,c
  7422  00EF4A  B0D8               	btfsc	status,0,c
  7423  00EF4C  D00E               	goto	l2641
  7424                           
  7425                           ;spiMemory.c: 217: {
  7426                           ;spiMemory.c: 218: dataBuffer[currCount] = SPIMemory_DoRead();
  7427  00EF4E  0101               	movlb	1	; () banked
  7428  00EF50  0E00               	movlw	low _dataBuffer	;volatile
  7429  00EF52  2409               	addwf	SPIMemory_ReadData@currCount,w,c
  7430  00EF54  6ED9               	movwf	fsr2l,c
  7431  00EF56  0101               	movlb	1	; () banked
  7432  00EF58  0E01               	movlw	high _dataBuffer	;volatile
  7433  00EF5A  200A               	addwfc	SPIMemory_ReadData@currCount+1,w,c
  7434  00EF5C  6EDA               	movwf	fsr2h,c
  7435  00EF5E  EC8E  F074         	call	_SPIMemory_DoRead	;wreg free
  7436  00EF62  6EDF               	movwf	indf2,c
  7437  00EF64  4A09               	infsnz	SPIMemory_ReadData@currCount,f,c
  7438  00EF66  2A0A               	incf	SPIMemory_ReadData@currCount+1,f,c
  7439  00EF68  D7EC               	goto	L19
  7440  00EF6A                     l2641:
  7441                           
  7442                           ;spiMemory.c: 219: }
  7443                           ;spiMemory.c: 221: SPIMemory_SetCS();
  7444  00EF6A  ECFF  F073         	call	_SPIMemory_SetCS	;wreg free
  7445  00EF6E  0012               	return	
  7446  00EF70                     __end_of_SPIMemory_ReadData:
  7447                           	opt stack 0
  7448                           tblptru	equ	0xFF8
  7449                           tblptrh	equ	0xFF7
  7450                           tblptrl	equ	0xFF6
  7451                           tablat	equ	0xFF5
  7452                           prodh	equ	0xFF4
  7453                           prodl	equ	0xFF3
  7454                           intcon	equ	0xFF2
  7455                           postinc0	equ	0xFEE
  7456                           wreg	equ	0xFE8
  7457                           indf1	equ	0xFE7
  7458                           postdec1	equ	0xFE5
  7459                           fsr1h	equ	0xFE2
  7460                           fsr1l	equ	0xFE1
  7461                           indf2	equ	0xFDF
  7462                           fsr2h	equ	0xFDA
  7463                           fsr2l	equ	0xFD9
  7464                           status	equ	0xFD8
  7465                           
  7466 ;; *************** function _GetAutoChangePalette *****************
  7467 ;; Defined at:
  7468 ;;		line 106 in file "programInfo.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;		None
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;		None
  7473 ;; Return value:  Size  Location     Type
  7474 ;;                  1    wreg      unsigned char 
  7475 ;; Registers used:
  7476 ;;		wreg, status,2, status,0, cstack
  7477 ;; Tracked objects:
  7478 ;;		On entry : 0/0
  7479 ;;		On exit  : 0/0
  7480 ;;		Unchanged: 0/0
  7481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;Total ram usage:        1 bytes
  7487 ;; Hardware stack levels used:    1
  7488 ;; Hardware stack levels required when called:    1
  7489 ;; This function calls:
  7490 ;;		_Read_b_eep
  7491 ;; This function is called by:
  7492 ;;		_LoadPalette
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text50
  7497  00E8E8                     __ptext50:
  7498                           	opt stack 0
  7499  00E8E8                     _GetAutoChangePalette:
  7500                           	opt stack 28
  7501                           
  7502                           ;programInfo.c: 107: if ((Read_b_eep(0) & 0x08) == 0)
  7503                           
  7504                           ;incstack = 0
  7505                           ;incstack = 0
  7506  00E8E8  0E00               	movlw	0
  7507  00E8EA  6E02               	movwf	?_Read_b_eep+1,c
  7508  00E8EC  0E00               	movlw	0
  7509  00E8EE  6E01               	movwf	?_Read_b_eep,c
  7510  00E8F0  EC44  F074         	call	_Read_b_eep	;wreg free
  7511  00E8F4  6E03               	movwf	??_GetAutoChangePalette& (0+255),c
  7512  00E8F6  B603               	btfsc	??_GetAutoChangePalette,3,c
  7513  00E8F8  D002               	goto	l2623
  7514                           
  7515                           ;programInfo.c: 108: {
  7516                           ;programInfo.c: 109: return 1;
  7517  00E8FA  0E01               	movlw	1
  7518  00E8FC  0012               	return	
  7519  00E8FE                     l2623:
  7520                           
  7521                           ;programInfo.c: 110: }
  7522                           ;programInfo.c: 111: return 0;
  7523  00E8FE  0E00               	movlw	0
  7524  00E900  0012               	return	
  7525  00E902                     __end_of_GetAutoChangePalette:
  7526                           	opt stack 0
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           intcon	equ	0xFF2
  7534                           postinc0	equ	0xFEE
  7535                           wreg	equ	0xFE8
  7536                           indf1	equ	0xFE7
  7537                           postdec1	equ	0xFE5
  7538                           fsr1h	equ	0xFE2
  7539                           fsr1l	equ	0xFE1
  7540                           indf2	equ	0xFDF
  7541                           fsr2h	equ	0xFDA
  7542                           fsr2l	equ	0xFD9
  7543                           status	equ	0xFD8
  7544                           
  7545 ;; *************** function _Read_b_eep *****************
  7546 ;; Defined at:
  7547 ;;		line 36 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
  7548 ;; Parameters:    Size  Location     Type
  7549 ;;  badd            2    0[COMRAM] unsigned int 
  7550 ;; Auto vars:     Size  Location     Type
  7551 ;;		None
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  1    wreg      unsigned char 
  7554 ;; Registers used:
  7555 ;;		wreg, status,2, status,0
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7561 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;Total ram usage:        2 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; This function calls:
  7568 ;;		Nothing
  7569 ;; This function is called by:
  7570 ;;		_WriteAutoloadProgram
  7571 ;;		_WriteAutoloadFPGA
  7572 ;;		_GetAutoloadFPGA
  7573 ;;		_WriteAutoChangePalette
  7574 ;;		_GetAutoChangePalette
  7575 ;;		_GetFpgaImageSize
  7576 ;;		_GetAutoloadProgram
  7577 ;;		_WriteProgramWritten
  7578 ;;		_GetProgramWritten
  7579 ;;		_GetProgramStartAddr
  7580 ;;		_GetProgramEndAddr
  7581 ;;		_GetProgramChecksum
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           	psect	text51
  7586  00E888                     __ptext51:
  7587                           	opt stack 0
  7588  00E888                     _Read_b_eep:
  7589                           	opt stack 29
  7590                           
  7591                           ;incstack = 0
  7592                           ;incstack = 0
  7593  00E888  5002               	movf	Read_b_eep@badd+1,w,c
  7594  00E88A  0B03               	andlw	3
  7595  00E88C  6EAA               	movwf	4010,c	;volatile
  7596  00E88E  C001  FFA9         	movff	Read_b_eep@badd,4009	;volatile
  7597  00E892  9CA6               	bcf	4006,6,c	;volatile
  7598  00E894  9EA6               	bcf	4006,7,c	;volatile
  7599  00E896  80A6               	bsf	4006,0,c	;volatile
  7600  00E898  F000               	nop		;# 
  7601  00E89A  F000               	nop		;# 
  7602  00E89C  50A8               	movf	4008,w,c	;volatile
  7603  00E89E  0012               	return	
  7604  00E8A0                     __end_of_Read_b_eep:
  7605                           	opt stack 0
  7606                           tblptru	equ	0xFF8
  7607                           tblptrh	equ	0xFF7
  7608                           tblptrl	equ	0xFF6
  7609                           tablat	equ	0xFF5
  7610                           prodh	equ	0xFF4
  7611                           prodl	equ	0xFF3
  7612                           intcon	equ	0xFF2
  7613                           postinc0	equ	0xFEE
  7614                           wreg	equ	0xFE8
  7615                           indf1	equ	0xFE7
  7616                           postdec1	equ	0xFE5
  7617                           fsr1h	equ	0xFE2
  7618                           fsr1l	equ	0xFE1
  7619                           indf2	equ	0xFDF
  7620                           fsr2h	equ	0xFDA
  7621                           fsr2l	equ	0xFD9
  7622                           status	equ	0xFD8
  7623                           
  7624 ;; *************** function _FPGA_Init *****************
  7625 ;; Defined at:
  7626 ;;		line 73 in file "fpga.c"
  7627 ;; Parameters:    Size  Location     Type
  7628 ;;		None
  7629 ;; Auto vars:     Size  Location     Type
  7630 ;;		None
  7631 ;; Return value:  Size  Location     Type
  7632 ;;		None               void
  7633 ;; Registers used:
  7634 ;;		wreg, status,2, status,0
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;Total ram usage:        0 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; This function calls:
  7647 ;;		Nothing
  7648 ;; This function is called by:
  7649 ;;		_main
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           	psect	text52
  7654  00E85E                     __ptext52:
  7655                           	opt stack 0
  7656  00E85E                     _FPGA_Init:
  7657                           	opt stack 30
  7658                           
  7659                           ;fpga.c: 80: SSP2STAT = 0x40;
  7660                           
  7661                           ;incstack = 0
  7662                           ;incstack = 0
  7663  00E85E  0E40               	movlw	64
  7664  00E860  6E6D               	movwf	3949,c	;volatile
  7665                           
  7666                           ;fpga.c: 81: SSP2CON1 = 0x01;
  7667  00E862  0E01               	movlw	1
  7668  00E864  6E6C               	movwf	3948,c	;volatile
  7669                           
  7670                           ;fpga.c: 82: SSP2CON1 = 0x21;
  7671  00E866  0E21               	movlw	33
  7672  00E868  6E6C               	movwf	3948,c	;volatile
  7673                           
  7674                           ;fpga.c: 83: PIR3 = PIR3 | 0x80;
  7675  00E86A  50A4               	movf	4004,w,c	;volatile
  7676  00E86C  0980               	iorlw	128
  7677  00E86E  6EA4               	movwf	4004,c	;volatile
  7678  00E870  0012               	return	
  7679  00E872                     __end_of_FPGA_Init:
  7680                           	opt stack 0
  7681                           tblptru	equ	0xFF8
  7682                           tblptrh	equ	0xFF7
  7683                           tblptrl	equ	0xFF6
  7684                           tablat	equ	0xFF5
  7685                           prodh	equ	0xFF4
  7686                           prodl	equ	0xFF3
  7687                           intcon	equ	0xFF2
  7688                           postinc0	equ	0xFEE
  7689                           wreg	equ	0xFE8
  7690                           indf1	equ	0xFE7
  7691                           postdec1	equ	0xFE5
  7692                           fsr1h	equ	0xFE2
  7693                           fsr1l	equ	0xFE1
  7694                           indf2	equ	0xFDF
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function _Delay10KTCYx *****************
  7700 ;; Defined at:
  7701 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\d10ktcyx.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;  unit            1    0[COMRAM] unsigned char 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;		None
  7706 ;; Return value:  Size  Location     Type
  7707 ;;		None               void
  7708 ;; Registers used:
  7709 ;;		wreg
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7715 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;Total ram usage:        2 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; This function calls:
  7722 ;;		Nothing
  7723 ;; This function is called by:
  7724 ;;		_main
  7725 ;;		_SPIMemory_ReadStatus
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           	psect	text53
  7730  00E872                     __ptext53:
  7731                           	opt stack 0
  7732  00E872                     _Delay10KTCYx:
  7733                           	opt stack 29
  7734  00E872                     l869:
  7735  00E872  0E0D               	movlw	13
  7736  00E874  6E02               	movwf	??_Delay10KTCYx& (0+255),c
  7737  00E876  0EFB               	movlw	251
  7738  00E878                     u2107:
  7739  00E878  2EE8               	decfsz	wreg,f,c
  7740  00E87A  D7FE               	goto	u2107
  7741  00E87C  2E02               	decfsz	??_Delay10KTCYx& (0+255),f,c
  7742  00E87E  D7FC               	goto	u2107
  7743  00E880  D000               	nop2	
  7744  00E882  2E01               	decfsz	Delay10KTCYx@unit,f,c
  7745  00E884  D7F6               	goto	l869
  7746  00E886  0012               	return	
  7747  00E888                     __end_of_Delay10KTCYx:
  7748                           	opt stack 0
  7749                           tblptru	equ	0xFF8
  7750                           tblptrh	equ	0xFF7
  7751                           tblptrl	equ	0xFF6
  7752                           tablat	equ	0xFF5
  7753                           prodh	equ	0xFF4
  7754                           prodl	equ	0xFF3
  7755                           intcon	equ	0xFF2
  7756                           postinc0	equ	0xFEE
  7757                           wreg	equ	0xFE8
  7758                           indf1	equ	0xFE7
  7759                           postdec1	equ	0xFE5
  7760                           fsr1h	equ	0xFE2
  7761                           fsr1l	equ	0xFE1
  7762                           indf2	equ	0xFDF
  7763                           fsr2h	equ	0xFDA
  7764                           fsr2l	equ	0xFD9
  7765                           status	equ	0xFD8
  7766                           tblptru	equ	0xFF8
  7767                           tblptrh	equ	0xFF7
  7768                           tblptrl	equ	0xFF6
  7769                           tablat	equ	0xFF5
  7770                           prodh	equ	0xFF4
  7771                           prodl	equ	0xFF3
  7772                           intcon	equ	0xFF2
  7773                           postinc0	equ	0xFEE
  7774                           wreg	equ	0xFE8
  7775                           indf1	equ	0xFE7
  7776                           postdec1	equ	0xFE5
  7777                           fsr1h	equ	0xFE2
  7778                           fsr1l	equ	0xFE1
  7779                           indf2	equ	0xFDF
  7780                           fsr2h	equ	0xFDA
  7781                           fsr2l	equ	0xFD9
  7782                           status	equ	0xFD8
  7783                           
  7784                           	psect	rparam
  7785  0000                     tblptru	equ	0xFF8
  7786                           tblptrh	equ	0xFF7
  7787                           tblptrl	equ	0xFF6
  7788                           tablat	equ	0xFF5
  7789                           prodh	equ	0xFF4
  7790                           prodl	equ	0xFF3
  7791                           intcon	equ	0xFF2
  7792                           postinc0	equ	0xFEE
  7793                           wreg	equ	0xFE8
  7794                           indf1	equ	0xFE7
  7795                           postdec1	equ	0xFE5
  7796                           fsr1h	equ	0xFE2
  7797                           fsr1l	equ	0xFE1
  7798                           indf2	equ	0xFDF
  7799                           fsr2h	equ	0xFDA
  7800                           fsr2l	equ	0xFD9
  7801                           status	equ	0xFD8


Data Sizes:
    Strings     316
    Constant    0
    Data        0
    BSS         583
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     37      43
    BANK0           160      0      64
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    ?_strlen	unsigned int  size(2) Largest target is 257
		 -> inputBuffer(BIGRAM[257]), 

    ?_GetFpgaImageSize	unsigned um size(2) Largest target is 0

    ?_strcmp	int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    strlen@s	PTR const unsigned char  size(2) Largest target is 257
		 -> inputBuffer(BIGRAM[257]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 257
		 -> inputBuffer(BIGRAM[257]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_48(CODE[12]), STR_45(CODE[13]), STR_42(CODE[16]), STR_41(CODE[14]), 
		 -> STR_39(CODE[13]), STR_36(CODE[13]), STR_34(CODE[9]), STR_32(CODE[9]), 
		 -> STR_31(CODE[15]), STR_30(CODE[14]), STR_28(CODE[26]), STR_26(CODE[24]), 
		 -> STR_24(CODE[20]), STR_22(CODE[18]), STR_20(CODE[10]), STR_18(CODE[10]), 
		 -> STR_15(CODE[9]), STR_12(CODE[10]), STR_10(CODE[16]), STR_9(CODE[14]), 
		 -> STR_7(CODE[16]), STR_5(CODE[6]), STR_1(CODE[4]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 257
		 -> inputBuffer(BIGRAM[257]), 

    ParseIntelHex@line	PTR unsigned char  size(2) Largest target is 257
		 -> inputBuffer(BIGRAM[257]), 

    USB_SendString@theString	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_49(CODE[3]), STR_47(CODE[4]), STR_46(CODE[7]), STR_44(CODE[4]), 
		 -> STR_43(CODE[6]), STR_40(CODE[4]), STR_38(CODE[4]), STR_37(CODE[6]), 
		 -> STR_35(CODE[4]), STR_33(CODE[4]), STR_29(CODE[4]), STR_27(CODE[4]), 
		 -> STR_25(CODE[4]), STR_23(CODE[4]), STR_21(CODE[4]), STR_19(CODE[4]), 
		 -> STR_17(CODE[4]), STR_16(CODE[6]), STR_14(CODE[4]), STR_13(CODE[6]), 
		 -> STR_11(CODE[4]), STR_8(CODE[13]), STR_6(CODE[4]), STR_4(CODE[4]), 
		 -> STR_3(CODE[4]), STR_2(CODE[4]), 


Critical Paths under _main in COMRAM

    _main->_LoadFPGA
    _WriteFpgaImageSize->_Write_b_eep
    _SPIMemory_SectorErase->_SPIMemory_DoWrite
    _SPIMemory_WriteDisable->_SPIMemory_DoWrite
    _SPIMemory_ReadId->_SPIMemory_DoWrite
    _WriteAutoChangePalette->_Write_b_eep
    _WriteAutoloadFPGA->_Write_b_eep
    _SPIMemory_BulkErase->_SPIMemory_DoWrite
    _USB_SendHex->_SPIMemory_ReadId
    _SPIMemory_WaitWIP->_SPIMemory_ReadStatus
    _SPIMemory_ReadStatus->_USB_SendHex
    _SPIMemory_PageProgram->_SPIMemory_DoWrite
    _WriteAutoloadProgram->_Write_b_eep
    _ParseIntelHex->_strlen
    _USB_SendString->_USB_SendChar
    _SerialTerm_GetLine->_USB_SendChar
    _GetFpgaImageSize->_Read_b_eep
    _GetAutoloadFPGA->_Read_b_eep
    _SPIMemory_WriteStatus->_SPIMemory_DoWrite
    _SPIMemory_WriteEnable->_SPIMemory_DoWrite
    _LoadFPGA->_GetFpgaImageSize
    _FPGA_EndConfig->_FPGA_DoWrite
    _LoadPalette->_SPIMemory_ReadData
    _SPIMemory_ReadData->_SPIMemory_DoWrite
    _GetAutoChangePalette->_Read_b_eep

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14    14      0    5507
                                             24 COMRAM    13    13      0
                          _FPGA_Init
                        _LoadPalette
                 _SPIMemory_ReadData
              _FPGARegs_WriteAddress
                           _LoadFPGA
                     _PeripheralInit
                    _SerialTerm_Init
                     _SPIMemory_Init
              _SPIMemory_WriteEnable
              _SPIMemory_WriteStatus
                      _FPGARegs_Init
                       _Delay10KTCYx
                    _GetAutoloadFPGA
                   _GetFpgaImageSize
                  _FPGARegs_ReadData
                 _SerialTerm_GetLine
                             _strcmp
                     _USB_SendString
                      _ParseIntelHex
                       _USB_SendChar
                    _USB_FlushBuffer
               _WriteAutoloadProgram
                          _HexToByte
              _SPIMemory_PageProgram
                  _SPIMemory_WaitWIP
                        _USB_SendHex
                _SPIMemory_BulkErase
                  _WriteAutoloadFPGA
             _WriteAutoChangePalette
                   _SPIMemory_ReadId
               _SPIMemory_ReadStatus
             _SPIMemory_WriteDisable
              _SPIMemory_SectorErase
                 _WriteFpgaImageSize
 ---------------------------------------------------------------------------------
 (1) _WriteFpgaImageSize                                   6     3      3     156
                                              5 COMRAM     6     3      3
                        _Write_b_eep
                           _Busy_eep
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_SectorErase                                6     3      3      89
                                              2 COMRAM     6     3      3
                    _SPIMemory_SetCS
                  _SPIMemory_UnsetCS
                  _SPIMemory_DoWrite
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_WriteDisable                               1     1      0      23
                                              2 COMRAM     1     1      0
                    _SPIMemory_SetCS
                  _SPIMemory_UnsetCS
                  _SPIMemory_DoWrite
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_ReadId                                     4     4      0      71
                                              2 COMRAM     4     4      0
                    _SPIMemory_SetCS
                  _SPIMemory_UnsetCS
                   _SPIMemory_DoRead
                  _SPIMemory_DoWrite
 ---------------------------------------------------------------------------------
 (1) _WriteAutoChangePalette                               2     1      1     225
                                              5 COMRAM     2     1      1
                         _Read_b_eep
                        _Write_b_eep
                           _Busy_eep
 ---------------------------------------------------------------------------------
 (1) _WriteAutoloadFPGA                                    2     1      1     225
                                              5 COMRAM     2     1      1
                         _Read_b_eep
                        _Write_b_eep
                           _Busy_eep
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_BulkErase                                  1     1      0      23
                                              2 COMRAM     1     1      0
                    _SPIMemory_SetCS
                  _SPIMemory_UnsetCS
                  _SPIMemory_DoWrite
 ---------------------------------------------------------------------------------
 (1) _USB_SendHex                                          3     2      1     160
                                              6 COMRAM     3     2      1
                       _Delay10KTCYx (ARG)
                  _FPGARegs_ReadData (ARG)
                       _USB_SendChar
                   _SPIMemory_ReadId (ARG)
                    _SPIMemory_SetCS (ARG)
                  _SPIMemory_UnsetCS (ARG)
                   _SPIMemory_DoRead (ARG)
                  _SPIMemory_DoWrite (ARG)
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_WaitWIP                                    1     1      0      91
                                             11 COMRAM     1     1      0
               _SPIMemory_ReadStatus
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_ReadStatus                                 2     2      0      91
                                              9 COMRAM     2     2      0
                       _Delay10KTCYx
                        _USB_SendHex (ARG)
                    _SPIMemory_SetCS
                  _SPIMemory_UnsetCS
                   _SPIMemory_DoRead
                  _SPIMemory_DoWrite
 ---------------------------------------------------------------------------------
 (2) _SPIMemory_DoRead                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_PageProgram                                8     5      3     157
                                              2 COMRAM     8     5      3
                    _SPIMemory_SetCS
                  _SPIMemory_UnsetCS
                  _SPIMemory_DoWrite
 ---------------------------------------------------------------------------------
 (1) _WriteAutoloadProgram                                 2     1      1     225
                                              5 COMRAM     2     1      1
                         _Read_b_eep
                        _Write_b_eep
                           _Busy_eep
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          5     2      3      90
                                              0 COMRAM     5     2      3
 ---------------------------------------------------------------------------------
 (1) _USB_FlushBuffer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ParseIntelHex                                       10     8      2     939
                                              6 COMRAM    10     8      2
                          _HexToByte
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2      90
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _HexToByte                                            3     1      2     181
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _USB_SendString                                       2     0      2      67
                                              1 COMRAM     2     0      2
                       _USB_SendChar
 ---------------------------------------------------------------------------------
 (1) _strcmp                                               6     2      4      91
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _SerialTerm_GetLine                                   7     6      1     180
                                              1 COMRAM     7     6      1
                       _USB_SendChar
 ---------------------------------------------------------------------------------
 (2) _USB_SendChar                                         1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _FPGARegs_ReadData                                    1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _GetFpgaImageSize                                     9     6      3     159
                                              2 COMRAM     9     6      3
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _GetAutoloadFPGA                                      1     1      0      44
                                              2 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (1) _FPGARegs_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_WriteStatus                                2     1      1      45
                                              2 COMRAM     2     1      1
                    _SPIMemory_SetCS
                  _SPIMemory_UnsetCS
                  _SPIMemory_DoWrite
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_WriteEnable                                1     1      0      23
                                              2 COMRAM     1     1      0
                    _SPIMemory_SetCS
                  _SPIMemory_UnsetCS
                  _SPIMemory_DoWrite
 ---------------------------------------------------------------------------------
 (2) _SPIMemory_DoWrite                                    2     1      1      23
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _SPIMemory_UnsetCS                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPIMemory_Init                                       0     0      0       0
                  _SPIMemory_SetHold
                    _SPIMemory_SetCS
 ---------------------------------------------------------------------------------
 (2) _SPIMemory_SetCS                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPIMemory_SetHold                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SerialTerm_Init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PeripheralInit                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LoadFPGA                                            13    10      3     476
                                             11 COMRAM    13    10      3
                       _FPGA_DoWrite
                     _FPGA_EndConfig
                   _FPGA_BeginConfig
                 _SPIMemory_ReadData
                   _GetFpgaImageSize (ARG)
 ---------------------------------------------------------------------------------
 (2) _FPGA_BeginConfig                                     0     0      0       0
                     _FPGA_ReadInitB
                   _FPGA_SetProgramB
                 _FPGA_UnsetProgramB
 ---------------------------------------------------------------------------------
 (3) _FPGA_UnsetProgramB                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FPGA_SetProgramB                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FPGA_ReadInitB                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FPGA_EndConfig                                       3     3      0      47
                                              2 COMRAM     3     3      0
                      _FPGA_ReadDone
                       _FPGA_DoWrite
 ---------------------------------------------------------------------------------
 (3) _FPGA_DoWrite                                         2     1      1      23
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _FPGA_ReadDone                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LoadPalette                                         13    12      1     661
                                             10 COMRAM    13    12      1
               _GetAutoChangePalette
                 _SPIMemory_ReadData
              _FPGARegs_WriteAddress
                 _FPGARegs_WriteData
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     159
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _FPGARegs_WriteData                                   1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (1) _FPGARegs_WriteAddress                                1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _SPIMemory_ReadData                                   8     5      3     180
                                              2 COMRAM     8     5      3
                    _SPIMemory_SetCS
                  _SPIMemory_UnsetCS
                   _SPIMemory_DoRead
                  _SPIMemory_DoWrite
 ---------------------------------------------------------------------------------
 (2) _GetAutoChangePalette                                 1     1      0      44
                                              2 COMRAM     1     1      0
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (2) _Read_b_eep                                           2     0      2      44
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _FPGA_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Delay10KTCYx                                         2     1      1      22
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FPGA_Init
   _LoadPalette
     _GetAutoChangePalette
       _Read_b_eep
     _SPIMemory_ReadData
       _SPIMemory_SetCS
       _SPIMemory_UnsetCS
       _SPIMemory_DoRead
       _SPIMemory_DoWrite
     _FPGARegs_WriteAddress
     _FPGARegs_WriteData
     ___wmul
   _SPIMemory_ReadData
     _SPIMemory_SetCS
     _SPIMemory_UnsetCS
     _SPIMemory_DoRead
     _SPIMemory_DoWrite
   _FPGARegs_WriteAddress
   _LoadFPGA
     _FPGA_DoWrite
     _FPGA_EndConfig
       _FPGA_ReadDone
       _FPGA_DoWrite
     _FPGA_BeginConfig
       _FPGA_ReadInitB
       _FPGA_SetProgramB
       _FPGA_UnsetProgramB
     _SPIMemory_ReadData
       _SPIMemory_SetCS
       _SPIMemory_UnsetCS
       _SPIMemory_DoRead
       _SPIMemory_DoWrite
     _GetFpgaImageSize (ARG)
       _Read_b_eep
   _PeripheralInit
   _SerialTerm_Init
   _SPIMemory_Init
     _SPIMemory_SetHold
     _SPIMemory_SetCS
   _SPIMemory_WriteEnable
     _SPIMemory_SetCS
     _SPIMemory_UnsetCS
     _SPIMemory_DoWrite
   _SPIMemory_WriteStatus
     _SPIMemory_SetCS
     _SPIMemory_UnsetCS
     _SPIMemory_DoWrite
   _FPGARegs_Init
   _Delay10KTCYx
   _GetAutoloadFPGA
     _Read_b_eep
   _GetFpgaImageSize
     _Read_b_eep
   _FPGARegs_ReadData
   _SerialTerm_GetLine
     _USB_SendChar
   _strcmp
   _USB_SendString
     _USB_SendChar
   _ParseIntelHex
     _HexToByte
     _strlen
   _USB_SendChar
   _USB_FlushBuffer
   _WriteAutoloadProgram
     _Read_b_eep
     _Write_b_eep
     _Busy_eep
   _HexToByte
   _SPIMemory_PageProgram
     _SPIMemory_SetCS
     _SPIMemory_UnsetCS
     _SPIMemory_DoWrite
   _SPIMemory_WaitWIP
     _SPIMemory_ReadStatus
       _Delay10KTCYx
       _USB_SendHex (ARG)
         _Delay10KTCYx (ARG)
         _FPGARegs_ReadData (ARG)
         _USB_SendChar (ARG)
         _SPIMemory_ReadId (ARG)
           _SPIMemory_SetCS
           _SPIMemory_UnsetCS
           _SPIMemory_DoRead
           _SPIMemory_DoWrite
         _SPIMemory_SetCS (ARG)
         _SPIMemory_UnsetCS (ARG)
         _SPIMemory_DoRead (ARG)
         _SPIMemory_DoWrite (ARG)
       _SPIMemory_SetCS (ARG)
       _SPIMemory_UnsetCS (ARG)
       _SPIMemory_DoRead (ARG)
       _SPIMemory_DoWrite (ARG)
   _USB_SendHex
     _Delay10KTCYx (ARG)
     _FPGARegs_ReadData (ARG)
     _USB_SendChar (ARG)
     _SPIMemory_ReadId (ARG)
       _SPIMemory_SetCS
       _SPIMemory_UnsetCS
       _SPIMemory_DoRead
       _SPIMemory_DoWrite
     _SPIMemory_SetCS (ARG)
     _SPIMemory_UnsetCS (ARG)
     _SPIMemory_DoRead (ARG)
     _SPIMemory_DoWrite (ARG)
   _SPIMemory_BulkErase
     _SPIMemory_SetCS
     _SPIMemory_UnsetCS
     _SPIMemory_DoWrite
   _WriteAutoloadFPGA
     _Read_b_eep
     _Write_b_eep
     _Busy_eep
   _WriteAutoChangePalette
     _Read_b_eep
     _Write_b_eep
     _Busy_eep
   _SPIMemory_ReadId
     _SPIMemory_SetCS
     _SPIMemory_UnsetCS
     _SPIMemory_DoRead
     _SPIMemory_DoWrite
   _SPIMemory_ReadStatus
     _Delay10KTCYx
     _USB_SendHex (ARG)
       _Delay10KTCYx (ARG)
       _FPGARegs_ReadData (ARG)
       _USB_SendChar (ARG)
       _SPIMemory_ReadId (ARG)
         _SPIMemory_SetCS
         _SPIMemory_UnsetCS
         _SPIMemory_DoRead
         _SPIMemory_DoWrite
       _SPIMemory_SetCS (ARG)
       _SPIMemory_UnsetCS (ARG)
       _SPIMemory_DoRead (ARG)
       _SPIMemory_DoWrite (ARG)
     _SPIMemory_SetCS (ARG)
     _SPIMemory_UnsetCS (ARG)
     _SPIMemory_DoRead (ARG)
     _SPIMemory_DoWrite (ARG)
   _SPIMemory_WriteDisable
     _SPIMemory_SetCS
     _SPIMemory_UnsetCS
     _SPIMemory_DoWrite
   _SPIMemory_SectorErase
     _SPIMemory_SetCS
     _SPIMemory_UnsetCS
     _SPIMemory_DoWrite
   _WriteFpgaImageSize
     _Write_b_eep
     _Busy_eep

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     101      37        6.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      40       5       40.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     25      2B       1       45.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       3       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16B      12        0.0%
DATA                 0      0     26F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Aug 11 17:54:17 2014

         __end_of_SPIMemory_Init E8D0          __end_of_SPIMemory_SetCS E806  
                 ??_FPGA_DoWrite 0002                               l38 E8A4  
                             l39 E8A2                               l55 E93A  
                             l59 E948         __end_of_SPIMemory_DoRead E936  
            ___wmul@multiplicand 0003            __size_of_USB_SendChar 000E  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
       __end_of_SPIMemory_ReadId EBA8                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                              l304 E8D4  
                            l320 E9A2                              l305 E8D2  
                            l313 E968                              l314 E966  
                            l331 EA0E                              l403 E83A  
                            l332 EA0C                              l404 E838  
                            l350 EDA6                              l319 E9A4  
                            l351 EDA4                              l344 EEE6  
                            l345 EEE4                              l363 E850  
                            l612 E7E0                              l356 E986  
                            l437 F0CE                              l357 E984  
                            l641 ECC2                              l298 E920  
                            l299 E91E                              l397 E844  
                            l398 E842                              l869 E872  
                   __CFG_CPB$OFF 000000     __size_of_SPIMemory_BulkErase 001E  
                   __CFG_CPD$OFF 000000             __size_of_Write_b_eep 0042  
 __size_of_SPIMemory_WriteEnable 001E                              prod 000FF3  
                            wreg 000FE8    __end_of_SPIMemory_WriteEnable E972  
                   __CFG_IESO$ON 000000                      _USB_SendHex EC1C  
                ??_FPGARegs_Init 0001                 ??_FPGA_EndConfig 0003  
       ??_WriteAutoChangePalette 0007                  ??_FPGA_ReadDone 0001  
                   __CFG_LVP$OFF 000000   __size_of_SPIMemory_WriteStatus 0026  
  __end_of_SPIMemory_WriteStatus EA18                             l3015 E852  
                           l3111 F7A0                             l2401 ECDE  
                           l3201 FA76                             l3113 F7AE  
                           l3105 F76E                             l3043 F5B0  
                           l2405 ED0E                             l3213 FAE0  
                           l3141 F88E                             l3133 F84E  
                           l3053 F5D6                             l2423 EA96  
                           l3231 FB70                             l3207 FAAC  
                           l3071 F63C                             l3039 F5A4  
                           l2417 EA7E                             l3305 FE3A  
                           l3313 FE70                             l3225 FB42  
                           l3065 F61E                             l2603 EC72  
                           l3307 FE48                             l3219 FB14  
                           l3139 F880                             l3075 F674  
                           l3237 FBA2                             l3261 FC6E  
                           l3181 F9CC                             l3093 F70C  
                           l3085 F6B8              SerialTerm_GetLine@n 0006  
                           l2623 E8FE                             l2607 EC8C  
                           l2703 F0F4                             l3319 FEB2  
                           l3239 FBB0                             l3175 F98E  
                           l3167 F94A                             l3079 F694  
                           l2641 EF6A                             l3281 FD50  
                           l3273 FD10                             l3193 FA38  
                           l3169 F958                             l3089 F6E2  
                           l2707 F10C                             l2731 F168  
                           l2803 F544                             l3267 FCA8  
                           l3187 FA02                             l3099 F73C  
                           l2901 F1A6                             l2725 F148  
                           l2741 EA30                             l2813 EAB8  
                           l2903 F1E4                             l2719 F130  
                           l2399 ECD6                             l2583 EBEC  
                           l2751 F320                             l3279 FD42  
                           l2737 EA1A                             l2585 EBF0  
                           l2931 F29E                             l2843 EAEC  
                           l3299 FE08                             l2669 E918  
                           l2773 F458                             l2757 F33A  
                           l2853 EB20                             l2599 EC60  
                           l2783 F478                             l2767 F3FA  
                           l2775 F462                             l2793 F4D0  
                           l2769 F404                             l2939 F2FA  
                           l2891 F18A                             l2699 F0DC  
                           l2787 F482                             l2893 F190  
                           l2885 F178                             l2789 F494  
                           l2895 F196                             l2887 F17E  
                           l2897 F19C                             l2889 F184  
                           l2977 F096                             l2985 F0AC  
                           l2993 EC32                             l2999 EC40  
                           STR_1 FFF3                             STR_2 FFEF  
                           STR_3 FFEF                             STR_4 FFF7  
                           STR_5 FFE5                             STR_6 FFEB  
                           STR_7 FEF0                             STR_8 FF59  
                           STR_9 FF4B                             u2107 E878  
                           u1165 ECCE                             _LATA 000F89  
                           u1166 ECD0                             _LATB 000F8A  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             _PIR1 000F9E  
                           _PIR3 000FA4               __size_of_FPGA_Init 0014  
                    main@retCode 001D         __size_of_USB_FlushBuffer 000A  
                    main@spiAddr 0023                             _main F54E  
              ??_GetAutoloadFPGA 0003                    ??_LoadPalette 000C  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           indf1 000FE7                             fsr1l 000FE1  
                           indf2 000FDF                             fsr2l 000FD9  
                  __CFG_BORV$220 000000                             prodh 000FF4  
                           prodl 000FF3                             start 0000  
 __end_of_SPIMemory_WriteDisable E9AE           GetFpgaImageSize@retVal 0009  
                   _USB_SendChar E840                  ?_SPIMemory_Init 0001  
          _SPIMemory_PageProgram EE74                 ??_FPGA_ReadInitB 0001  
                   main@inLength 0022          __size_of_USB_SendString 002C  
             USB_SendHex@theChar 0007                ?_FPGA_BeginConfig 0001  
                          ?_main 0001                  LoadFPGA@endAddr 000C  
                          _EEADR 000FA9                            STR_10 FF10  
                          STR_11 FFEF                            STR_12 FFAD  
                          STR_20 FF99                            STR_21 FFEF  
                          STR_13 FFDF                            STR_14 FFEF  
                          STR_22 FEDE                            STR_30 FF2F  
                          STR_23 FFEF                            STR_15 FFC0  
                          STR_31 FF20                            STR_40 FFEF  
                          STR_16 FFDF                            STR_32 FFC9  
                          STR_24 FEDC                            STR_33 FFEF  
                          STR_25 FFEF                            STR_17 FFEF  
                          STR_41 FF3D                            STR_26 FEC4  
                          STR_34 FFB7                            STR_18 FFA3  
                          STR_42 FF00                            STR_35 FFEF  
                          STR_27 FFEF                            STR_19 FFEF  
                          STR_43 FFD9                            STR_44 FFEF  
                          STR_36 FF66                            STR_28 FEC2  
                          STR_29 FFEF                            STR_37 FFDF  
                          STR_45 FF73                            STR_38 FFEF  
                          STR_46 FFD2                            STR_47 FFEF  
                          STR_39 FF80                            STR_48 FF8D  
                          STR_49 FFFB        __size_of_GetFpgaImageSize 0090  
             ??_FPGA_BeginConfig 0001                   __CFG_DEBUG$OFF 000000  
  __size_of_SPIMemory_ReadStatus 0036                            _PORTA 000F80  
                          _PORTC 000F82                            _PORTD 000F83  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96            __size_of_Delay10KTCYx 0016  
             _FPGARegs_WriteData E9D0                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
     __size_of_WriteAutoloadFPGA 0034                    __CFG_WRT3$OFF 000000  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                   __CFG_EBTR2$OFF 000000  
                 __CFG_EBTR3$OFF 000000        SPIMemory_WriteStatus@stat 0003  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   Read_b_eep@badd 0001  
                 __CFG_EBTRB$OFF 000000           Write_b_eep@GIE_BIT_VAL 0005  
             __CFG_MCLRE$EXTMCLR 000000                            main@n 0020  
            ?_FPGARegs_WriteData 0001                   __CFG_BOREN$OFF 000000  
                          tablat 000FF5                            status 000FD8  
   __end_of_WriteAutoloadProgram EAD4               _FPGA_UnsetProgramB E7EE  
       __end_of_FPGA_SetProgramB E7EE        FPGARegs_WriteAddress@addr 0001  
                __initialization ED1A               _SPIMemory_ReadData EEF0  
                   __end_of_main FEC2                 __end_of_LoadFPGA F0B2  
            __end_of_LoadPalette F300              ?_FPGA_UnsetProgramB 0001  
        ??_FPGARegs_WriteAddress 0002                       _Read_b_eep E888  
           ??_FPGARegs_WriteData 0002                     _Delay10KTCYx E872  
               __end_of_Busy_eep E7E6                 ?_SPIMemory_SetCS 0001  
              __end_of_FPGA_Init E872   SPIMemory_SectorErase@startAddr 0003  
            ?_SPIMemory_ReadData 0003                           ??_main 0019  
                  __activetblptr 000002                     LoadPalette@i 0014  
                   LoadPalette@m 0012                     LoadPalette@n 0010  
             __size_of_HexToByte 002E             ??_FPGA_UnsetProgramB 0001  
__size_of_WriteAutoChangePalette 0034                           _EEADRH 000FAA  
                         _EEDATA 000FA8                           _EECON2 000FA7  
                         _ANSELA 000F38                           _ANSELB 000F39  
                         _ANSELC 000F3A                           _ANSELD 000F3B  
                         _ANSELE 000F3C                    _IntelHex_Data 0060  
                 __CFG_WDTEN$OFF 000000             __end_of_FPGA_DoWrite E8B8  
                         _TABLAT 000FF5                           _RCREG1 000FAE  
         __size_of_ParseIntelHex 024E                           _RCSTA1 000FAB  
                         _OSCCON 000FD3             ??_SPIMemory_ReadData 0006  
                         _SPBRG1 000FAF                           _TXREG1 000FAD  
                         _TXSTA1 000FAC                 LoadFPGA@currAddr 0012  
        USB_SendString@theString 0002            _SPIMemory_SectorErase ED64  
                 __CFG_XINST$OFF 000000           ?_SPIMemory_PageProgram 0003  
              ??_USB_FlushBuffer 0001            WriteFpgaImageSize@val 0006  
                         ___wmul EBA8                   __CFG_STVREN$ON 000000  
     __end_of_WriteFpgaImageSize EE04                           clear_0 ED22  
                         clear_1 ED36                           clear_2 ED48  
                         _strcmp ECD4                           _strlen EBE2  
                   __mediumconst FEC2                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
 SPIMemory_PageProgram@currCount 0009                  __CFG_HFOFST$OFF 000000  
               ??_PeripheralInit 0001                  _SerialTerm_Init E822  
                     __accesstop 0060          __end_of__initialization ED5A  
                __CFG_PBADEN$OFF 000000          SPIMemory_ReadId@memType 0004  
            _SPIMemory_BulkErase E972                      _LoadPalette F16C  
              __end_of_HexToByte EAA0                   __pcstackCOMRAM 0001  
         _WriteAutoChangePalette EB08                   _USB_SendString EA18  
                    ?_Read_b_eep 0001                    _ParseIntelHex F300  
              ?_SPIMemory_DoRead 0001                 _GetFpgaImageSize EF70  
           ?_SPIMemory_BulkErase 0001                ?_SPIMemory_ReadId 0001  
             ??_SPIMemory_DoRead 0001   SPIMemory_PageProgram@startAddr 0003  
           _WriteAutoloadProgram EAA0               ??_SPIMemory_ReadId 0003  
                _GetAutoloadFPGA E902                     ?_USB_SendHex 0007  
                     _dataBuffer 0100                 main@getWriteData 001E  
                      ?_LoadFPGA 000C                ParseIntelHex@line 0007  
                     __pbssBANK0 0060                       __pbssBANK1 0100  
          SPIMemory_ReadId@mfgId 0006                  __CFG_PLLCFG$OFF 000000  
                      ?_Busy_eep 0001           FPGARegs_WriteData@data 0001  
    __size_of_SerialTerm_GetLine 00BA           ?_SPIMemory_SectorErase 0003  
               ??_SPIMemory_Init 0001               __CFG_CCP2MX$PORTB3 000000  
         __end_of_USB_SendString EA44    __size_of_GetAutoChangePalette 001A  
                        ?___wmul 0001           USB_SendHex@lowerNibble 0009  
             __CFG_CCP3MX$PORTE0 000000                   ?_ParseIntelHex 0007  
                  ??_Write_b_eep 0004            ??_SPIMemory_BulkErase 0003  
                        ?_strcmp 0001                          ?_strlen 0001  
          ?_WriteAutoloadProgram 0006          __end_of_SerialTerm_Init E82C  
                        _TBLPTRH 000FF7                          _TBLPTRL 000FF6  
                        _TBLPTRU 000FF8            __size_of_FPGA_DoWrite 0018  
                        _OSCTUNE 000F9B                          _SPBRGH1 000FB0  
                        _SSP1BUF 000FC9                          _SSP2BUF 000F6F  
       SerialTerm_GetLine@noEcho 0002            _SPIMemory_WriteEnable E954  
          __end_of_FPGARegs_Init E836         SerialTerm_GetLine@retVal 0004  
      __size_of_FPGA_BeginConfig 001E                       ??_LoadFPGA 000F  
          __end_of_FPGA_ReadDone E818               LoadPalette@spiAddr 0015  
                 main@oldJumpers 001C              __size_of_Read_b_eep 0018  
                 main@newJumpers 001F            _SPIMemory_WriteStatus E9F2  
                     ??_Busy_eep 0001     __end_of_SPIMemory_ReadStatus EB72  
                __CFG_PWRTEN$OFF 000000                ?_FPGA_SetProgramB 0001  
                        __Hparam 0000                          __Lparam 0000  
                ?_USB_SendString 0002               ??_FPGA_SetProgramB 0001  
                __size_of___wmul 003A          __end_of_GetAutoloadFPGA E91C  
                        __pcinit ED1A   __size_of_FPGARegs_WriteAddress 0022  
                   _FPGA_DoWrite E8A0                          __ramtop 1000  
  __end_of_FPGARegs_WriteAddress E9D0                          __ptext0 F54E  
                        __ptext1 EDB0                          __ptext2 ED64  
                        __ptext3 E990                          __ptext4 EB72  
                        __ptext5 EB08                          __ptext6 EAD4  
                        __ptext7 E972                          __ptext8 EC1C  
                        __ptext9 E84E      SPIMemory_ReadData@currCount 0009  
                __size_of_strcmp 0046                  __size_of_strlen 003A  
                      _FPGA_Init E85E              __end_of_Write_b_eep ECD4  
           end_of_initialization ED5A                  _USB_FlushBuffer E836  
                  __Lmediumconst FEC2          ??_SPIMemory_PageProgram 0006  
        __size_of_FPGA_EndConfig 003C                  ??_ParseIntelHex 0009  
        WriteAutoloadFPGA@oldVal 0007          WriteAutoloadFPGA@newVal 0006  
         USB_SendHex@upperNibble 0008                          postdec1 000FE5  
    SPIMemory_ReadData@startAddr 0003                          postinc0 000FEE  
    __size_of_FPGARegs_WriteData 0022                          strcmp@r 0006  
                        strlen@s 0001           ??_WriteAutoloadProgram 0007  
            _IntelHex_RecordType 002B                       ?_FPGA_Init 0001  
               ?_SerialTerm_Init 0001         __size_of_SPIMemory_SetCS 0008  
         ?_SPIMemory_WriteEnable 0001          __size_of_FPGA_ReadInitB 000A  
                      LoadFPGA@m 0017                        LoadFPGA@n 0015  
             _WriteFpgaImageSize EDB0      __size_of_FPGA_UnsetProgramB 0008  
           __size_of_USB_SendHex 003A           ?_SPIMemory_WriteStatus 0003  
       ??_SPIMemory_WriteDisable 0003                _FPGARegs_ReadData EA44  
    __size_of_SPIMemory_ReadData 0080              ?_WriteFpgaImageSize 0006  
             ?_FPGARegs_ReadData 0001         __end_of_GetFpgaImageSize F000  
                   ?_LoadPalette 000B          ?_WriteAutoChangePalette 0006  
     WriteAutoloadProgram@oldVal 0007       WriteAutoloadProgram@newVal 0006  
            ??_FPGARegs_ReadData 0001             SPIMemory_DoWrite@tmp 0002  
                   ??_Read_b_eep 0003                   __end_of___wmul EBE2  
                      _HexToByte EA72                 ?_GetAutoloadFPGA 0001  
           ??_WriteFpgaImageSize 0009                      _Write_b_eep EC92  
           _SPIMemory_ReadStatus EB3C                _SPIMemory_DoWrite E8D0  
                 __end_of_strcmp ED1A                   __end_of_strlen EC1C  
            start_initialization ED1A          __end_of_USB_FlushBuffer E840  
             ?_SPIMemory_DoWrite 0001        __end_of_FPGARegs_ReadData EA72  
              _SPIMemory_SetHold E7F6                _SPIMemory_WaitWIP E84E  
               _FPGA_BeginConfig E936          ??_SPIMemory_SectorErase 0006  
      __size_of_SPIMemory_DoRead 001A               ?_SPIMemory_SetHold 0001  
              _SPIMemory_UnsetCS E806               ?_SPIMemory_WaitWIP 0001  
             __end_of_Read_b_eep E8A0              ??_SPIMemory_DoWrite 0002  
      __size_of_SPIMemory_ReadId 0036   __end_of_WriteAutoChangePalette EB3C  
              __size_of_LoadFPGA 00B2               ?_SPIMemory_UnsetCS 0001  
              __size_of_Busy_eep 0006                    ?_USB_SendChar 0001  
            ??_SPIMemory_SetHold 0001              ??_SPIMemory_WaitWIP 000C  
                       ??___wmul 0005              ??_SPIMemory_UnsetCS 0001  
           HexToByte@lowerNibble 0002                       ?_HexToByte 0001  
      __end_of_SPIMemory_DoWrite E8E8                         ??_strcmp 0005  
                       ??_strlen 0003            ?_SPIMemory_ReadStatus 0001  
         SPIMemory_ReadId@memCap 0005                      __pbssBIGRAM 0200  
                    ??_FPGA_Init 0001                      __pbssCOMRAM 0026  
      __end_of_SPIMemory_SetHold E7FE     __end_of_GetAutoChangePalette E902  
      __end_of_SPIMemory_WaitWIP E85E              __end_of__stringdata FFFE  
      __end_of_SPIMemory_UnsetCS E80E       __end_of_SerialTerm_GetLine F16C  
                 LoadPalette@jmp 000B  __size_of_SPIMemory_WriteDisable 001E  
              ??_SPIMemory_SetCS 0001                 ??_USB_SendString 0004  
                 _FPGA_EndConfig EC56                   ??_USB_SendChar 0002  
                 ParseIntelHex@n 0010               HexToByte@returnVal 0003  
        __size_of_PeripheralInit 0070      __end_of_SPIMemory_BulkErase E990  
                  __pmediumconst FEC2                    ?_Delay10KTCYx 0001  
     SerialTerm_GetLine@inputTmp 0008                 __CFG_PRICLKEN$ON 000000  
      __size_of_FPGA_SetProgramB 0008                         _BAUDCON1 000FB8  
                 _FPGA_ReadInitB E818                 ?_USB_FlushBuffer 0001  
     __size_of_FPGARegs_ReadData 002E     WriteAutoChangePalette@oldVal 0007  
   WriteAutoChangePalette@newVal 0006           __end_of_FPGA_EndConfig EC92  
                 ___wmul@product 0005         FPGA_EndConfig@retryCount 0004  
             _IntelHex_ByteCount 002A   __size_of_SPIMemory_PageProgram 007C  
  __end_of_SPIMemory_PageProgram EEF0             __size_of_LoadPalette 0194  
            SPIMemory_DoRead@tmp 0001                 __CFG_WDTPS$32768 000000  
                 ??_Delay10KTCYx 0002             HexToByte@upperNibble 0001  
                FPGA_DoWrite@tmp 0002                         _SSP1CON1 000FC6  
                       _SSP2CON1 000F6C                         _SSP1STAT 000FC7  
                       _SSP2STAT 000F6D           _SPIMemory_WriteDisable E990  
         __size_of_FPGARegs_Init 000A                      ??_HexToByte 0003  
        __size_of_SPIMemory_Init 0018           __size_of_FPGA_ReadDone 000A  
         ??_SPIMemory_ReadStatus 000A       __size_of_SPIMemory_DoWrite 0018  
                    __stringdata FEC2                ___wmul@multiplier 0001  
        ??_SPIMemory_WriteEnable 0003           __end_of_FPGA_ReadInitB E822  
                Write_b_eep@badd 0001                  Write_b_eep@bdat 0003  
          _FPGARegs_WriteAddress E9AE       __size_of_SPIMemory_SetHold 0008  
               Delay10KTCYx@unit 0001          ??_SPIMemory_WriteStatus 0004  
     __size_of_SPIMemory_WaitWIP 0010             FPGARegs_ReadData@ret 0001  
     __size_of_SPIMemory_UnsetCS 0008                         _LoadFPGA F000  
             _IntelHex_StartAddr 0026                 _SPIMemory_DoRead E91C  
                ?_FPGA_EndConfig 0001                 _SPIMemory_ReadId EB72  
                       _Busy_eep E7E0                       _EECON1bits 000FA6  
              ?_GetFpgaImageSize 0003                         __Hrparam 0000  
             ??_GetFpgaImageSize 0006                         __Lrparam 0000  
     __end_of_FPGARegs_WriteData E9F2             _GetAutoChangePalette E8E8  
              __CFG_P2BMX$PORTC0 000000            __end_of_ParseIntelHex F54E  
       __end_of_FPGA_BeginConfig E954                     ?_Write_b_eep 0001  
                ?_FPGA_ReadInitB 0001    __size_of_WriteAutoloadProgram 0034  
           __end_of_USB_SendChar E84E                    ??_USB_SendHex 0008  
     __end_of_FPGA_UnsetProgramB E7F6                         __ptext10 EB3C  
                       __ptext11 E91C                         __ptext20 EA18  
                       __ptext12 EE74                         __ptext21 ECD4  
                       __ptext13 EAA0                         __ptext30 E8D0  
                       __ptext22 F0B2                         __ptext14 E7E0  
                       __ptext31 E806                         __ptext23 E840  
                       __ptext15 EC92                         __ptext40 E7E6  
                       __ptext32 E8B8                         __ptext24 EA44  
                       __ptext16 E836                         __ptext41 E818  
                       __ptext33 E7FE                         __ptext25 EF70  
                       __ptext17 F300                         __ptext50 E8E8  
                       __ptext42 EC56                         __ptext34 E7F6  
                       __ptext26 E902                         __ptext18 EBE2  
                       __ptext51 E888                         __ptext43 E8A0  
                       __ptext35 E822                         __ptext27 E82C  
                       __ptext19 EA72                         __ptext52 E85E  
                       __ptext44 E80E                         __ptext36 EE04  
                       __ptext28 E9F2                         __ptext53 E872  
                       __ptext45 F16C                         __ptext37 F000  
                       __ptext29 E954                         __ptext46 EBA8  
                       __ptext38 E936                         __ptext47 E9D0  
                       __ptext39 E7EE                         __ptext48 E9AE  
                       __ptext49 EEF0       __end_of_SPIMemory_ReadData EF70  
                  _FPGARegs_Init E82C                    _FPGA_ReadDone E80E  
       __size_of_SerialTerm_Init 000A   __size_of_SPIMemory_SectorErase 004C  
  __end_of_SPIMemory_SectorErase EDB0                    __size_of_main 0974  
                    _inputBuffer 0200                   _PeripheralInit EE04  
          ?_GetAutoChangePalette 0001               SPIMemory_DoWrite@d 0001  
         ?_FPGARegs_WriteAddress 0001      __size_of_WriteFpgaImageSize 0054  
               _FPGA_SetProgramB E7E6                  _SPIMemory_SetCS E7FE  
                 _inputBufferPos 0028                       _INTCONbits 000FF2  
        ParseIntelHex@lineLength 000F         __size_of_GetAutoloadFPGA 001A  
              _WriteAutoloadFPGA EAD4                   ?_FPGARegs_Init 0001  
           __end_of_Delay10KTCYx E888                   ?_FPGA_ReadDone 0001  
             ?_WriteAutoloadFPGA 0006              __end_of_USB_SendHex EC56  
         __end_of_PeripheralInit EE74              ??_WriteAutoloadFPGA 0007  
                  FPGA_DoWrite@d 0001               _SerialTerm_GetLine F0B2  
                 _SPIMemory_Init E8B8                    ?_FPGA_DoWrite 0001  
          ParseIntelHex@checksum 000E              ?_SerialTerm_GetLine 0002  
                       strcmp@s1 0001                         strcmp@s2 0003  
                       strlen@cp 0005        __end_of_WriteAutoloadFPGA EB08  
            USB_SendChar@theChar 0001                __CFG_T3CMX$PORTB5 000000  
       SPIMemory_ReadStatus@stat 000B                __CFG_FOSC$INTIO67 000000  
           ??_SerialTerm_GetLine 0003                  ?_PeripheralInit 0001  
         ??_GetAutoChangePalette 0003                ??_SerialTerm_Init 0001  
        ?_SPIMemory_WriteDisable 0001  
